#!/usr/bin/env bash

# Function to delete matching original files
delete_original_file() {
    local base="$1"
    local dir="$2"

    # Use nullglob to avoid literal globs
    shopt -s nullglob

    # Match files that start with base, excluding _resized, etc.
    for file in "$dir"/"$base".*; do
        filename=$(basename "$file")
        if [[ "$filename" != *_resized.* ]]; then
            echo "Removing: $file"
            rm -v -- "$file"
        fi
    done

    shopt -u nullglob
}

# Print usage
print_usage() {
    local script_name
    script_name="$(basename "$0")"
    cat <<EOF
Usage: $script_name [OPTION] <ARGUMENT>

Options:
  --f <filelist.txt>     Remove original files based on processed names in the list.
  --d <output_folder>    Remove original files based on processed names in folder.

Examples:
  $script_name --f files.txt
  $script_name --d /path/to/output_folder
EOF
}

# Input validation
if [[ "$#" -ne 2 ]]; then
    print_usage
    exit 1
fi

flag="$1"
value="$2"
target_dir="."  # default location for originals to delete

case "$flag" in
    --f)
        if [[ ! -f "$value" ]]; then
            echo "Error: '$value' is not a valid file."
            exit 1
        fi
        while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" ]] && continue
            filename=$(basename "$line")
            base="${filename%.*}"
            base="${base%_resized}"  # strip suffix
            delete_original_file "$base" "$target_dir"
        done < "$value"
        ;;
    --d)
        if [[ ! -d "$value" ]]; then
            echo "Error: '$value' is not a valid directory."
            exit 1
        fi
        for file in "$value"/*_resized.*; do
            [[ -e "$file" ]] || continue
            filename=$(basename "$file")
            base="${filename%.*}"
            base="${base%_resized}"
            delete_original_file "$base" "$target_dir"
        done
        ;;
    *)
        echo "Invalid option: $flag"
        print_usage
        exit 1
        ;;
esac