#!/usr/bin/env bash

usage() {
  echo "Usage: $0 [-f] [-t] [-a] [file_or_directory]"
  echo "Converts between WebP, AVIF, and JPEG/PNG."
  echo "  -f  Convert from WebP to JPEG."
  echo "  -t  Convert to WebP from JPEG, PNG."
  echo "  -a  Convert from AVIF to JPEG."
  echo "  file_or_directory  Optional: Path to a single file or a directory to convert. Defaults to current dir."
  exit 1
}

convert_from_webp=false
convert_to_webp=false
convert_from_avif=false

while getopts "fta" opt; do
  case ${opt} in
    f) convert_from_webp=true ;;
    t) convert_to_webp=true ;;
    a) convert_from_avif=true ;;
    *) usage ;;
  esac
done
shift $((OPTIND-1))

file_or_directory="${1:-.}"  # Default to current dir

if ! $convert_from_webp && ! $convert_to_webp && ! $convert_from_avif; then
  echo "Error: Please specify at least one conversion option (-f, -t, or -a)" >&2
  usage
fi

convert_to_webp_func() {
  local file="$1"
  [[ -f "$file" ]] || return
  echo "Converting $file → ${file%.*}.webp"
  cwebp -q 80 "$file" -o "${file%.*}.webp"
}

convert_from_webp_func() {
  local file="$1"
  [[ -f "$file" ]] || return
  echo "Converting $file → ${file%.*}.jpg"
  dwebp "$file" -o "${file%.*}.jpg" && rm "$file"
}

convert_from_avif_func() {
  local file="$1"
  [[ -f "$file" ]] || return
  echo "Converting $file → ${file%.*}.jpg"
  magick "$file" "${file%.*}.jpg" && rm "$file"
}

process_files() {
  local patterns=("$@") func
  func="${patterns[-1]}"        # last arg is function name
  unset 'patterns[-1]'

  if [[ -f "$file_or_directory" ]]; then
    $func "$file_or_directory"
  elif [[ -d "$file_or_directory" ]]; then
    shopt -s nullglob
    for ext in "${patterns[@]}"; do
      for f in "$file_or_directory"/*.$ext; do
        $func "$f"
      done
    done
    shopt -u nullglob
  else
    echo "Error: $file_or_directory is not a valid file or directory."
    exit 1
  fi
}

$convert_to_webp   && process_files jpg jpeg png convert_to_webp_func
$convert_from_webp && process_files webp convert_from_webp_func
$convert_from_avif && process_files avif convert_from_avif_func