AC_MSG_CHECKING(for cdparanoia libraries and headers)

AC_ARG_WITH(cdparanoia,
  [  --with-cdparanoia[=DIR] Compile in cdparanoia support [default=check]],
  [
    case "$withval" in
    yes)
      with_cdparanoia=CHECK
      ;;
    esac
  ],
  [
    with_cdparanoia=CHECK
  ]
)dnl

if test "x$with_cdparanoia" = "xCHECK" ; then
  with_cdparanoia=NOTFOUND
  search_incs="$kde_includes /usr/include /usr/local/include"
  AC_FIND_FILE(cdda_interface.h, $search_incs, para_incdir)
  if test -r $para_incdir/cdda_interface.h ; then
    test "x$para_incdir" != "x/usr/include" && CDPARANOIA_INCS="-I$para_incdir"
    with_cdparanoia=FOUND
  fi
  if test $with_cdparanoia = FOUND ; then
    with_cdparanoia=NOTFOUND
    # because of the horrible hack we need shared cdparanoia
    for ext in la so sl a ; do
      AC_FIND_FILE(libcdda_paranoia.$ext, $kde_libraries /usr/lib /usr/local/lib,
        para_libdir)
      if test -r $para_libdir/libcdda_paranoia.$ext ; then
        if test "x$para_libdir" != "x/usr/lib" ; then
          CDPARANOIA_LIBS="-L$para_libdir "
	  test "$USE_RPATH" = yes && CDPARANOIA_RPATH="-R $para_libdir"
        fi
        CDPARANOIA_LIBS="${CDPARANOIA_LIBS}-lcdda_paranoia -lcdda_interface"
	with_cdparanoia=FOUND
        break
      fi
    done
    if test "$with_cdparanoia" = FOUND; then
      if test "$ext" = la; then
        grep "^library_names='*[a-z]*'" $para_libdir/libcdda_paranoia.$ext 2>&1 > /dev/null || with_cdparanoia=NOTFOUND
      fi
      if test "$ext" = a; then
        with_cdparanoia=NOTFOUND
        cdparanoia_only_static=yes
      fi
      # beware, that we don't reset CDPARANOIA_*
    fi
  fi
fi

case "$with_cdparanoia" in
no) AC_MSG_RESULT(no) ;;
NOTFOUND) AC_MSG_RESULT(searched but not found) ;;
*)
  if test "x$with_cdparanoia" = "xFOUND" ; then
    AC_MSG_RESULT(incs=$para_incdir libs=$para_libdir)
  else
    AC_MSG_RESULT($with_cdparanoia)
    CDPARANOIA_ROOT="$with_cdparanoia"
    if test "x$CDPARANOIA_ROOT" != "x/usr" ; then
      CDPARANOIA_INCS="-I${CDPARANOIA_ROOT}/include"
      CDPARANOIA_LIBS="-L${CDPARANOIA_ROOT}/lib "
      if test "$USE_RPATH" = "yes" ; then
        CDPARANOIA_RPATH="-R ${CDPARANOIA_ROOT}/lib"
      fi
    fi
    CDPARANOIA_LIBS="${CDPARANOIA_LIBS}-lcdda_paranoia -lcdda_interface"
  fi
  AC_DEFINE_UNQUOTED(HAVE_CDPARANOIA, 1, [Define if you have cdparanoia])
  AUDIOCD_SUBDIR="audiocd"
  ;;
esac

AC_SUBST(CDPARANOIA_INCS)
AC_SUBST(CDPARANOIA_LIBS)
AC_SUBST(CDPARANOIA_RPATH)
AC_SUBST(AUDIOCD_SUBDIR)

AC_MSG_CHECKING(for lame library and header)

AC_ARG_WITH(lame,
  [  --with-lame[=DIR]	  Compile in Lame MP3 support [default=check]],
  [
    case "$withval" in
    yes) with_lame=CHECK ;;
    esac
  ],
  [ with_lame=CHECK ]
)dnl
AC_ARG_ENABLE(lametest,
  [  --disable-lametest    Do not try to compile and run a test Lame MP3 program], , enable_lametest=yes)

if test "x$with_lame" = "xCHECK" ; then
  with_lame=NOTFOUND
  search_incs="/usr/local/include $kde_includes /usr/include"
  AC_FIND_FILE(lame/lame.h, $search_incs, lame_incdir)
  if test -r $lame_incdir/lame/lame.h ; then
    test "x$lame_incdir" != "x/usr/include" && LAME_INCS="-I$lame_incdir"
    with_lame=FOUND
  fi
  if test $with_lame = FOUND ; then
    with_lame=NOTFOUND
    for ext in la so sl a ; do
      AC_FIND_FILE(libmp3lame.$ext, /usr/local/lib $kde_libraries /usr/lib,
        lame_libdir)
      if test -r $lame_libdir/libmp3lame.$ext ; then
        if test "x$lame_libdir" != "x/usr/lib" ; then
          LAME_LIBS="-L$lame_libdir "
	  test "$USE_RPATH" = yes && LAME_RPATH="-R $lame_libdir"
        fi
        LAME_LIBS="${LAME_LIBS}-lmp3lame -lm"
	with_lame=FOUND
        break
      fi
    done
  fi
fi

case "$with_lame" in
no) AC_MSG_RESULT(no) ;;
NOTFOUND) AC_MSG_RESULT(searched but not found) ;;
*)
  if test "x$with_lame" = "xFOUND" ; then
    msg="incs=$lame_incdir libs=$lame_libdir"
  else
    msg="$with_lame"
    LAME_ROOT="$with_lame"
    if test "x$LAME_ROOT" != "x/usr" ; then
      LAME_INCS="-I${LAME_ROOT}/include"
      LAME_LIBS="-L${LAME_ROOT}/lib "
      if test "$USE_RPATH" = "yes" ; then
        LAME_RPATH="-R ${LAME_ROOT}/lib"
      fi
    fi
    LAME_LIBS="${LAME_LIBS}-lmp3lame -lm"
  fi
  non_compile=no
  if test "x$enable_lametest" = xyes ; then
    ac_save_CFLAGS="$CFLAGS"
    ac_save_LIBS="$LIBS"
    CFLAGS="$CFLAGS $all_includes $LAME_INCS"
    LIBS="$LIBS $all_libraries $LAME_LIBS"
    rm -f conf.lametest conf.wrongver
    AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <lame/lame.h>

int main ()
{
  lame_version_t v;
  get_lame_version_numerical (&v);
  if (v.major>3 || (v.major==3 && v.minor>88)) {
    system("touch conf.lametest");
    return 0;
  } else {
    system("touch conf.wrongver");
    return 1;
  }
}
], , non_compile=yes , [echo $ac_n "cross compiling; assumed OK... $ac_c"])
    CFLAGS="$ac_save_CFLAGS"
    LIBS="$ac_save_LIBS"
    # bogus return value, but it _did_ run correctly
    test -f conf.lametest && non_compile=no
    # Set the flag for configure.in.bot
    test -f conf.wrongver && lame_wrong_version=yes
    rm -f conf.lametest conf.wrongver
  fi
  if test "$non_compile" = no ; then
    AC_MSG_RESULT($msg)
    AC_DEFINE_UNQUOTED(HAVE_LAME, 1, [Define if you have lame])
    KCM_AUDIOCD="kcmaudiocd"
  else
    AC_MSG_RESULT(no (but first try gave $msg))
    if test -z "$lame_wrong_version"; then
      # only do this test, if it really didn't run
      echo "*** Could not run Lame test program, checking why..."
      CFLAGS="$CFLAGS $all_includes $LAME_INCS"
      LIBS="$LIBS $all_libraries $LAME_LIBS"
      AC_TRY_LINK([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <lame/lame.h>
], [
  lame_version_t v;
  get_lame_version_numerical (&v);
  return 0;
],
[ echo "*** The test program compiled, but did not run. This usually means"
echo "*** that the run-time linker is not finding Lame or finding the wrong"
echo "*** version of Lame. If it is not finding Lame, you'll need to set your"
echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
echo "*** to the installed location  Also, make sure you have run ldconfig if that"
echo "*** is required on your system"
echo "***"
echo "*** If you have an old version installed, it is best to remove it, although"
echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"], [
echo "*** The test program failed to compile or link. See the file config.log for the"
echo "*** exact error that occured. This usually means Lame was incorrectly installed"
echo "*** or that you have moved Lame since it was installed." ])
      # ac_save_* still set, because this else part is only entered if the
      # enable_lametest was yes, in which case also ac_save_* was set.
      CFLAGS="$ac_save_CFLAGS"
      LIBS="$ac_save_LIBS"
    fi
    LAME_INCS=
    LAME_LIBS=
    LAME_RPATH=
  fi
  ;;
esac

AC_SUBST(LAME_INCS)
AC_SUBST(LAME_LIBS)
AC_SUBST(LAME_RPATH)
AC_SUBST(KCM_AUDIOCD)

AC_MSG_CHECKING(for Vorbis Ogg libraries and headers)

AC_ARG_WITH(vorbis,
  [  --with-vorbis[=DIR]	  Compile in Vorbis OGG support [default=check]],
  [
    case "$withval" in
    yes) with_vorbis=CHECK ;;
    esac
  ],
  [ with_vorbis=CHECK ]
)dnl
AC_ARG_ENABLE(vorbistest,
  [  --disable-vorbistest    Do not try to compile and run a test Vorbis program], , enable_vorbistest=yes)

if test "x$with_vorbis" = "xCHECK" ; then
  with_vorbis=NOTFOUND
  search_incs="$kde_includes /usr/local/include /usr/include"
  AC_FIND_FILE(vorbis/codec.h, $search_incs, vorbis_incdir)
  if test -r $vorbis_incdir/vorbis/codec.h ; then
    test "x$vorbis_incdir" != "x/usr/include" && VORBIS_INCS="-I$vorbis_incdir"
    with_vorbis=FOUND
  fi
  if test $with_vorbis = FOUND ; then
    with_vorbis=NOTFOUND
    for ext in la so sl a ; do
      AC_FIND_FILE(libvorbis.$ext, $kde_libraries /usr/local/lib /usr/lib,
        vorbis_libdir)
      if test -r $vorbis_libdir/libvorbis.$ext ; then
        if test "x$vorbis_libdir" != "x/usr/lib" ; then
          VORBIS_LIBS="-L$vorbis_libdir "
          test "$USE_RPATH" = yes && VORBIS_RPATH="-R $vorbis_libdir"
        fi
        VORBIS_LIBS="${VORBIS_LIBS}-lvorbis -lm"
        with_vorbis=FOUND
        break
      fi
    done
  fi
fi

case "$with_vorbis" in
no) AC_MSG_RESULT(no) ;;
NOTFOUND) AC_MSG_RESULT(searched but not found) ;;
*)
  if test "x$with_vorbis" = "xFOUND" ; then
    msg="incs=$vorbis_incdir libs=$vorbis_libdir"
  else
    msg="$with_vorbis"
    VORBIS_ROOT="$with_vorbis"
    if test "x$VORBIS_ROOT" != "x/usr" ; then
      VORBIS_INCS="-I${VORBIS_ROOT}/include"
      VORBIS_LIBS="-L${VORBIS_ROOT}/lib "
      test "$USE_RPATH" = yes && VORBIS_RPATH="-R ${VORBIS_ROOT}/lib"
    fi
    VORBIS_LIBS="${VORBIS_LIBS}-lvorbis -lm"
  fi
  non_compile=no
  if test "x$enable_vorbistest" = xyes ; then
    ac_save_CFLAGS="$CFLAGS"
    ac_save_CXXFLAGS="$CXXFLAGS"
    ac_save_LIBS="$LIBS"
    CFLAGS="$CFLAGS $all_includes $VORBIS_INCS"
    CXXFLAGS="$CXXFLAGS $all_includes $VORBIS_INCS"
    LIBS="$LIBS $all_libraries $VORBIS_LIBS"
    rm -f conf.vorbistest
    AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vorbis/codec.h>

int main ()
{
  system("touch conf.vorbistest");
  return 0;
}

], , non_compile=yes , [echo $ac_n "cross compiling; assumed OK... $ac_c"])
    CFLAGS="$ac_save_CFLAGS"
    CXXFLAGS="$ac_save_CXXFLAGS"
    LIBS="$ac_save_LIBS"
    # bogus return value, but it _did_ run
    test -f conf.vorbistest && non_compile="no"
    rm -f conf.vorbistest
  fi

  if test "$non_compile" = no ; then
     AC_MSG_RESULT($msg)
     AC_DEFINE_UNQUOTED(HAVE_VORBIS, 1, [Define if you have vorbis])
     VORBISFILE_LIBS="-lvorbisfile"
     VORBISENC_LIBS="-lvorbisenc -lvorbis"
     KCM_AUDIOCD="kcmaudiocd"	
  else
     AC_MSG_RESULT(no (but first try gave $msg))
     echo "*** Could not run Vorbis test program, checking why..."
     CFLAGS="$CFLAGS $all_includes $VORBIS_INCS"
     CXXFLAGS="$CXXFLAGS $all_includes $VORBIS_INCS"
     LIBS="$LIBS $all_libraries $VORBIS_LIBS"
     AC_TRY_LINK([
#include <stdio.h>
#include <vorbis/codec.h>
],   [ return 0; ],
     [ echo "*** The test program compiled, but did not run. This usually means"
     echo "*** that the run-time linker is not finding Vorbis or finding the wrong"
     echo "*** version of Vorbis. If it is not finding Vorbis, you'll need to set your"
     echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
     echo "*** to the installed location  Also, make sure you have run ldconfig if that"
     echo "*** is required on your system"
     echo "***"
     echo "*** If you have an old version installed, it is best to remove it, although"
     echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"],
     [ echo "*** The test program failed to compile or link. See the file config.log for the"
     echo "*** exact error that occured. This usually means Vorbis was incorrectly installed"
     echo "*** or that you have moved Vorbis since it was installed." ])
     CFLAGS="$ac_save_CFLAGS"
     CXXFLAGS="$ac_save_CXXFLAGS"
     LIBS="$ac_save_LIBS"
     VORBIS_INCS=""
     VORBIS_LIBS=""
     VORBISFILE_LIBS=""
     VORBISENC_LIBS=""
  fi
  ;;
esac

AC_SUBST(VORBIS_INCS)
AC_SUBST(VORBIS_LIBS)
AC_SUBST(VORBIS_RPATH)
AC_SUBST(VORBISFILE_LIBS)
AC_SUBST(VORBISENC_LIBS)
AC_SUBST(KCM_AUDIOCD)
