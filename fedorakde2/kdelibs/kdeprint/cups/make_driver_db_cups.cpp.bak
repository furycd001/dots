#include <qstring.h>
#include <qstringlist.h>
#include <qdir.h>
#include <qfile.h>
#include <qtextstream.h>
#include <zlib.h>
#include <iostream.h>
#include <stdlib.h>

void listDrivers(const QString& dirname, QStringList& list)
{
qDebug("listing %s",dirname.latin1());
	QDir	d(dirname);
	if (d.exists())
	{
		QStringList	mylist = d.entryList("*.ppd;*.ppd.gz",QDir::Files,QDir::Unsorted);
		for (QStringList::ConstIterator it=mylist.begin(); it!=mylist.end(); ++it)
			list.append(d.absFilePath(*it));
		mylist = d.entryList(QDir::Dirs,QDir::Unsorted);
		for (QStringList::ConstIterator it=mylist.begin(); it!=mylist.end(); ++it)
			if ((*it) != "." && (*it) != "..")
				listDrivers(d.absFilePath(*it),list);
	}
}

void processFile(const QString& filename, QTextStream& out)
{
	gzFile	ppd_file;
	char	line[4096];
	QStringList	words;

	ppd_file = gzopen(filename.local8Bit(),"r");
	if (ppd_file == NULL)
	{
		qDebug("Can't open driver file : %s", filename.latin1());
		return;
	}
	out << "FILE=" << filename << endl;

	while (gzgets(ppd_file,line,4095) != Z_NULL)
	{
		words = QStringList::split(' ',QString::fromLocal8Bit(line),false);
		if (words.count() > 1)
			if (words[0] == "*Manufacturer:") out << "MANUFACTURER=" << words[1] << endl;
			else if (words[0] == "*ShortNickName:") out << "MODEL=" << words[1] << endl;
			else if (words[0] == "*NickName:") out << "DESCRIPTION=" << words[1] << endl;
			else if (words[0] == "*pnpManufacturer:") out << "PNPMANUFACTURER=" << words[1] << endl;
			else if (words[0] == "*pnpModel:") out << "PNPMODEL=" << words[1] << endl;
	}
	out << endl;

	gzclose(ppd_file);
}

int main(int argc, char *argv[])
{
	if (argc != 3)
	{
		qDebug("usage: make_driver_db_cups <driver_dir> <db-file>");
		exit(-1);
	}

	QFile	out(QString::fromLocal8Bit(argv[2]));
	QString	driverdir(QString::fromLocal8Bit(argv[1]));
	if (out.open(IO_WriteOnly))
	{
		QTextStream	tout(&out);
		QStringList	ppdfiles;
		int		counter(0);

		listDrivers(driverdir,ppdfiles);
		if (ppdfiles.count() == 0)
		{
			qDebug("No driver found !");
			exit(-1);
		}

		cout << ppdfiles.count() << endl << flush;
		for (QStringList::ConstIterator it=ppdfiles.begin(); it!=ppdfiles.end(); ++it)
		{
			processFile(*it,tout);
			cout << ++counter << endl << flush;
		}
	}

	return 0;
}
