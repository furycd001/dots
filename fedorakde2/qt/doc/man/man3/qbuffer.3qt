'\" t
.TH QBuffer 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QBuffer \- I/O device that operates on a
.br
.PP
\fC#include <qbuffer.h>\fR
.PP
Inherits QIODevice.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQBuffer\fR () "
.br
.ti -1c
.BI "\fBQBuffer\fR ( QByteArray ) "
.br
.ti -1c
.BI "\fB~QBuffer\fR () "
.br
.ti -1c
.BI "QByteArray \fBbuffer\fR () const"
.br
.ti -1c
.BI "bool \fBsetBuffer\fR ( QByteArray ) "
.br
.in -1c
.SH DESCRIPTION
The QBuffer class is an I/O device that operates on a QByteArray
.PP
QBuffer allows reading and writing a memory buffer. It is normally used together with a QTextStream or a QDataStream. QBuffer has an associated QByteArray which holds the buffer data. The size() of the buffer is automatically adjusted as data is written.
.PP
The constructor \fCQBuffer(QByteArray)\fR creates a QBuffer with an existing byte array. The byte array can also be set with setBuffer(). Writing to the QBuffer will modify the original byte array, since QByteArray is explicitly shared.
.PP
Use open() to open the buffer before use, and to set the mode (read-only,write-only, etc.). close() closes the buffer. The buffer must be closed before reopening or calling setBuffer().
.PP
The common way to use QBuffer is through QDataStream or QTextStream which have constructors that take a QBuffer parameter. For convenience, there are also QDataStream and QTextStream constructors that take a QByteArray parameter. These constructors create and open an internal QBuffer.
.PP
Note that QTextStream can also operate on a QString (a Unicode string); a QBuffer cannot.
.PP
You can also use QBuffer directly through the standard QIODevice functions readBlock(), writeBlock() readLine(), at(), getch(), putch() and ungetch().
.PP
See also QFile, QDataStream, QTextStream, QByteArray and Shared Classes
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QBuffer::QBuffer ()"
Constructs an empty buffer.
.SH "QBuffer::QBuffer ( QByteArray buf )"
Constructs a buffer that operates on \fIbuf.\fR If you open the buffer in write mode (\fCIO_WriteOnly\fR or \fCIO_ReadWrite)\fR and write something into the buffer, \fIbuf\fR will be modified.
.PP
Example:
.PP
.nf
.br
    QCString str = "abc";
.br
    QBuffer b( str );
.br
    b.open( IO_WriteOnly );
.br
    b.at( 3 );                                  // position at \\0
.br
    b.writeBlock( "def", 4 );                   // write including \\0
.br
    b.close();
.br
      // Now, str == "abcdef"
.fi
.PP
See also setBuffer().
.SH "QBuffer::~QBuffer ()"
Destructs the buffer.
.SH "bool QBuffer::at ( int pos ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::at () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "QByteArray QBuffer::buffer () const"
Returns this buffer's byte array.
.PP
See also setBuffer().
.SH "void QBuffer::close () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected. Closes an open buffer.
.PP
See also open().
.PP
Reimplemented from QIODevice.
.SH "void QBuffer::flush () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected. The flush function does nothing for a QBuffer.
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::getch () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "bool QBuffer::open ( int m ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected. Opens the buffer in the mode \fIm.\fR Returns TRUE if successful, otherwise FALSE. The buffer must be opened before use.
.PP
The mode parameter \fIm\fR must be a combination of the following flags.
.TP
\fCIO_ReadOnly\fR opens a buffer in read-only mode.
.TP
\fCIO_WriteOnly\fR opens a buffer in write-only mode.
.TP
\fCIO_ReadWrite\fR opens a buffer in read/write mode.
.TP
\fCIO_Append\fR sets the buffer index to the end of the buffer.
.TP
\fCIO_Truncate\fR truncates the buffer.
.PP
See also close() and isOpen().
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::putch ( int ch ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected. Writes the character \fIch\fR into the buffer, overwriting the character at the current index, extending the buffer if necessary.
.PP
Returns \fIch,\fR or -1 if some error occurred.
.PP
See also getch() and ungetch().
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::readBlock ( char * p, uint len ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::readLine ( char * p, uint maxlen ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "bool QBuffer::setBuffer ( QByteArray buf )"
Replaces the buffer's contents with \fIbuf.\fR
.PP
This may not be done when isOpen() is TRUE.
.PP
Note that if you open the buffer in write mode (\fCIO_WriteOnly\fR or IO_ReadWrite) and write something into the buffer, \fIbuf\fR is also modified because QByteArray is an explicitly shared class.
.PP
See also buffer(), open() and close().
.SH "uint QBuffer::size () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::ungetch ( int ch ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QIODevice.
.SH "int QBuffer::writeBlock ( const char * p, uint len ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Writes \fIlen\fR bytes from \fIp\fR into the buffer at the current index, overwriting any characters there and extending the buffer if necessary. Returns the number of bytes actually written.
.PP
Returns -1 if a serious error occurred.
.PP
See also readBlock().
.PP
Reimplemented from QIODevice.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qbuffer.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qbuffer.3qt) and the Qt
version (2.3.2).
