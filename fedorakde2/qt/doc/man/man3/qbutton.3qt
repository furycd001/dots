'\" t
.TH QButton 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QButton \- The abstract base class of button widgets, providing functionality common to buttons
.br
.PP
\fC#include <qbutton.h>\fR
.PP
Inherits QWidget.
.PP
Inherited by QCheckBox, QPushButton, QRadioButton and QToolButton.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQButton\fR ( QWidget * " "parent" "=0, const char * " "name" "=0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fB~QButton\fR () "
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetText\fR ( const QString & ) "
.br
.ti -1c
.BI "const QPixmap* \fBpixmap\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetPixmap\fR ( const QPixmap & ) "
.br
.ti -1c
.BI "int \fBaccel\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetAccel\fR ( int ) "
.br
.ti -1c
.BI "bool \fBisToggleButton\fR () const"
.br
.ti -1c
.BI "enum \fBToggleType\fR { SingleShot, Toggle, Tristate }"
.br
.ti -1c
.BI "ToggleType \fBtoggleType\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetDown\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBisDown\fR () const"
.br
.ti -1c
.BI "bool \fBisOn\fR () const"
.br
.ti -1c
.BI "enum \fBToggleState\fR { Off, NoChange, On }"
.br
.ti -1c
.BI "ToggleState \fBstate\fR () const"
.br
.ti -1c
.BI "bool autoResize () const \fI(obsolete)\fR"
.br
.ti -1c
.BI "virtual void setAutoResize ( bool ) \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBautoRepeat\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetAutoRepeat\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBisExclusiveToggle\fR () const"
.br
.ti -1c
.BI "QButtonGroup* \fBgroup\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void \fBanimateClick\fR () "
.br
.ti -1c
.BI "void \fBtoggle\fR () "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBpressed\fR () "
.br
.ti -1c
.BI "void \fBreleased\fR () "
.br
.ti -1c
.BI "void \fBclicked\fR () "
.br
.ti -1c
.BI "void \fBtoggled\fR ( bool ) "
.br
.ti -1c
.BI "void \fBstateChanged\fR ( int ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBsetToggleButton\fR ( bool ) "
.br
.ti -1c
.BI "virtual void \fBsetToggleType\fR ( ToggleType ) "
.br
.ti -1c
.BI "void \fBsetOn\fR ( bool ) "
.br
.ti -1c
.BI "virtual void \fBsetState\fR ( ToggleState ) "
.br
.ti -1c
.BI "virtual bool \fBhitButton\fR ( const QPoint & pos ) const"
.br
.ti -1c
.BI "virtual void \fBdrawButton\fR ( QPainter * ) "
.br
.ti -1c
.BI "virtual void \fBdrawButtonLabel\fR ( QPainter * ) "
.br
.ti -1c
.BI "virtual void \fBpaintEvent\fR ( QPaintEvent * ) "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
QString	text	text	setText
QPixmap	pixmap	pixmap	setPixmap
int	accel	accel	setAccel
bool	toggleButton	isToggleButton
ToggleType	toggleType	toggleType
bool	down	isDown	setDown	DESIGNABLE false
bool	on	isOn
ToggleState	toggleState	state
bool	autoResize	autoResize	setAutoResize
bool	autoRepeat	autoRepeat	setAutoRepeat
bool	exclusiveToggle	isExclusiveToggle
.TE
.fi

.SH DESCRIPTION
The QButton class is the abstract base class of button widgets, providing functionality common to buttons.
.PP
The QButton class implements an abstract button, and lets subclasses specify how to reply to user actions and how to draw the button.
.PP
QButton provides both push and toggle buttons. The QRadioButton and QCheckBox classes provide only toggle buttons, QPushButton and QToolButton provide both toggle and push buttons.
.PP
Any button can have either a text or pixmap label. setText() sets the button to be a text button and setPixmap() sets it to be a pixmap button. The text/pixmap is manipulated as necessary to create "disabled" appearance when the button is disabled.
.PP
QButton provides most of the states used for buttons:
.TP
isDown() determines whether the button is \fIpressed\fR down.
.TP
isOn() determines whether the button is \fIon.\fR Only toggle buttons can be switched on and off (see below).
.TP
isEnabled() determines whether the button can be pressed by the user.
.TP
setAutoRepeat() determines whether the button will auto-repeat if the user holds it down.
.TP
setToggleButton() determines whether the button is a toggle button or not.
.PP
The difference between isDown() and isOn() is as follows: When the user clicks a toggle button to toggle it on, the button is first \fIpressed,\fR then released into \fIon\fR state. When the user clicks it again (to toggle it off) the button moves first to the \fIpressed\fR state, then to the \fIoff\fR state (isOn() and isDown() are both FALSE).
.PP
Default buttons (as used in many dialogs) are provided by QPushButton::setDefault() and QPushButton::setAutoDefault().
.PP
QButton provides four signals:
.TP
pressed() is emitted when the left mouse button is pressed while the mouse cursor is inside the button.
.TP
released() is emitted when the left mouse button is released.
.TP
clicked() is emitted when the button is first pressed then released, or when the accelerator key is typed, or when animateClick() is called.
.TP
toggled(bool) is emitted when the state of a toggle button changes.
.TP
stateChanged(int) is emitted when the state of a tristate toggle button changes.
.PP
If the button is a text button with "&" in its text, QButton creates an automatic accelerator key. This code creates a push button labelled "Rock & Roll" (where the c is underscored). The button gets an automatic accelerator key, Alt-C:
.PP
.nf
.br
    QPushButton *p = new QPushButton( "Ro&ck && Roll", this );
.fi
.PP
In this example, when the user presses Alt-C the button will call animateClick().
.PP
You can also set a custom accelerator using the setAccel() function. This is useful mostly for pixmap buttons since they have no automatic accelerator.
.PP
.nf
.br
    QPushButton *p;
.br
    p->setPixmap( QPixmap("print.png") );
.br
    p->setAccel( ALT+Key_F7 );
.fi
.PP
All of the buttons provided by Qt (QPushButton, QToolButton, QCheckBox and QRadioButton) can display both text and pixmaps.
.PP
To subclass QButton, you have to reimplement at least drawButton() (to draw the button's outskirts) and drawButtonLabel() (to draw its text or pixmap). It is generally advisable to reimplement sizeHint() as well, and sometimes hitButton() (to determine whether a button press is within the button).
.PP
To reduce flickering the QButton::paintEvent() sets up a pixmap that the drawButton() function draws in. You should not reimplement paintEvent() for a subclass of QButton unless you want to take over all drawing.
.PP
See also QButtonGroup.
.PP
Examples:
.(l
scrollview/scrollview.cpp
.)l
.SS "Member Type Documentation"
.SH "QButton::ToggleState"
This enum defines the state of a toggle button at any moment. The possible values are: 
.TP
\fCOff\fR - the button is in the "off" state
.TP
\fCNoChange\fR - the button is in the default/unchanged state
.TP
\fCOn\fR - the button is in the "on" state
.IP
.SH "QButton::ToggleType"
This enum type defines what a button can do in response to a mouse/keyboard press: 
.TP
\fCSingleShot\fR - pressing the button causes an action, then the button returns to the unpressed state.
.TP
\fCToggle\fR - pressing the button toggles it between an \fCOn\fR and and \fCOff\fR state.
.TP
\fCTristate\fR - pressing the button cycles between the three states \fCOn, Off\fR and \fCNoChange\fR
.IP
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QButton::QButton ( QWidget * parent=0, const char * name=0, WFlags f=0 )"
Constructs a standard button with a parent widget and a name.
.PP
If \fIparent\fR is a QButtonGroup, this constructor calls QButtonGroup::insert().
.SH "QButton::~QButton ()"
Destructs the button, deleting all its child widgets.
.SH "int QButton::accel () const"
Returns the accelerator key currently set for the button, or 0 if no accelerator key has been set.
.PP
See also setAccel().
.SH "void QButton::animateClick () \fC[slot]\fR"
Performs an animated click: The button is pressed and a short while later released.
.PP
pressed(), released(), clicked(), toggled(), and stateChanged() signals are emitted as appropriate.
.PP
This function does nothing if the button is disabled.
.PP
See also setAccel().
.SH "bool QButton::autoRepeat () const"
Returns TRUE if the button is auto-repeating, else FALSE.
.PP
The default is FALSE.
.PP
See also setAutoRepeat().
.SH "bool QButton::autoResize () const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Strange pre-layout stuff.
.PP
Returns TRUE if auto-resizing is enabled, or FALSE if auto-resizing is disabled.
.PP
Auto-resizing is disabled by default.
.PP
See also setAutoResize().
.SH "void QButton::clicked () \fC[signal]\fR"
This signal is emitted when the button is activated, i.e. first pressed down and then released when the mouse cursor is inside the button, or when the accelerator key is typed, or when animateClick() is called.
.PP
See also pressed(), released() and toggled().
.SH "void QButton::drawButton ( QPainter * ) \fC[virtual protected]\fR"
Draws the button. The default implementation does nothing.
.PP
This virtual function is reimplemented by subclasses to draw real buttons. At some point in time, these reimplementations are supposed to call drawButtonLabel().
.PP
See also drawButtonLabel() and paintEvent().
.PP
Reimplemented in QRadioButton, QCheckBox, QToolButton and QPushButton.
.SH "void QButton::drawButtonLabel ( QPainter * ) \fC[virtual protected]\fR"
Draws the button text or pixmap.
.PP
This virtual function is reimplemented by subclasses to draw real buttons. It's invoked by drawButton().
.PP
See also drawButton() and paintEvent().
.PP
Reimplemented in QPushButton, QToolButton, QRadioButton and QCheckBox.
.SH "void QButton::enabledChange ( bool e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::focusInEvent ( QFocusEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "bool QButton::focusNextPrevChild ( bool next ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::focusOutEvent ( QFocusEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QButtonGroup * QButton::group () const"
Returns a pointer to the group of which this button is a member.
.PP
If the button is not a member of any QButtonGroup, this function returns 0.
.PP
See also setGroup() and QButtonGroup.
.SH "bool QButton::hitButton ( const QPoint & pos ) const \fC[virtual protected]\fR"
Returns TRUE if \fIpos\fR is inside the clickable button rectangle, or FALSE if it is outside.
.PP
Per default, the clickable area is the entire widget. Subclasses may reimplement it, though.
.PP
Reimplemented in QRadioButton.
.SH "bool QButton::isDown () const"
Returns TRUE if the button pressed down, or FALSE if it is standing up.
.PP
See also setDown().
.SH "bool QButton::isExclusiveToggle () const"
Returns TRUE if this button behaves exclusively inside a QButtonGroup. In that case, this button can only be toggled off by another button being toggled on.
.SH "bool QButton::isOn () const"
Returns TRUE if this toggle button is switched on, or FALSE if it is switched off.
.PP
See also setOn() and isToggleButton().
.PP
Examples:
.(l
qmag/qmag.cpp
.)l
.SH "bool QButton::isToggleButton () const"
Returns TRUE if the button is a toggle button.
.PP
See also setToggleButton().
.SH "void QButton::keyPressEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::keyReleaseEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::mouseMoveEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::mousePressEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::mouseReleaseEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::paintEvent ( QPaintEvent * event ) \fC[virtual protected]\fR"
Handles paint events for buttons. Small and typically complex buttons (less than 300x100 pixels) are painted double-buffered to reduce flicker. The actually drawing is done in the virtual functions drawButton() and drawButtonLabel().
.PP
See also drawButton() and drawButtonLabel().
.PP
Reimplemented from QWidget.
.SH "const QPixmap * QButton::pixmap () const"
Returns the button pixmap, or 0 if the button has no pixmap.
.SH "void QButton::pressed () \fC[signal]\fR"
This signal is emitted when the button is pressed down.
.PP
See also released() and clicked().
.SH "void QButton::released () \fC[signal]\fR"
This signal is emitted when the button is released.
.PP
See also pressed(), clicked() and toggled().
.SH "void QButton::setAccel ( int key ) \fC[virtual]\fR"
Specifies an accelerator \fIkey\fR for the button, or removes the accelerator if \fIkey\fR is 0.
.PP
Setting a button text containing a shortcut character (for example the 'x' in E&xit) automatically defines an ALT+letter accelerator for the button. You only need to call this function in order to specify a custom accelerator.
.PP
Example:
.PP
.nf
.br
    QPushButton *b1 = new QPushButton;
.br
    b1->setText( "&OK" );               // sets accel ALT+'O'
.br
.br
    QPushButton *b2 = new QPushButton;
.br
    b2->setPixmap( printIcon );         // pixmap instead of text
.br
    b2->setAccel( CTRL+'P' );           // custom accel
.fi
.PP
See also accel(), setText() and QAccel.
.SH "void QButton::setAutoRepeat ( bool enable ) \fC[virtual]\fR"
Turns on auto-repeat for the button if \fIenable\fR is TRUE, or turns it off if \fIenable\fR is FALSE.
.PP
When auto-repeat is enabled, the clicked() signal is emitted at regular intervals while the buttons is down.
.PP
setAutoRepeat() has no effect for toggle buttons.
.PP
See also isDown(), autoRepeat() and clicked().
.SH "void QButton::setAutoResize ( bool enable ) \fC[virtual]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Strange pre-layout stuff.
.PP
Enables auto-resizing if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
When auto-resizing is enabled, the button will resize itself whenever the contents change.
.PP
See also autoResize() and adjustSize().
.SH "void QButton::setDown ( bool enable ) \fC[virtual]\fR"
Sets the state of the button to pressed down if \fIenable\fR is TRUE or to standing up if \fIenable\fR is FALSE.
.PP
If the button is a toggle button, it is \fInot\fR toggled. Call toggle() as well if you need to do that. The pressed() and released() signals are not emitted by this function.
.PP
This method is provided in case you need to reimplement the mouse event handlers.
.PP
See also isDown(), setOn(), toggle() and toggled().
.SH "void QButton::setOn ( bool enable ) \fC[protected]\fR"
Switches a toggle button on if \fIenable\fR is TRUE or off if \fIenable\fR is FALSE. This function should be called only for toggle buttons.
.PP
See also isOn() and isToggleButton().
.SH "void QButton::setPixmap ( const QPixmap & pixmap ) \fC[virtual]\fR"
Sets the button to display \fIpixmap\fR
.PP
If \fIpixmap\fR is monochrome (i.e. it is a QBitmap or its depth is 1) and it does not have a mask, this function sets the pixmap to be its own mask. The purpose of this is to draw transparent bitmaps, which is important for e.g. toggle buttons.
.PP
See also pixmap(), setText(), setAccel() and QPixmap::mask().
.SH "void QButton::setState ( ToggleState t ) \fC[protected]\fR"
This protected function sets the button state into state t but does \fInot\fR cause repainting.
.PP
See also setToggleType().
.SH "void QButton::setText ( const QString & text ) \fC[virtual]\fR"
Sets the button to display \fItext.\fR
.PP
If the text contains an ampersand, QButton creates an automatic accelerator for it, such as Alt-c for "&Cancel".
.PP
See also text(), setPixmap(), setAccel() and QPixmap::mask().
.PP
Examples:
.(l
xform/xform.cpp layout/layout.cpp qmag/qmag.cpp
.)l
.SH "void QButton::setToggleButton ( bool enable ) \fC[protected]\fR"
Makes the button a toggle button if \fIenable\fR is TRUE, or a normal button if \fIenable\fR is FALSE.
.PP
Note that this function is protected. It is called from subclasses to enable the toggle functionality. QCheckBox and QRadioButton are toggle buttons. QPushButton is initially not a toggle button, but QPushButton::setToggleButton() can be called to create toggle buttons.
.PP
See also isToggleButton().
.SH "void QButton::setToggleType ( ToggleType type ) \fC[protected]\fR"
Sets the type of toggling behavior. The default is \fISingleShot.\fR
.PP
Subclasses use this, and present it with a more comfortable interface.
.SH "QButton::ToggleState QButton::state() const"
Returns the state of the button.
.PP
See also ToggleState, ToggleType and setState().
.SH "void QButton::stateChanged ( int state ) \fC[signal]\fR"
This signal is emitted whenever a toggle button changes status. \fIstate\fR is 2 if the button is on, 1 if it is in the" no change" state or 0 if the button is off.
.PP
This may be the result of a user action, toggle() slot activation, setState(), or because setOn() was called.
.PP
See also clicked().
.SH "QString QButton::text () const"
Returns the button text, or null string if the button has no text.
.PP
See also setText().
.SH "void QButton::toggle () \fC[slot]\fR"
if this is a toggle button, toggles it.
.SH "QButton::ToggleType QButton::toggleType() const"
Returns the current toggle type.
.PP
See also setToggleType().
.SH "void QButton::toggled ( bool on ) \fC[signal]\fR"
This signal is emitted whenever a toggle button changes status. \fIon\fR is TRUE if the button is on, or FALSE if the button is off.
.PP
This may be the result of a user action, toggle() slot activation, or because setOn() was called.
.PP
See also  clicked().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qbutton.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qbutton.3qt) and the Qt
version (2.3.2).
