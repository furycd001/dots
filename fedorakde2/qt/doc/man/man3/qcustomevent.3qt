'\" t
.TH QCustomEvent 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QCustomEvent \- Support for custom events
.br
.PP
\fC#include <qevent.h>\fR
.PP
Inherits QEvent.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQCustomEvent\fR ( int type ) "
.br
.ti -1c
.BI "\fBQCustomEvent\fR ( Type " "type" ", void * data ) "
.br
.ti -1c
.BI "void* \fBdata\fR () const"
.br
.ti -1c
.BI "void \fBsetData\fR ( void * data ) "
.br
.in -1c
.SH DESCRIPTION
The QCustomEvent class provides support for custom events.
.PP
QCustomEvent is a generic event class for user-defined events. User defined events can be sent to widgets or other QObject instances using QApplication::postEvent() or QApplication::sendEvent(). Subclasses of QWidget can easily receive custom events by implementing the QWidget::customEvent() event handler function.
.PP
QCustomEvent objects should be created with a type id that uniquely identifies the event type. To avoid clashes with the Qt-defined events types, the value should be at least as large as the value of the "User" entry in the QEvent::Type enum.
.PP
QCustomEvent contains a generic void* data member that may be used for transferring event-specific data to the receiver. Note that since events are normally delivered asynchronously, the data pointer, if used, must remain valid until the event has been received and processed.
.PP
QCustomEvent can be used as-is for simple user-defined event types, but normally you will want to make a subclass of it for your event types. In a subclass, you can add data members that are suitable for your event type.
.PP
Example:
.PP
.nf
.br
  class ColorChangeEvent : public QCustomEvent
.br
  {
.br
  public:
.br
    ColorChangeEvent( QColor color )
.br
        : QCustomEvent( 346798 ), c( color ) {};
.br
    QColor color() const { return c; };
.br
  private:
.br
    QColor c;
.br
  };
.br
.br
  // To send an event of this custom event type:
.br
.br
  ColorChangeEvent* ce = new ColorChangeEvent( blue );
.br
  QApplication::postEvent( receiver, ce );    // Qt will delete it when done
.br
.br
  // To receive an event of this custom event type:
.br
.br
  void MyWidget::customEvent( QCustomEvent * e )
.br
  {
.br
    if ( e->type() == 346798 ) {              // It must be a ColorChangeEvent
.br
      ColorChangeEvent* ce = (ColorChangeEvent*)e;
.br
      newColor = ce->color();
.br
    }
.br
  }
.fi
.PP
See also QWidget::customEvent() and QApplication::notify().
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QCustomEvent::QCustomEvent ( Type type, void * data )"
Constructs a custom event object with the event type \fItype\fR and a pointer to \fIdata.\fR (Note that any int value may safely be cast to QEvent::Type).
.SH "QCustomEvent::QCustomEvent ( int type )"
Constructs a custom event object with event type \fItype.\fR The value of \fItype\fR must be at least as large as QEvent::User. The data pointer is set to 0.
.SH "void * QCustomEvent::data () const"
Returns a pointer to the generic event data.
.PP
See also setData().
.SH "void QCustomEvent::setData ( void * data )"
Sets the generic data pointer to \fIdata.\fR
.PP
See also  data().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qcustomevent.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qcustomevent.3qt) and the Qt
version (2.3.2).
