'\" t
.TH QDataSource 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDataSource \- Asynchronous producer of data
.br
.PP
\fC#include <qasyncio.h>\fR
.PP
Inherits QAsyncIO.
.PP
Inherited by QIODeviceSource.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual int \fBreadyToSend\fR () "
.br
.ti -1c
.BI "virtual void \fBsendTo\fR ( QDataSink *, int count ) "
.br
.ti -1c
.BI "void \fBmaybeReady\fR () "
.br
.ti -1c
.BI "virtual bool \fBrewindable\fR () const"
.br
.ti -1c
.BI "virtual void \fBenableRewind\fR ( bool ) "
.br
.ti -1c
.BI "virtual void \fBrewind\fR () "
.br
.in -1c
.SH DESCRIPTION
The QDataSource class is an asynchronous producer of data.
.PP
A data source is an object which provides data from some source in an asynchronous manner. This means that at some time not determined by the data source, blocks of data will be taken from it for processing. The data source is able to limit the maximum size of such blocks which it is currently able to provide.
.PP
See also QAsyncIO, QDataSink and QDataPump.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "void QDataSource::enableRewind ( bool ) \fC[virtual]\fR"
If this function is called with \fIon\fR set to TRUE, and rewindable() is TRUE, then the data source must take measures to allow the rewind() function to subsequently operate as described. If rewindable() is FALSE, the function should call QDataSource::enableRewind(), which aborts with a qFatal() error.
.PP
For example, a network connection may choose to utilize a disk cache of input only if rewinding is enabled before the first buffer-full of data is discarded, returning FALSE in rewindable() if that first buffer is discarded.
.PP
Reimplemented in QIODeviceSource.
.SH "void QDataSource::maybeReady ()"
This should be called whenever readyToSend() might have become non-zero. It is merely calls QAsyncIO::ready() if readyToSend() is non-zero.
.SH "int QDataSource::readyToSend () \fC[virtual]\fR"
The data source should return a value indicating how much data it is ready to provide. This may be 0. If the data source knows it will never be able to provide any more data (until after a rewind()), it may return -1.
.PP
Reimplemented in QIODeviceSource.
.SH "void QDataSource::rewind () \fC[virtual]\fR"
This function rewinds the data source. This may only be called if enableRewind(TRUE) has been previously called.
.PP
Reimplemented in QIODeviceSource.
.SH "bool QDataSource::rewindable () const \fC[virtual]\fR"
This function should return TRUE if the data source can be rewound.
.PP
The default returns FALSE.
.PP
Reimplemented in QIODeviceSource.
.SH "void QDataSource::sendTo ( QDataSink *, int count ) \fC[virtual]\fR"
This function is called to extract data from the source, by sending it to the given data sink. The count will be no more than the amount indicated by the most recent call to readyToSend(). The source must use all the provided data, and the sink will be prepared to accept at least this much data.
.PP
Reimplemented in QIODeviceSource.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdatasource.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdatasource.3qt) and the Qt
version (2.3.2).
