'\" t
.TH QFocusData 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFocusData \- Maintains the list of widgets which can take focus
.br
.PP
\fC#include <qfocusdata.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QWidget* \fBfocusWidget\fR () const"
.br
.ti -1c
.BI "QWidget* \fBhome\fR () "
.br
.ti -1c
.BI "QWidget* \fBnext\fR () "
.br
.ti -1c
.BI "QWidget* \fBprev\fR () "
.br
.ti -1c
.BI "int \fBcount\fR () const"
.br
.in -1c
.SH DESCRIPTION
Maintains the list of widgets which can take focus.
.PP
This read-only list always contains at least one widget (the top-level widget, actually). It provides a simple cursor, which can be reset to the current focus widget using home(), or moved to its neighboring widgets using next() and prev(), and a count() of widgets in the list.
.PP
Note that some widgets in the list may not accept focus. Widgets are added to the list as necessary, but not removed from it. This lets widgets change focus policy dynamically without disrupting the focus chain the user sees: When a widget disables and re-enables tab focus, its position in the focus chain does not change.
.PP
When reimplementing QWidget::focusNextPrevChild() to provide special focus flow, you will usually call QWidget::focusData() to retrieve the focus data stored at the top-level widget - the focus data for that hierarchy of widgets.
.PP
The cursor may change at any time; this class is not thread-safe.
.PP
See also QWidget::focusNextPrevChild(), QWidget::setTabOrder() and QWidget::setFocusPolicy().
.SH MEMBER FUNCTION DOCUMENTATION
.SH "int QFocusData::count () const"
Returns a count of the number of widgets in the hierarchy which accept focus.
.SH "QWidget* QFocusData::focusWidget () const"
Returns the widgets in the hierarchy which currently has focus.
.SH "QWidget* QFocusData::home ()"
Moves the cursor to the focusWidget() and returns that widget. You must call this before next() or prev() to iterate meaningfully.
.SH "QWidget* QFocusData::next ()"
Moves the cursor to the right. Note that the focus widgets are a \fIloop\fR of widgets. If you keep calling next(), it will loop, without ever returning 0.
.SH "QWidget* QFocusData::prev ()"
Moves the cursor to the left.  Note that the focus widgets
are a \fIloop\fR of widgets.  If you keep calling prev(), it will
loop, without ever returning 0.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qfocusdata.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qfocusdata.3qt) and the Qt
version (2.3.2).
