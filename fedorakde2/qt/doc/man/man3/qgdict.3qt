'\" t
.TH QGDict 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QGDict \- Internal class for implementing
.br
.PP
\fC#include <qgdict.h>\fR
.PP
Inherits QCollection.
.PP
Inherited by QAsciiDict, QDict, QIntDict and QPtrDict.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual uint \fBcount\fR () const (internal)"
.br
.ti -1c
.BI "uint \fBsize\fR () const (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBlook_string\fR ( const QString & " "key" ", QCollection::Item, int ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBlook_ascii\fR ( const char * " "key" ", QCollection::Item, int ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBlook_int\fR ( long " "key" ", QCollection::Item, int ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBlook_ptr\fR ( void * " "key" ", QCollection::Item, int ) (internal)"
.br
.ti -1c
.BI "QDataStream& \fBread\fR ( QDataStream & ) (internal)"
.br
.ti -1c
.BI "QDataStream& \fBwrite\fR ( QDataStream & ) const (internal)"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "enum \fBKeyType\fR { StringKey, AsciiKey, IntKey, PtrKey }"
.br
.ti -1c
.BI "\fBQGDict\fR ( uint " "len" ", KeyType " "kt" ", bool " "cs" ", bool ck ) (internal)"
.br
.ti -1c
.BI "\fBQGDict\fR ( const QGDict & ) (internal)"
.br
.ti -1c
.BI "\fB~QGDict\fR () (internal)"
.br
.ti -1c
.BI "QGDict& \fBoperator=\fR ( const QGDict & ) (internal)"
.br
.ti -1c
.BI "bool \fBremove_string\fR ( const QString & " "key" ", QCollection::Item " "item" "=0 ) (internal)"
.br
.ti -1c
.BI "bool \fBremove_ascii\fR ( const char * " "key" ", QCollection::Item " "item" "=0 ) (internal)"
.br
.ti -1c
.BI "bool \fBremove_int\fR ( long " "key" ", QCollection::Item " "item" "=0 ) (internal)"
.br
.ti -1c
.BI "bool \fBremove_ptr\fR ( void * " "key" ", QCollection::Item " "item" "=0 ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBtake_string\fR ( const QString & key ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBtake_ascii\fR ( const char * key ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBtake_int\fR ( long key ) (internal)"
.br
.ti -1c
.BI "QCollection::Item \fBtake_ptr\fR ( void * key ) (internal)"
.br
.ti -1c
.BI "virtual void \fBclear\fR () (internal)"
.br
.ti -1c
.BI "void \fBresize\fR ( uint ) (internal)"
.br
.ti -1c
.BI "int \fBhashKeyString\fR ( const QString & ) (internal)"
.br
.ti -1c
.BI "int \fBhashKeyAscii\fR ( const char * ) (internal)"
.br
.ti -1c
.BI "void \fBstatistics\fR () const (internal)"
.br
.ti -1c
.BI "virtual QDataStream& \fBread\fR ( QDataStream &, QCollection::Item & ) "
.br
.ti -1c
.BI "virtual QDataStream& \fBwrite\fR ( QDataStream &, QCollection::Item ) const"
.br
.in -1c
.SH DESCRIPTION
The QGDict class is an internal class for implementing QDict template classes.
.PP
QGDict is a strictly internal class that acts as a base class for the collection classes QDict and QIntDict.
.PP
QGDict has some virtual functions that can be reimplemented to customize the subclasses.
.TP
read() reads a collection/dictionary item from a QDataStream.
.TP
write() writes a collection/dictionary item to a QDataStream. Normally, you do not have to reimplement any of these functions.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDataStream& QGDict::read ( QDataStream & s, QCollection::Item & item ) \fC[virtual protected]\fR"
Reads a collection/dictionary item from the stream \fIs\fR and returns a reference to the stream.
.PP
The default implementation sets \fIitem\fR to 0.
.PP
See also write().
.SH "QDataStream& QGDict::write ( QDataStream & s, QCollection::Item ) const \fC[virtual protected]\fR"
Writes a collection/dictionary item to the stream \fIs\fR and returns a reference to the stream.
.PP
See also read().
.SH "QGDict::QGDict ( const QGDict & dict ) \fC[protected]\fR"
For internal use only.
.SH "QGDict::QGDict ( uint len, KeyType kt, bool caseSensitive, bool copyKeys ) \fC[protected]\fR"
For internal use only.
.SH "QGDict::~QGDict () \fC[protected]\fR"
For internal use only.
.SH "void QGDict::clear () \fC[virtual protected]\fR"
For internal use only.
.PP
Reimplemented from QCollection.
.SH "uint QGDict::count () const \fC[virtual]\fR"
For internal use only.
.PP
Reimplemented from QCollection.
.SH "int QGDict::hashKeyAscii ( const char * key ) \fC[protected]\fR"
For internal use only.
.SH "int QGDict::hashKeyString ( const QString & key ) \fC[protected]\fR"
For internal use only.
.SH "QCollection::Item QGDict::look_ascii( const char * key, QCollection::Item d, int op )"
For internal use only.
.SH "QCollection::Item QGDict::look_int( long key, QCollection::Item d, int op )"
For internal use only.
.SH "QCollection::Item QGDict::look_ptr( void * key, QCollection::Item d, int op )"
For internal use only.
.SH "QCollection::Item QGDict::look_string( const QString & key, QCollection::Item d, int op )"
For internal use only.
.SH "QGDict & QGDict::operator= ( const QGDict & dict ) \fC[protected]\fR"
For internal use only.
.SH "QDataStream & QGDict::read ( QDataStream & s )"
For internal use only.
.SH "bool QGDict::remove_ascii ( const char * key, QCollection::Item item=0 ) \fC[protected]\fR"
For internal use only.
.SH "bool QGDict::remove_int ( long key, QCollection::Item item=0 ) \fC[protected]\fR"
For internal use only.
.SH "bool QGDict::remove_ptr ( void * key, QCollection::Item item=0 ) \fC[protected]\fR"
For internal use only.
.SH "bool QGDict::remove_string ( const QString & key, QCollection::Item item=0 ) \fC[protected]\fR"
For internal use only.
.SH "void QGDict::resize ( uint newsize ) \fC[protected]\fR"
For internal use only.
.SH "uint QGDict::size () const"
For internal use only.
.SH "void QGDict::statistics () const \fC[protected]\fR"
For internal use only.
.SH "QCollection::Item QGDict::take_ascii( const char * key ) \fC[protected]\fR"
For internal use only.
.SH "QCollection::Item QGDict::take_int( long key ) \fC[protected]\fR"
For internal use only.
.SH "QCollection::Item QGDict::take_ptr( void * key ) \fC[protected]\fR"
For internal use only.
.SH "QCollection::Item QGDict::take_string( const QString & key ) \fC[protected]\fR"
For internal use only.
.SH "QDataStream& QGDict::write ( QDataStream & s ) const"
For internal use only.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qgdict.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qgdict.3qt) and the Qt
version (2.3.2).
