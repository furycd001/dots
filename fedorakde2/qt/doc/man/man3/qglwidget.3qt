'\" t
.TH QGLWidget 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QGLWidget \- Widget for rendering OpenGL graphics
.br
.PP
\fC#include <qgl.h>\fR
.PP
Inherits QGL and QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQGLWidget\fR ( QWidget * " "parent" "=0, const char * " "name" "=0, const QGLWidget * " "shareWidget" " = 0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fBQGLWidget\fR ( const QGLFormat & " "format" ", QWidget * " "parent" "=0, const char * " "name" "=0, const QGLWidget * " "shareWidget" " = 0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fB~QGLWidget\fR () "
.br
.ti -1c
.BI "void \fBqglColor\fR ( const QColor & c ) const"
.br
.ti -1c
.BI "void \fBqglClearColor\fR ( const QColor & c ) const"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "bool \fBisSharing\fR () const"
.br
.ti -1c
.BI "virtual void \fBmakeCurrent\fR () "
.br
.ti -1c
.BI "bool \fBdoubleBuffer\fR () const"
.br
.ti -1c
.BI "virtual void \fBswapBuffers\fR () "
.br
.ti -1c
.BI "QGLFormat \fBformat\fR () const"
.br
.ti -1c
.BI "const QGLContext* \fBcontext\fR () const"
.br
.ti -1c
.BI "virtual QPixmap \fBrenderPixmap\fR ( int " "w" " = 0, int " "h" " = 0, bool " "useContext" " = FALSE ) "
.br
.ti -1c
.BI "virtual void \fBmakeOverlayCurrent\fR () "
.br
.ti -1c
.BI "const QGLContext* \fBoverlayContext\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBupdateGL\fR () "
.br
.ti -1c
.BI "virtual void \fBupdateOverlayGL\fR () "
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QImage \fBconvertToGLFormat\fR ( const QImage & img ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBinitializeGL\fR () "
.br
.ti -1c
.BI "virtual void \fBresizeGL\fR ( int " "w" ", int h ) "
.br
.ti -1c
.BI "virtual void \fBpaintGL\fR () "
.br
.ti -1c
.BI "virtual void \fBinitializeOverlayGL\fR () "
.br
.ti -1c
.BI "virtual void \fBresizeOverlayGL\fR ( int " "w" ", int h ) "
.br
.ti -1c
.BI "virtual void \fBpaintOverlayGL\fR () "
.br
.ti -1c
.BI "void \fBsetAutoBufferSwap\fR ( bool on ) "
.br
.ti -1c
.BI "bool \fBautoBufferSwap\fR () const"
.br
.ti -1c
.BI "virtual void \fBpaintEvent\fR ( QPaintEvent * ) "
.br
.ti -1c
.BI "virtual void \fBresizeEvent\fR ( QResizeEvent * ) "
.br
.ti -1c
.BI "virtual void \fBglInit\fR () "
.br
.ti -1c
.BI "virtual void \fBglDraw\fR () "
.br
.in -1c
.SH DESCRIPTION
The QGLWidget class is a widget for rendering OpenGL graphics.
.PP
QGLWidget provides functionality for displaying OpenGL graphics integrated in a Qt application. It is very simple to use: you inherit from it and use the subclass like any other QWidget, only that instead of drawing the widget's contents using QPainter & al., you use the standard OpenGL rendering commands.
.PP
QGLWidget provides three convenient virtual functions that you can reimplement in your subclass to perform the typical OpenGL tasks:
.TP
paintGL() - Render the OpenGL scene. Gets called whenever the widget needs to be updated.
.TP
resizeGL() - Set up OpenGL viewport, projection etc. Gets called whenever the the widget has been resized (and also when it shown for the first time, since all newly created widgets get a resize event automatically).
.TP
initializeGL() - Set up the OpenGL rendering context, define display lists etc. Gets called once before the first time resizeGL() or paintGL() is called.
.PP
Here is a rough outline of how your QGLWidget subclass may look:
.PP
.nf
.br
    class MyGLDrawer : public QGLWidget
.br
    {
.br
        Q_OBJECT        // must include this if you use Qt signals/slots
.br
.br
    public:
.br
        MyGLDrawer( QWidget *parent, const char *name )
.br
            : QGLWidget(parent,name) {}
.br
.br
    protected:
.br
.br
        void initializeGL()
.br
        {
.br
          // Set up the rendering context, define display lists etc.:
.br
          ...
.br
          glClearColor( 0.0, 0.0, 0.0, 0.0 );
.br
          glEnable(GL_DEPTH_TEST);
.br
          ...
.br
        }
.br
.br
        void resizeGL( int w, int h )
.br
        {
.br
          // setup viewport, projection etc.:
.br
          glViewport( 0, 0, (GLint)w, (GLint)h );
.br
          ...
.br
          glFrustum( ... );
.br
          ...
.br
        }
.br
.br
        void paintGL()
.br
        {
.br
          // draw the scene:
.br
          ...
.br
          glRotatef( ... );
.br
          glMaterialfv( ... );
.br
          glBegin( GL_QUADS );
.br
          glVertex3f( ... );
.br
          glVertex3f( ... );
.br
          ...
.br
          glEnd();
.br
          ...
.br
        }
.br
.br
    };
.fi
.PP
If you need to trigger a repaint from other places than paintGL() (a typical example is when using timers to animate scenes), you should call the widget's updateGL() function.
.PP
When paintGL(), resizeGL() or initializeGL() is called, your widget's OpenGL rendering context has been made current. If you need to call the standard OpenGL API functions from other places (e.g. in your widget's constructor), you must call makeCurrent() first.
.PP
QGLWidget provides advanced functions for requesting a new display format, and you can even set a new rendering context.
.PP
You can achieve sharing of OpenGL display lists between QGLWidgets, see the documentation of the QGLWidget constructors for details.
.PP
\fBAbout Overlays:\fR The QGLWidget can create a GL overlay context in addition to the normal context, if overlays are supported by the underlying system.
.PP
If you want to use overlays, you specify it in the format. (Note: Overlay must be requested in the format passed to the QGLWidget constructor). Your GL widget should also implement some or all of these virtual methods:
.TP
paintOverlayGL()
.TP
resizeOverlayGL()
.TP
initializeOverlayGL()
.PP
These methods work in the same way as the normal paintGL() & al. functions, only that they will be called when with the overlay context made current. You can explicitly make the overlay context current by using makeOverlayCurrent(), and you can access the overlay context directly (e.g. to ask for its transparent color) by calling overlayContext().
.PP
Note: QGLWidget overlay support is currently implemented only for the X11 window system. The Windows implementation is experimental.
.PP
Note: On X servers where the default visual is in an overlay plane, non-GL Qt windows can also be used for overlays; see the "overlay_x11" example program for details.
.PP
Note: Reparenting QGLWidgets under Windows does not work. This will be improved in Qt 3.0. If you really need to change the widget hierarchy after widget creation, simply destroy the old instance and create a new one with the new parent.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QGLWidget::QGLWidget ( QWidget * parent=0, const char * name=0, const QGLWidget * shareWidget = 0, WFlags f=0 )"
Constructs an OpenGL widget with a \fIparent\fR widget and a \fIname.\fR
.PP
The default format is used. The widget will be invalid if the system has no OpenGL support.
.PP
The \fIparent, name\fR and \fIf\fR arguments are passed to the QWidget constructor.
.PP
If the \fIshareWidget\fR parameter points to a valid QGLWidget, this widget will share OpenGL display lists with \fIshareWidget.\fR Note: If this widget and \fIshareWidget\fR has different formats, display list sharing may fail. You can check whether display list sharing succeeded by using the isSharing() method.
.PP
Note: Initialization of OpenGL rendering state etc. should be done by overriding the initializeGL() function, not in the constructor of your QGLWidget subclass.
.PP
See also QGLFormat::defaultFormat().
.SH "QGLWidget::QGLWidget ( const QGLFormat & format, QWidget * parent=0, const char * name=0, const QGLWidget * shareWidget = 0, WFlags f=0 )"
Constructs an OpenGL widget with a \fIparent\fR widget and a \fIname.\fR
.PP
The \fIformat\fR argument specifies the desired rendering options. If the underlying OpenGL/Window system cannot satisfy all the features requested in \fIformat,\fR the nearest subset of features will be used. After creation, the format() method will return the actual format obtained.
.PP
The widget will be invalid if the system has no OpenGL support.
.PP
The \fIparent, name\fR and \fIf\fR arguments are passed to the QWidget constructor.
.PP
If the \fIshareWidget\fR parameter points to a valid QGLWidget, this widget will share OpenGL display lists with \fIshareWidget.\fR Note: If this widget and \fIshareWidget\fR has different formats, display list sharing may fail. You can check whether display list sharing succeeded by using the isSharing() method.
.PP
Note: Initialization of OpenGL rendering state etc. should be done by overriding the initializeGL() function, not in the constructor of your QGLWidget subclass.
.PP
See also QGLFormat::defaultFormat() and isValid().
.SH "QGLWidget::~QGLWidget ()"
Destroys the widget.
.SH "bool QGLWidget::autoBufferSwap () const \fC[protected]\fR"
Returns TRUE if the widget is doing automatic GL buffer swapping.
.PP
See also setAutoBufferSwap().
.SH "const QGLContext * QGLWidget::context () const"
Returns the context of this widget.
.SH "QImage QGLWidget::convertToGLFormat ( const QImage & img ) \fC[static]\fR"
Convenience function for converting a QImage into the format expected by OpenGL's texture functions.
.SH "bool QGLWidget::doubleBuffer () const"
Returns TRUE if the contained GL rendering context has double buffering.
.PP
See also QGLFormat::doubleBuffer().
.SH "QGLFormat QGLWidget::format () const"
Returns the format of the contained GL rendering context.
.SH "void QGLWidget::glDraw () \fC[virtual protected]\fR"
Executes the virtual function paintGL(), initializing first as necessary.
.SH "void QGLWidget::glInit () \fC[virtual protected]\fR"
Initializes OpenGL for this widget's context. Calls the virtual function initializeGL().
.SH "void QGLWidget::initializeGL () \fC[virtual protected]\fR"
This virtual function is called one time before the first call to paintGL() or resizeGL(), and then one time whenever the widget has been assigned a new QGLContext. Reimplement it in a subclass.
.PP
This function should take care of setting any required OpenGL context rendering flags, defining display lists, etc.
.PP
There is no need to call makeCurrent() because this has already been done when this function is called.
.SH "void QGLWidget::initializeOverlayGL () \fC[virtual protected]\fR"
This virtual function is used in the same manner as initializeGL(), only for the widget's overlay context instead of the widget's main context. That is, initializeOverlayGL() is called one time before the first call to paintOverlayGL() or resizeOverlayGL(). Reimplement it in a subclass.
.PP
This function should take care of setting any required OpenGL context rendering flags, defining display lists, etc., for the overlay context.
.PP
There is no need to call makeOverlayCurrent() because this has already been done when this function is called.
.SH "bool QGLWidget::isSharing () const"
Returns TRUE if display list sharing with another QGLWidget was requested in the constructor, and the GL system was able to provide it. The GL system may fail to provide display list sharing if the two QGLWidgets use different formats.
.PP
See also format().
.SH "bool QGLWidget::isValid () const"
Returns TRUE if the widget has a valid GL rendering context. A widget will be invalid if the system has no OpenGL support
.SH "void QGLWidget::makeCurrent () \fC[virtual]\fR"
Makes this widget the current widget for OpenGL operations. I.e. makes this widget's rendering context the current OpenGL rendering context.
.SH "void QGLWidget::makeOverlayCurrent () \fC[virtual]\fR"
Makes the overlay context of this widget current. Use this if you need to issue OpenGL commands to the overlay context outside of initializeOverlayGL(), resizeOverlayGL() and paintOverlayGL().
.PP
Does nothing if this widget has no overlay.
.PP
See also makeCurrent().
.SH "const QGLContext* QGLWidget::overlayContext () const"
Returns the overlay context of this widget, or 0 if this widget has no overlay.
.PP
See also context().
.SH "void QGLWidget::paintEvent ( QPaintEvent * ) \fC[virtual protected]\fR"
Handles paint events. Will cause the virtual paintGL() function to be called, initializing first as necessary.
.PP
Reimplemented from QWidget.
.SH "void QGLWidget::paintGL () \fC[virtual protected]\fR"
This virtual function is called whenever the widget needs to be painted. Reimplement it in a subclass.
.PP
There is no need to call makeCurrent() because this has already been done when this function is called.
.SH "void QGLWidget::paintOverlayGL () \fC[virtual protected]\fR"
This virtual function is used in the same manner as paintGL(), only for the widget's overlay context instead of the widget's main context. That is, paintOverlayGL() is called whenever the widget's overlay needs to be painted. Reimplement it in a subclass.
.PP
There is no need to call makeOverlayCurrent() because this has already been done when this function is called.
.SH "void QGLWidget::qglClearColor ( const QColor & c ) const"
Convenience function for specifying the clearing color to OpenGL. Calls glClearColor (in RGBA mode) or glClearIndex (in color-index mode) with the color \fIc.\fR Applies to the current GL context.
.PP
See also qglColor(), QGLContext::currentContext() and QColor.
.SH "void QGLWidget::qglColor ( const QColor & c ) const"
Convenience function for specifying a drawing color to OpenGL. Calls glColor3 (in RGBA mode) or glIndex (in color-index mode) with the color \fIc.\fR Applies to the current GL context.
.PP
See also qglClearColor(), QGLContext::currentContext() and QColor.
.SH "QPixmap QGLWidget::renderPixmap ( int w = 0, int h = 0, bool useContext = FALSE ) \fC[virtual]\fR"
Renders the current scene on a pixmap and returns it.
.PP
You may use this method on both visible and invisible QGLWidgets.
.PP
This method will create a pixmap and a temporary QGLContext to render on it. Then, initializeGL(), resizeGL(), and paintGL() are called on this context. Finally, the widget's original GL context is restored.
.PP
The size of the pixmap will be width \fIw\fR and height \fIh.\fR If any of those are 0 (the default), the pixmap will have the same size as the widget.
.PP
If \fIuseContext\fR is TRUE, this method will try to be more efficient by using the existing GL context to render the pixmap. The default is FALSE. Use only if you know what you are doing.
.PP
Any overlay is not rendered to the pixmap.
.PP
Bugs and limitations:
.TP
May give unexpected results if the depth of the GL rendering context is different from the depth of the desktop.
.SH "void QGLWidget::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Handles resize events. Calls the virtual function resizeGL().
.PP
Reimplemented from QWidget.
.SH "void QGLWidget::resizeGL ( int width, int height ) \fC[virtual protected]\fR"
This virtual function is called whenever the widget has been resized. Reimplement it in a subclass.
.PP
There is no need to call makeCurrent() because this has already been done when this function is called.
.SH "void QGLWidget::resizeOverlayGL ( int, int ) \fC[virtual protected]\fR"
This virtual function is used in the same manner as paintGL(), only for the widget's overlay context instead of the widget's main context. That is, resizeOverlayGL() is called whenever the widget has been resized. Reimplement it in a subclass.
.PP
There is no need to call makeOverlayCurrent() because this has already been done when this function is called.
.SH "void QGLWidget::setAutoBufferSwap ( bool on ) \fC[protected]\fR"
Turns on or off the automatic GL buffer swapping. If on, and the widget is using a double-buffered format, the background and foreground GL buffers will automatically be swapped after each time the paintGL() function has been called.
.PP
The buffer auto-swapping is on by default.
.PP
See also autoBufferSwap(), doubleBuffer() and swapBuffers().
.SH "void QGLWidget::setMouseTracking ( bool enable ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QGLWidget::swapBuffers () \fC[virtual]\fR"
Swaps the screen contents with an off-screen buffer. Works only if the widget's format specifies double buffer mode.
.PP
Normally, there is no need to explicitly call this function, because it is done automatically after each widget repaint, i.e. after each time paintGL() has been executed.
.PP
See also doubleBuffer(), setAutoBufferSwap() and QGLFormat::setDoubleBuffer().
.SH "void QGLWidget::updateGL () \fC[virtual slot]\fR"
Updates the widget by calling glDraw().
.SH "void QGLWidget::updateOverlayGL () \fC[virtual slot]\fR"
Updates the widget's overlay (if any). Will cause the virtual
function paintOverlayGL() to be executed, initializing first as
necessary.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qglwidget.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qglwidget.3qt) and the Qt
version (2.3.2).
