'\" t
.TH QHeader 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QHeader \- Table header
.br
.PP
\fC#include <qheader.h>\fR
.PP
Inherits QWidget.
.PP
Inherited by QTableHeader.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQHeader\fR ( QWidget * " "parent" "=0, const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fBQHeader\fR ( int, QWidget * " "parent" "=0, const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fB~QHeader\fR () "
.br
.ti -1c
.BI "int \fBaddLabel\fR ( const QString &, int " "size" " = -1 ) "
.br
.ti -1c
.BI "int \fBaddLabel\fR ( const QIconSet &, const QString &, int " "size" " = -1 ) "
.br
.ti -1c
.BI "void \fBremoveLabel\fR ( int section ) "
.br
.ti -1c
.BI "virtual void \fBsetLabel\fR ( int, const QString &, int " "size" " = -1 ) "
.br
.ti -1c
.BI "virtual void \fBsetLabel\fR ( int, const QIconSet &, const QString &, int " "size" " = -1 ) "
.br
.ti -1c
.BI "QString \fBlabel\fR ( int section ) const"
.br
.ti -1c
.BI "QIconSet* \fBiconSet\fR ( int section ) const"
.br
.ti -1c
.BI "virtual void \fBsetOrientation\fR ( Orientation ) "
.br
.ti -1c
.BI "Orientation \fBorientation\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetTracking\fR ( bool enable ) "
.br
.ti -1c
.BI "bool \fBtracking\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetClickEnabled\fR ( bool, int " "section" " = -1 ) "
.br
.ti -1c
.BI "virtual void \fBsetResizeEnabled\fR ( bool, int " "section" " = -1 ) "
.br
.ti -1c
.BI "virtual void \fBsetMovingEnabled\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBisClickEnabled\fR ( int " "section" " = -1 ) const"
.br
.ti -1c
.BI "bool \fBisResizeEnabled\fR ( int " "section" " = -1 ) const"
.br
.ti -1c
.BI "bool \fBisMovingEnabled\fR () const"
.br
.ti -1c
.BI "void \fBresizeSection\fR ( int " "section" ", int s ) "
.br
.ti -1c
.BI "int \fBsectionSize\fR ( int section ) const"
.br
.ti -1c
.BI "int \fBsectionPos\fR ( int section ) const"
.br
.ti -1c
.BI "int \fBsectionAt\fR ( int pos ) const"
.br
.ti -1c
.BI "int \fBcount\fR () const"
.br
.ti -1c
.BI "virtual void setCellSize ( int, int ) \fI(obsolete)\fR"
.br
.ti -1c
.BI "int cellSize ( int ) const \fI(obsolete)\fR"
.br
.ti -1c
.BI "int cellPos ( int ) const \fI(obsolete)\fR"
.br
.ti -1c
.BI "int cellAt ( int ) const \fI(obsolete)\fR"
.br
.ti -1c
.BI "int \fBoffset\fR () const"
.br
.ti -1c
.BI "int \fBmapToSection\fR ( int index ) const"
.br
.ti -1c
.BI "int \fBmapToIndex\fR ( int section ) const"
.br
.ti -1c
.BI "int mapToLogical ( int ) const \fI(obsolete)\fR"
.br
.ti -1c
.BI "int mapToActual ( int ) const \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBmoveSection\fR ( int " "section" ", int toIndex ) "
.br
.ti -1c
.BI "virtual void moveCell ( int, int ) \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBsetSortIndicator\fR ( int " "section" ", bool " "increasing" " = TRUE ) "
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetUpdatesEnabled\fR ( bool enable ) "
.br
.ti -1c
.BI "virtual void \fBsetOffset\fR ( int pos ) "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBclicked\fR ( int section ) "
.br
.ti -1c
.BI "void \fBpressed\fR ( int section ) "
.br
.ti -1c
.BI "void \fBreleased\fR ( int section ) "
.br
.ti -1c
.BI "void \fBsizeChange\fR ( int " "section" ", int " "oldSize" ", int newSize ) "
.br
.ti -1c
.BI "void \fBindexChange\fR ( int " "section" ", int " "fromIndex" ", int toIndex ) "
.br
.ti -1c
.BI "void sectionClicked ( int ) \fI(obsolete)\fR"
.br
.ti -1c
.BI "void moved ( int, int ) \fI(obsolete)\fR"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "QRect \fBsRect\fR ( int index ) "
.br
.ti -1c
.BI "void \fBpaintSection\fR ( QPainter * " "p" ", int " "index" ", QRect fr ) "
.br
.ti -1c
.BI "void \fBpaintSectionLabel\fR ( QPainter * " "p" ", int " "index" ", const QRect & fr ) "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
Orientation	orientation	orientation	setOrientation
bool	tracking	tracking	setTracking
int	count	count
int	offset	offset	setOffset
bool	moving	isMovingEnabled	setMovingEnabled
.TE
.fi

.SH DESCRIPTION
The QHeader class provides a table header.
.PP
This class provides a table header as known from spreadsheet-like widgets. QHeader can be used vertically or horizontally (see setOrientation()).
.PP
With addLabel() you can add sections, and with removeLabel() you can remove them. If you enabled clicking for one or all sections (see setClickEnabled()), the user can reorder the sections and click on them which may be used for sorting (see also setSortIndicator()). This feature is turned on by default.
.PP
So, if the user reorders the sections by clicking and moving them with the mouse the index of a section may change. This means, the section you inserted at the first position might be displayed at a different index then. To get the index at which e.g the first section is displayed, use mapToIndex() with 0 as argument for our example.
.PP
If you want e.g. to know which section is displayed at e.g. index 3 use mapToSection() with 3 as argument.
.PP
So, you can always work with the section numbers as you inserted them without caring about the index at which they are displayed at the moment. Also the API of QHeader works with the section numbers.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QListView and QTableView.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QHeader::QHeader ( QWidget * parent=0, const char * name=0 )"
Constructs a horizontal header.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.SH "QHeader::QHeader ( int n, QWidget * parent=0, const char * name=0 )"
Constructs a horizontal header with \fIn\fR sections.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.SH "QHeader::~QHeader ()"
Destructs the header.
.SH "int QHeader::addLabel ( const QIconSet & iconset, const QString & s, int size = -1 )"
Adds a new section, with icon set \fIiconset\fR and label text \fIs.\fR Returns the index. If \fIsize\fR is non-negative, the section width is set to \fIsize,\fR otherwise a size currently sufficient for the label is used.
.SH "int QHeader::addLabel ( const QString & s, int size = -1 )"
Adds a new section, with label text \fIs.\fR Returns the index. If \fIsize\fR is non-negative, the section width is set to \fIsize,\fR otherwise a size currently sufficient for the label text is used.
.SH "int QHeader::cellAt ( int pos ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use sectionAt() instead!
.PP
Returns the index at which the section is displayed, which contains \fIpos\fR in widget coordinates, or -1 if \fIpos\fR is outside the header sections.
.SH "int QHeader::cellPos ( int i ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use sectionPos() instead!
.PP
Returns the position in pixels of the section which is displayed at the index \fIi.\fR The position is measured from the start of the header.
.SH "int QHeader::cellSize ( int i ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use sectionSize() instead!
.PP
Returns the size in pixels of the section which is displayed at the index \fIi.\fR
.SH "void QHeader::clicked ( int section ) \fC[signal]\fR"
This signal is emitted when the user clicked onto the section \fIsection.\fR
.PP
See also pressed() and released().
.SH "int QHeader::count () const"
Returns the number of sections in the header.
.SH "QIconSet * QHeader::iconSet ( int section ) const"
Returns the icon set set on section \fIsection.\fR
.SH "void QHeader::indexChange ( int section, int fromIndex, int toIndex ) \fC[signal]\fR"
This signal is emitted if the user moved the section \fIsection,\fR which was displayed at the index \fIfromIndex\fR to the new index \fItoIndex.\fR
.SH "bool QHeader::isClickEnabled ( int section = -1 ) const"
Returns whether the section \fIsection\fR is clickable or not. If \fIsection\fR is out of range (negative or larger than count() - 1), TRUE is returned if all sections are clickable, else FALSE.
.PP
See also setClickEnabled().
.SH "bool QHeader::isMovingEnabled () const"
Returns TRUE if the sections of the header can be moved around be the user, otherwise FALSE.
.PP
See also setMovingEnabled().
.SH "bool QHeader::isResizeEnabled ( int section = -1 ) const"
Returns whether the section \fIsection\fR is resizeable or not. If \fIsection\fR is out of range (negative or larger than count() - 1), TRUE is returned if all sections are resizeable, else FALSE.
.PP
See also setResizeEnabled().
.SH "QString QHeader::label ( int section ) const"
Returns the text set on section \fIsection.\fR
.SH "int QHeader::mapToActual ( int l ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use mapToIndex() instead!
.PP
Translates from logical index \fIl\fR to actual index (index, at which the section \fIl\fR is displayed) . Returns -1 if \fIl\fR is outside the legal range.
.PP
See also mapToLogical().
.SH "int QHeader::mapToIndex ( int section ) const"
Returns the index at which the section \fIsection\fR is currently displayed.
.SH "int QHeader::mapToLogical ( int a ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use mapToSection() instead!
.PP
Translates from actual index \fIa\fR (index at which the section is displayed) to logical index of the section. Returns -1 if \fIa\fR is outside the legal range.
.PP
See also mapToActual().
.SH "int QHeader::mapToSection ( int index ) const"
Returns the section which is displayed at the index \fIindex.\fR
.SH "void QHeader::mouseMoveEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QHeader::mousePressEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QHeader::mouseReleaseEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QHeader::moveCell ( int fromIdx, int toIdx ) \fC[virtual]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use moveSection() instead!
.PP
Moves the section which is currently displayed at the index \fIfromIndex\fR to the index \fItoIdx.\fR
.SH "void QHeader::moveSection ( int section, int toIndex )"
Moves the section \fIsection\fR to be displayed at the index \fItoIndex.\fR
.SH "void QHeader::moved ( int fromIndex, int toIndex ) \fC[signal]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use indexChange() instead!
.PP
This signal is emitted when the user has moved the section which is displayed at the index \fIfromIndex\fR to the index \fItoIndex.\fR
.SH "int QHeader::offset () const"
Returns the leftmost (or uppermost for vertical headers) visible pixel.
.SH "Orientation QHeader::orientation () const"
Returns \fCHorizontal\fR if the header is horizontal, \fCVertical\fR if the header is vertical.
.SH "void QHeader::paintEvent ( QPaintEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QHeader::paintSection ( QPainter * p, int index, QRect fr ) \fC[protected]\fR"
Paints actual section \fIindex\fR of the header, inside rectangle \fIfr\fR in widget coordinates.
.PP
Calls paintSectionLabel().
.SH "void QHeader::paintSectionLabel ( QPainter * p, int index, const QRect & fr ) \fC[protected]\fR"
Paints the label of actual section \fIindex\fR of the header, inside rectangle \fIfr\fR in widget coordinates.
.PP
Called by paintSection().
.SH "void QHeader::pressed ( int section ) \fC[signal]\fR"
This signal is emitted when the user presses section \fIsection\fR down.
.PP
See also released().
.SH "void QHeader::released ( int section ) \fC[signal]\fR"
This signal is emitted when section \fIsection\fR is released.
.PP
See also pressed().
.SH "void QHeader::removeLabel ( int section )"
Removes the section \fIsection.\fR
.SH "void QHeader::resizeSection ( int section, int s )"
Resizes the section \fIsection\fR to \fIs\fR pixels.
.SH "QRect QHeader::sRect ( int index ) \fC[protected]\fR"
Returns the rectangle covered by index \fIindex.\fR
.SH "int QHeader::sectionAt ( int pos ) const"
Returns the \fIsection\fR which contains the position \fIpos\fR given in pixels.
.PP
See also offset().
.SH "void QHeader::sectionClicked ( int index ) \fC[signal]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use clicked() instead!
.PP
This signal is emitted when a part of the header is clicked. \fIindex\fR is the index at which the section is displayed.
.PP
In a list view, this signal would typically be connected to a slot which sorts the specified column (or row).
.SH "int QHeader::sectionPos ( int section ) const"
Returns the position (in pixels) at which the \fIsection\fR starts.
.PP
See also offset().
.SH "int QHeader::sectionSize ( int section ) const"
Returns the size of the \fIsection\fR in pixels.
.SH "void QHeader::setCellSize ( int section, int s ) \fC[virtual]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Use resizeSection() instead!
.PP
Sets the size of the section \fIsection\fR to \fIs\fR pixels.
.PP
\fBWarning:\fR does not repaint or send out signals.
.SH "void QHeader::setClickEnabled ( bool enable, int section = -1 ) \fC[virtual]\fR"
Enable clicking in section \fIsection\fR if \fIenable\fR is TRUE, disable otherwise. If \fIsection\fR is negative (as it is by default), clicking is enabled/disabled for all current and new sections.
.PP
If enabled, the clicked() signal is emitted when the user clicks.
.PP
See also setMovingEnabled() and setResizeEnabled().
.SH "void QHeader::setLabel ( int section, const QIconSet & iconset, const QString & s, int size = -1 ) \fC[virtual]\fR"
Sets the icon on the section \fIsection\fR to \fIiconset\fR and the text to \fIs.\fR If the section does not exist, nothing happens. If \fIsize\fR is non-negative, the section width is set to \fIsize.\fR
.PP
Any icon set that has been defined for this section remains unchanged.
.SH "void QHeader::setLabel ( int section, const QString & s, int size = -1 ) \fC[virtual]\fR"
Sets the text on section \fIsection\fR to \fIs.\fR If the section does not exist, nothing happens. If \fIsize\fR is non-negative, the section width is set to \fIsize.\fR
.PP
Any icon set that has been defined for this section remains unchanged.
.SH "void QHeader::setMovingEnabled ( bool enable ) \fC[virtual]\fR"
Enable the user to exchange sections if \fIenable\fR is TRUE, disable otherwise.
.PP
If you enable moving here, the indexChange() signal is emitted if the user moves a section.
.PP
See also setClickEnabled() and setResizeEnabled().
.SH "void QHeader::setOffset ( int x ) \fC[virtual slot]\fR"
Scrolls the header such that \fIx\fR becomes the leftmost (or uppermost for vertical headers) visible pixel.
.SH "void QHeader::setOrientation ( Orientation orientation ) \fC[virtual]\fR"
Sets the header orientation. The \fIorientation\fR must be QHeader::Vertical or QHeader::Horizontal.
.PP
When adding labels without the size parameter, setOrientation should be called first, otherwise labels will be sized incorrectly.
.PP
See also orientation().
.SH "void QHeader::setResizeEnabled ( bool enable, int section = -1 ) \fC[virtual]\fR"
Enable user resizing of the section \fIsection\fR if \fIenable\fR is TRUE, disable otherwise. If \fIsection\fR is negative (as it is by default), resizing is enabled/disabled for all current and new sections.
.PP
If the user resizes a section (because this feature enabled it), a sizeChange() signal is emitted.
.PP
See also setMovingEnabled() and setClickEnabled().
.SH "void QHeader::setSortIndicator ( int section, bool increasing = TRUE )"
As often the QHeader is used together with a list widget, QHeader can indicate a sort order. This is done using an arrow at the right edge of a section which points up or down. \fIsection\fR specifies in which section this arrow should be drawn, and \fIincreasing,\fR if the arrow should point to the bottom (TRUE) or the the top (FALSE). If \fIsection\fR is -1, no arrow is drawn.
.PP
See also QListView::setShowSortIndicator().
.SH "void QHeader::setTracking ( bool enable ) \fC[virtual]\fR"
Sets tracking if \fIenable\fR is TRUE, otherwise turns off tracking. If tracking is on, the sizeChange() signal is emitted continuously while the mouse is moved, otherwise it is only emitted when the mouse button is released.
.PP
See also tracking().
.SH "void QHeader::setUpdatesEnabled ( bool enable ) \fC[virtual slot]\fR"
reimp.
.PP
Reimplemented from QWidget.
.SH "void QHeader::showEvent ( QShowEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QHeader::sizeChange ( int section, int oldSize, int newSize ) \fC[signal]\fR"
This signal is emitted when the user has changed the size of some of a \fIsection\fR of the header from \fIoldSize\fR to \fInewSize.\fR This signal is typically connected to a slot that repaints the table.
.SH "QSize QHeader::sizeHint () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QSizePolicy QHeader::sizePolicy () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "bool QHeader::tracking () const"
Returns TRUE if tracking is on, FALSE otherwise.
.PP
See also  setTracking().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qheader.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qheader.3qt) and the Qt
version (2.3.2).
