'\" t
.TH QIconDrag 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QIconDrag \- The drag object which is used for moving items in the iconview
.br
.PP
\fC#include <qiconview.h>\fR
.PP
Inherits QDragObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual \fB~QIconDrag\fR () "
.br
.ti -1c
.BI "void \fBappend\fR ( const QIconDragItem & " "item" ", const QRect & " "pr" ", const QRect & tr ) "
.br
.ti -1c
.BI "virtual QByteArray \fBencodedData\fR ( const char * mime ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "bool \fBcanDecode\fR ( QMimeSource * e ) "
.br
.in -1c
.SH DESCRIPTION
The QIconDrag class is the drag object which is used for moving items in the iconview
.PP
The QIconDrag is the drag object which is used for moving items in the iconview. The QIconDrag stores exact informations about the positions of the items, which are dragged, so that each iconview is able to draw drag shapes in correct positions. Also the data of each dragged item is stored here.
.PP
If you want to use extended DnD functionality of the QIconView, normally it's enough to just create a QIconDrag object in QIconView::dragObject(). Then create for each item which should be dragged a QIconDragItem and set the data it represents with QIconDragItem::setData() and add this item to the drag object using append().
.PP
If you want to offer the data in other mime-types too, derive a class from this and implement the needed encoding and decoding here.
.PP
An example, how to implement this, is in the QtFileIconView example (qt/examples/qfileiconview/qfileiconview.h and qt/examples/qfileiconview/qfileiconview.cpp).
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QIconDrag::QIconDrag ( QWidget * dragSource, const char * name = 0 )"
Reimplemented for internal reasons; the API is not affected.
.SH "QIconDrag::~QIconDrag () \fC[virtual]\fR"
Destructor.
.SH "void QIconDrag::append ( const QIconDragItem & i, const QRect & pr, const QRect & tr )"
Appends an icon drag item which should be stored in this dragobject and the geometry of it.
.PP
See also QIconDragItem.
.SH "bool QIconDrag::canDecode ( QMimeSource * e ) \fC[static]\fR"
Returns TRUE if \fIe\fR can be decoded by the QIconDrag, else FALSE.
.SH "QByteArray QIconDrag::encodedData ( const char * mime ) const \fC[virtual]\fR"
Returns the encoded data of the drag object if \fImime\fR is application/x-qiconlist.
.SH "const char* QIconDrag::format ( int i ) const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qicondrag.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qicondrag.3qt) and the Qt
version (2.3.2).
