'\" t
.TH QInterlaceStyle 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QInterlaceStyle \- Look and Feel suitable for interlaced displays
.br
.PP
\fC#include <qinterlacestyle.h>\fR
.PP
Inherits QMotifStyle.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQInterlaceStyle\fR () "
.br
.ti -1c
.BI "int \fBdefaultFrameWidth\fR () const"
.br
.ti -1c
.BI "void \fBdrawButtonMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int h ) "
.br
.in -1c
.SH DESCRIPTION
Look and Feel suitable for interlaced displays
.PP
This class implements a look and feel that reduces flicker as much as possible on interlaced displays (i.e. television). It is an experimental style. In addition to using this style you will need to select a font that does not flicker.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QInterlaceStyle::QInterlaceStyle ()"
Constructs a QInterlaceStyle.
.SH "QRect QInterlaceStyle::comboButtonRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawBevelButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawComboButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool, bool, bool, const QBrush * fb ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawExclusiveIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool on, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawExclusiveIndicatorMask ( QPainter * p, int x, int y, int w, int h, bool ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawFocusRect ( QPainter * p, const QRect &, const QColorGroup & g, const QColor * bg = 0, bool = FALSE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int s, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawIndicatorMask ( QPainter * p, int x, int y, int w, int h, int ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool, int lineWidth, const QBrush * fill ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawPushButton ( QPushButton * btn, QPainter * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawPushButtonLabel ( QPushButton * btn, QPainter * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawScrollBarControls ( QPainter * p, const QScrollBar * sb, int sliderStart, uint controls, uint activeControl ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawSlider ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient, bool, bool ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawSliderGroove ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, QCOORD, Orientation o ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawSliderGrooveMask ( QPainter * p, int x, int y, int w, int h, QCOORD c, Orientation o ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawSliderMask ( QPainter * p, int x, int y, int w, int h, Orientation, bool, bool ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::drawSplitter ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QInterlaceStyle::exclusiveIndicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QInterlaceStyle::indicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::polish ( QApplication * app )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QInterlaceStyle::polish ( QWidget * w ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QRect QInterlaceStyle::pushButtonContentsRect ( QPushButton * btn )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QInterlaceStyle::scrollBarMetrics ( const QScrollBar * sb, int & sliderMin, int & sliderMax, int & sliderLength, int & buttonDim ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QInterlaceStyle::splitterWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QInterlaceStyle::unPolish ( QApplication * app )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QInterlaceStyle::unPolish ( QWidget * w ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qinterlacestyle.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qinterlacestyle.3qt) and the Qt
version (2.3.2).
