'\" t
.TH QIODevice 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QIODevice \- The base class of I/O devices
.br
.PP
\fC#include <qiodevice.h>\fR
.PP
Inherited by QBuffer, QFile, QSocket and QSocketDevice.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQIODevice\fR () "
.br
.ti -1c
.BI "virtual \fB~QIODevice\fR () "
.br
.ti -1c
.BI "int \fBflags\fR () const"
.br
.ti -1c
.BI "int \fBmode\fR () const"
.br
.ti -1c
.BI "int \fBstate\fR () const"
.br
.ti -1c
.BI "bool \fBisDirectAccess\fR () const"
.br
.ti -1c
.BI "bool \fBisSequentialAccess\fR () const"
.br
.ti -1c
.BI "bool \fBisCombinedAccess\fR () const"
.br
.ti -1c
.BI "bool \fBisBuffered\fR () const"
.br
.ti -1c
.BI "bool \fBisRaw\fR () const"
.br
.ti -1c
.BI "bool \fBisSynchronous\fR () const"
.br
.ti -1c
.BI "bool \fBisAsynchronous\fR () const"
.br
.ti -1c
.BI "bool \fBisTranslated\fR () const"
.br
.ti -1c
.BI "bool \fBisReadable\fR () const"
.br
.ti -1c
.BI "bool \fBisWritable\fR () const"
.br
.ti -1c
.BI "bool \fBisReadWrite\fR () const"
.br
.ti -1c
.BI "bool \fBisInactive\fR () const"
.br
.ti -1c
.BI "bool \fBisOpen\fR () const"
.br
.ti -1c
.BI "int \fBstatus\fR () const"
.br
.ti -1c
.BI "void \fBresetStatus\fR () "
.br
.ti -1c
.BI "virtual bool \fBopen\fR ( int mode ) "
.br
.ti -1c
.BI "virtual void \fBclose\fR () "
.br
.ti -1c
.BI "virtual void \fBflush\fR () "
.br
.ti -1c
.BI "virtual uint \fBsize\fR () const"
.br
.ti -1c
.BI "virtual int \fBat\fR () const"
.br
.ti -1c
.BI "virtual bool \fBat\fR ( int ) "
.br
.ti -1c
.BI "virtual bool \fBatEnd\fR () const"
.br
.ti -1c
.BI "bool \fBreset\fR () "
.br
.ti -1c
.BI "virtual int \fBreadBlock\fR ( char * " "data" ", uint maxlen ) "
.br
.ti -1c
.BI "virtual int \fBwriteBlock\fR ( const char * " "data" ", uint len ) "
.br
.ti -1c
.BI "virtual int \fBreadLine\fR ( char * " "data" ", uint maxlen ) "
.br
.ti -1c
.BI "int \fBwriteBlock\fR ( const QByteArray & data ) "
.br
.ti -1c
.BI "QByteArray \fBreadAll\fR () "
.br
.ti -1c
.BI "virtual int \fBgetch\fR () "
.br
.ti -1c
.BI "virtual int \fBputch\fR ( int ) "
.br
.ti -1c
.BI "virtual int \fBungetch\fR ( int ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBsetFlags\fR ( int f ) (internal)"
.br
.ti -1c
.BI "void \fBsetType\fR ( int ) (internal)"
.br
.ti -1c
.BI "void \fBsetMode\fR ( int ) (internal)"
.br
.ti -1c
.BI "void \fBsetState\fR ( int ) (internal)"
.br
.ti -1c
.BI "void \fBsetStatus\fR ( int ) (internal)"
.br
.in -1c
.SH DESCRIPTION
The QIODevice class is the base class of I/O devices.
.PP
An I/O device represents a medium that one can read bytes from and/or write bytes to. The QIODevice class is the abstract superclass of all such devices; classes like QFile, QBuffer and QSocket inherit QIODevice and implement virtual functions like write() appropriately.
.PP
While applications sometimes use QIODevice directly, mostly it is better to go through QTextStream and QDataStream, which provide stream operations on any QIODevice subclass. QTextStream provides text-oriented stream functionality (for human-readable ASCII files, for example), while QDataStream deals with binary data in a totally platform-independent manner.
.PP
The public member functions in QIODevice roughly fall into two groups: The action functions and the state access functions. The most important action functions are: 
.TP
open() opens a device for reading and/or writing, depending on the argument to open().
.TP
close() closes the device and tidies up.
.TP
readBlock() reads a block of data from the device.
.TP
writeBlock() writes a block of data to the device.
.TP
readLine() reads a line (of text, usually) from the device.
.TP
flush() ensures that all buffered data are written to the real device.
.IP
There are also some other, less used, action functions: 
.TP
getch() reads a single character.
.TP
ungetch() forgets the last call to getch(), if possible.
.TP
putch() writes a single character.
.TP
size() returns the size of the device, if there is one.
.TP
at() returns the current read/write pointer, if there is one for this device, or it moves the pointer.
.TP
atEnd() says whether there is more to read, if that is a meaningful question for this device.
.TP
reset() moves the read/write pointer to the start of the device, if that is possible for this device.
.IP
The state access are all "get" functions. The QIODevice subclass calls setState() to update the state, and simple access functions tell the user of the device what the device's state is. Here are the settings, and their associated access functions: 
.TP
Access type. Some devices are direct access (it is possible to read/write anywhere) while others are sequential. QIODevice provides the access functions isDirectAccess(), isSequentialAccess() and isCombinedAccess() to tell users what a given I/O device supports.
.TP
Buffering. Some devices are accessed in raw mode while others are buffered. Buffering usually provides greater efficiency, particularly for small read/write operations. isBuffered() tells the user whether a given device is buffered. (This can often be set by the application in the call to open().)
.TP
Synchronicity. Synchronous devices work there and then, for example files. When you read from a file, the file delivers its data right away. Others, such as a socket connected to a HTTP server, may not deliver the data until seconds after you ask to read it. isSynchronous() and isAsynchronous() tells the user how this device operates.
.TP
CR/LF translation. For simplicity, applications often like to see just a single CR/LF style, and QIODevice subclasses can provide that. isTranslated() returns TRUE if this object translates CR/LF to just LF. (This can often be set by the application in the call to open().)
.TP
Accessibility. Some files cannot be written, for example. isReadable(), isWritable and isReadWrite() tells the application whether it can read from and write to a given device. (This can often be set by the application in the call to open().)
.TP
Finally, isOpen() returns TRUE if the device is open. This can quite obviously be set using open() :)
.IP
.PP
QIODevice provides numerous pure virtual functions you need to implement when subclassing it. Here is a skeleton subclass with all the members you are certain to need, and some it's likely that you will need:
.PP
.nf
.br
    class YourDevice : public QIODevice
.br
    {
.br
    public:
.br
        YourDevice();
.br
       ~YourDevice();
.br
.br
        bool open( int mode );
.br
        void close();
.br
        void flush();
.br
.br
        uint size() const;
.br
        int  at() const;        // not a pure virtual function
.br
        bool at( int );         // not a pure virtual function
.br
        bool atEnd() const;     // not a pure virtual function
.br
.br
        int readBlock( char *data, uint maxlen );
.br
        int writeBlock( const char *data, uint len );
.br
        int readLine( char *data, uint maxlen );
.br
.br
        int getch();
.br
        int putch( int );
.br
        int ungetch( int );
.br
    };
.fi
.PP
The three non-pure virtual functions can be ignored if your device is sequential (e.g. an RS-232 port).
.PP
See also QDataStream and QTextStream.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QIODevice::QIODevice ()"
Constructs an I/O device.
.SH "QIODevice::~QIODevice () \fC[virtual]\fR"
Destructs the I/O device.
.SH "bool QIODevice::at ( int pos ) \fC[virtual]\fR"
Virtual function that sets the I/O device index to \fIpos.\fR
.PP
See also size().
.PP
Reimplemented in QSocketDevice, QFile, QSocket and QBuffer.
.SH "int QIODevice::at () const \fC[virtual]\fR"
Virtual function that returns the current I/O device index.
.PP
This index is the data read/write head of the I/O device.
.PP
See also size().
.PP
Reimplemented in QBuffer, QSocketDevice, QFile and QSocket.
.SH "bool QIODevice::atEnd () const \fC[virtual]\fR"
Virtual function that returns TRUE if the I/O device index is at the end of the input.
.PP
Reimplemented in QSocket, QFile and QSocketDevice.
.SH "void QIODevice::close () \fC[virtual]\fR"
Closes the I/O device.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also open().
.PP
Reimplemented in QFile, QBuffer, QSocketDevice and QSocket.
.SH "int QIODevice::flags () const"
Returns the current I/O device flags setting.
.PP
Flags consists of mode flags and state flags.
.PP
See also mode() and state().
.SH "void QIODevice::flush () \fC[virtual]\fR"
Flushes an open I/O device.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
Reimplemented in QFile, QSocket, QBuffer and QSocketDevice.
.SH "int QIODevice::getch () \fC[virtual]\fR"
Reads a single byte/character from the I/O device.
.PP
Returns the byte/character read, or -1 if the end of the I/O device has been reached.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also putch() and ungetch().
.PP
Reimplemented in QFile, QSocket, QBuffer and QSocketDevice.
.SH "bool QIODevice::isAsynchronous () const"
Returns TRUE if the I/O device is a asynchronous device, otherwise FALSE.
.PP
This mode is currently not in use.
.PP
See also isSynchronous().
.SH "bool QIODevice::isBuffered () const"
Returns TRUE if the I/O device is a buffered (not raw) device, otherwise FALSE.
.PP
See also isRaw().
.SH "bool QIODevice::isCombinedAccess () const"
Returns TRUE if the I/O device is a combined access (both direct and sequential) device, otherwise FALSE.
.PP
This access method is currently not in use.
.SH "bool QIODevice::isDirectAccess () const"
Returns TRUE if the I/O device is a direct access (not sequential) device, otherwise FALSE.
.PP
See also isSequentialAccess().
.SH "bool QIODevice::isInactive () const"
Returns TRUE if the I/O device state is 0, i.e. the device is not open.
.PP
See also isOpen().
.SH "bool QIODevice::isOpen () const"
Returns TRUE if the I/O device state has been opened, otherwise FALSE.
.PP
See also isInactive().
.SH "bool QIODevice::isRaw () const"
Returns TRUE if the I/O device is a raw (not buffered) device, otherwise FALSE.
.PP
See also isBuffered().
.SH "bool QIODevice::isReadWrite () const"
Returns TRUE if the I/O device was opened using \fCIO_ReadWrite\fR mode.
.PP
See also isReadable() and isWritable().
.SH "bool QIODevice::isReadable () const"
Returns TRUE if the I/O device was opened using \fCIO_ReadOnly\fR or \fCIO_ReadWrite\fR mode.
.PP
See also isWritable() and isReadWrite().
.SH "bool QIODevice::isSequentialAccess () const"
Returns TRUE if the I/O device is a sequential access (not direct) device, otherwise FALSE. Operations involving size() and at(int) are not valid on sequential devices.
.PP
See also isDirectAccess().
.SH "bool QIODevice::isSynchronous () const"
Returns TRUE if the I/O device is a synchronous device, otherwise FALSE.
.PP
See also isAsynchronous().
.SH "bool QIODevice::isTranslated () const"
Returns TRUE if the I/O device translates carriage-return and linefeed characters.
.PP
A QFile is translated if it is opened with the \fCIO_Translate\fR mode flag.
.SH "bool QIODevice::isWritable () const"
Returns TRUE if the I/O device was opened using \fCIO_WriteOnly\fR or \fCIO_ReadWrite\fR mode.
.PP
See also isReadable() and isReadWrite().
.SH "int QIODevice::mode () const"
Returns bits OR'ed together that specify the current operation mode.
.PP
These are the flags that were given to the open() function.
.PP
The flags are: \fCIO_ReadOnly, IO_WriteOnly, IO_ReadWrite, IO_Append, IO_Truncate\fR and \fCIO_Translate.\fR
.SH "bool QIODevice::open ( int mode ) \fC[virtual]\fR"
Opens the I/O device using the specified \fImode.\fR Returns TRUE if successful, or FALSE if the device could not be opened.
.PP
The mode parameter \fIm\fR must be a combination of the following flags.
.TP
\fCIO_Raw\fR specified raw (unbuffered) file access.
.TP
\fCIO_ReadOnly\fR opens a file in read-only mode.
.TP
\fCIO_WriteOnly\fR opens a file in write-only mode.
.TP
\fCIO_ReadWrite\fR opens a file in read/write mode.
.TP
\fCIO_Append\fR sets the file index to the end of the file.
.TP
\fCIO_Truncate\fR truncates the file.
.TP
\fCIO_Translate\fR enables carriage returns and linefeed translation for text files under MS-DOS, Window, OS/2 and Macintosh. On Unix systems this flag has no effect. Use with caution as it will also transform every linefeed written to the file into a CRLF pair. This is likely to corrupt your file when writing binary data to it. Cannot be combined with \fCIO_Raw.\fR
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also close().
.PP
Reimplemented in QSocket, QBuffer, QFile and QSocketDevice.
.SH "int QIODevice::putch ( int ch ) \fC[virtual]\fR"
Writes the character \fIch\fR to the I/O device.
.PP
Returns \fIch,\fR or -1 if some error occurred.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also getch() and ungetch().
.PP
Reimplemented in QSocketDevice, QFile, QSocket and QBuffer.
.SH "QByteArray QIODevice::readAll ()"
This convenience function returns all of the remaining data in the device. Note that this only works for direct access devices, such as QFile.
.PP
See also isDirectAccess().
.SH "int QIODevice::readBlock ( char * data, uint maxlen ) \fC[virtual]\fR"
Reads at most \fImaxlen\fR bytes from the I/O device into \fIdata\fR and returns the number of bytes actually read.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also writeBlock().
.PP
Reimplemented in QBuffer, QSocket, QFile and QSocketDevice.
.SH "int QIODevice::readLine ( char * data, uint maxlen ) \fC[virtual]\fR"
Reads a line of text, up to \fImaxlen\fR bytes including a terminating \\0. If there is a newline at the end if the line, it is not stripped.
.PP
Returns the number of bytes read including the terminating \\0, or -1 in case of error.
.PP
This virtual function can be reimplemented much more efficiently by the most subclasses.
.PP
See also readBlock() and QTextStream::readLine().
.PP
Reimplemented in QFile, QSocket and QBuffer.
.SH "bool QIODevice::reset ()"
Sets the device index to 0.
.PP
See also at().
.SH "void QIODevice::resetStatus ()"
Sets the I/O device status to \fCIO_Ok.\fR
.PP
See also status().
.SH "uint QIODevice::size () const \fC[virtual]\fR"
Virtual function that returns the size of the I/O device.
.PP
See also at().
.PP
Reimplemented in QSocket, QFile, QBuffer and QSocketDevice.
.SH "int QIODevice::state () const"
Returns bits OR'ed together that specify the current state.
.PP
The flags are: \fCIO_Open.\fR
.PP
Subclasses may define more flags.
.SH "int QIODevice::status () const"
Returns the I/O device status.
.PP
The I/O device status returns an error code. If open() returns FALSE or readBlock() or writeBlock() return -1, this function can be called to get the reason why the operation did not succeed.
.PP
The status codes are:
.TP
\fCIO_Ok\fR The operation was successful.
.TP
\fCIO_ReadError\fR Could not read from the device.
.TP
\fCIO_WriteError\fR Could not write to the device.
.TP
\fCIO_FatalError\fR A fatal unrecoverable error occurred.
.TP
\fCIO_OpenError\fR Could not open the device.
.TP
\fCIO_ConnectError\fR Could not connect to the device.
.TP
\fCIO_AbortError\fR The operation was unexpectedly aborted.
.TP
\fCIO_TimeOutError\fR The operation timed out.
.TP
\fCIO_UnspecifiedError\fR An unspecified error happened on close.
.PP
See also resetStatus().
.SH "int QIODevice::ungetch ( int ch ) \fC[virtual]\fR"
Puts the character \fIch\fR back into the I/O device and decrements the index if it is not zero.
.PP
This function is normally called to "undo" a getch() operation.
.PP
Returns \fIch,\fR or -1 if some error occurred.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also getch() and putch().
.PP
Reimplemented in QSocket, QBuffer, QFile and QSocketDevice.
.SH "int QIODevice::writeBlock ( const QByteArray & data )"
This convenience function is the same as calling writeBlock( data.data(), data.size() ).
.SH "int QIODevice::writeBlock ( const char * data, uint len ) \fC[virtual]\fR"
Writes \fIlen\fR bytes from \fIp\fR to the I/O device and returns the number of bytes actually written.
.PP
This virtual function must be reimplemented by all subclasses.
.PP
See also readBlock().
.PP
Reimplemented in QSocketDevice, QFile, QBuffer and QSocket.
.SH "void QIODevice::setFlags ( int f ) \fC[protected]\fR"
For internal use only.
.SH "void QIODevice::setMode ( int m ) \fC[protected]\fR"
For internal use only.
.SH "void QIODevice::setState ( int s ) \fC[protected]\fR"
For internal use only.
.SH "void QIODevice::setStatus ( int s ) \fC[protected]\fR"
For internal use only.
.SH "void QIODevice::setType ( int t ) \fC[protected]\fR"
For internal use only.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qiodevice.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qiodevice.3qt) and the Qt
version (2.3.2).
