'\" t
.TH QLabel 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QLabel \- Static information display
.br
.PP
\fC#include <qlabel.h>\fR
.PP
Inherits QFrame.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQLabel\fR ( QWidget * " "parent" ", const char * " "name" "=0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fBQLabel\fR ( const QString & " "text" ", QWidget * " "parent" ", const char * " "name" "=0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fBQLabel\fR ( QWidget * " "buddy" ", const QString &, QWidget * " "parent" ", const char * " "name" "=0, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fB~QLabel\fR () "
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "QPixmap* \fBpixmap\fR () const"
.br
.ti -1c
.BI "QMovie* \fBmovie\fR () const"
.br
.ti -1c
.BI "TextFormat \fBtextFormat\fR () const"
.br
.ti -1c
.BI "void \fBsetTextFormat\fR ( TextFormat ) "
.br
.ti -1c
.BI "int \fBalignment\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetAlignment\fR ( int ) "
.br
.ti -1c
.BI "int \fBindent\fR () const"
.br
.ti -1c
.BI "void \fBsetIndent\fR ( int ) "
.br
.ti -1c
.BI "bool autoResize () const \fI(obsolete)\fR"
.br
.ti -1c
.BI "virtual void setAutoResize ( bool ) \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBhasScaledContents\fR () const"
.br
.ti -1c
.BI "void \fBsetScaledContents\fR ( bool ) "
.br
.ti -1c
.BI "virtual void \fBsetBuddy\fR ( QWidget * ) "
.br
.ti -1c
.BI "QWidget* \fBbuddy\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetText\fR ( const QString & ) "
.br
.ti -1c
.BI "virtual void \fBsetPixmap\fR ( const QPixmap & ) "
.br
.ti -1c
.BI "virtual void \fBsetMovie\fR ( const QMovie & ) "
.br
.ti -1c
.BI "virtual void \fBsetNum\fR ( int ) "
.br
.ti -1c
.BI "virtual void \fBsetNum\fR ( double ) "
.br
.ti -1c
.BI "void \fBclear\fR () "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBdrawContents\fR ( QPainter * ) "
.br
.ti -1c
.BI "virtual void \fBdrawContentsMask\fR ( QPainter * ) "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
QString	text	text	setText
TextFormat	textFormat	textFormat	setTextFormat
QPixmap	pixmap	pixmap	setPixmap
bool	scaledContents	hasScaledContents	setScaledContents
Alignment	alignment	alignment	setAlignment
int	indent	indent	setIndent
.TE
.fi

.SH DESCRIPTION
The QLabel widget provides a static information display
.PP
QLabel is used for displaying information in the form of text or image to the user. No user interaction functionality is provided. The visual appearance of the label can be configured in various ways, and it can be used for specifying a focus accelerator key for another widget.
.PP
A QLabel can contain any of the following content types:
.TP
A plain text: set by passing a QString to setText().
.TP
A rich text: set by passing a QString that contains a rich text to setText().
.TP
A pixmap: set by passing a QPixmap to setPixmap().
.TP
A movie: set by passing a QMovie to setMovie().
.TP
A number: set by passing an \fIint\fR or a \fIdouble\fR to setNum(), which converts the number to plain text.
.TP
Nothing: The same as an empty plain text. This is the default. Set by clear().
.PP
When the content is changed using any of these functions, any previous content is cleared.
.PP
The look of a QLabel can be tuned in several ways. All the settings of QFrame are available for specifying a widget frame. The positioning of the content within the QLabel widget area can be tuned with setAlignment() and setIndent(). For example, this code sets up a sunken panel with a two-line text in the bottom right corner (both lines being flush with the right side of the label):
.PP
.nf
.br
    QLabel *label = new QLabel;
.br
    label->setFrameStyle( QFrame::Panel | QFrame::Sunken );
.br
    label->setText( "first line\\nsecond line" );
.br
    label->setAlignment( AlignBottom | AlignRight );
.fi
.PP
A QLabel is often used as a label for another, interactive widget. For this use, QLabel provides a handy mechanism for adding an accelerator key (see QAccel) that will set the keyboard focus to the other widget (called the QLabel's "buddy"). Example:
.PP
.nf
.br
     QLineEdit* phoneEdit = new QLineEdit( this, "phoneEdit" );
.br
     QLabel* phoneLabel = new QLabel( phoneEdit, "&Phone:", this, "phoneLabel" );
.fi
.PP
In this example, keyboard focus is transferred to the label's buddy (the QLineEdit) when the user presses \fIAlt-P.\fR You can also use the setBuddy() function to accomplish the same.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QLineEdit, QTextView, QPixmap, QMovie and GUI Design Handbook: Label
.PP
Examples:
.(l
cursor/cursor.cpp layout/layout.cpp popup/popup.cpp menu/menu.cpp progress/progress.cpp qmag/qmag.cpp xml/tagreader
.)l-with-features/tagreader.cpp
movies/main.cpp customlayout/main.cpp
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QLabel::QLabel ( QWidget * buddy, const QString & text, QWidget * parent, const char * name=0, WFlags f=0 )"
Constructs a label with a text and a buddy.
.PP
The \fItext\fR is set with setText(). The \fIbuddy\fR is set with setBuddy().
.PP
The \fIparent, name\fR and \fIf\fR arguments are passed to the QFrame constructor.
.PP
See also setText(), setBuddy(), setAlignment(), setFrameStyle() and setIndent().
.SH "QLabel::QLabel ( QWidget * parent, const char * name=0, WFlags f=0 )"
Constructs an empty label.
.PP
The \fIparent, name\fR and \fIf\fR arguments are passed to the QFrame constructor.
.PP
See also setAlignment(), setFrameStyle() and setIndent().
.SH "QLabel::QLabel ( const QString & text, QWidget * parent, const char * name=0, WFlags f=0 )"
Constructs a label with a text. The \fItext\fR is set with setText().
.PP
The \fIparent, name\fR and \fIf\fR arguments are passed to the QFrame constructor.
.PP
See also setText(), setAlignment(), setFrameStyle() and setIndent().
.SH "QLabel::~QLabel ()"
Destructs the label.
.SH "int QLabel::alignment () const"
Returns the alignment setting.
.PP
See also setAlignment().
.SH "bool QLabel::autoResize () const"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Returns TRUE if auto-resizing is enabled, or FALSE if auto-resizing is disabled.
.PP
Auto-resizing is disabled by default.
.PP
See also setAutoResize().
.SH "QWidget * QLabel::buddy () const"
Returns the buddy of this label, or 0 if no buddy is currently set.
.PP
See also setBuddy().
.SH "void QLabel::clear () \fC[slot]\fR"
Clears any label contents. Equivalent with setText( "" ).
.SH "void QLabel::drawContents ( QPainter * p ) \fC[virtual protected]\fR"
Draws the label contents using the painter \fIp.\fR
.PP
Reimplemented from QFrame.
.SH "void QLabel::drawContentsMask ( QPainter * p ) \fC[virtual protected]\fR"
Draws the label contents mask using the painter \fIp.\fR Used only in transparent mode.
.PP
See also QWidget::setAutoMask();.
.PP
Reimplemented from QFrame.
.SH "void QLabel::fontChange ( const QFont & ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "bool QLabel::hasScaledContents () const"
Returns whether the label will scale its contents to fill all available space.
.PP
See also setScaledContents().
.SH "int QLabel::heightForWidth ( int w ) const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "int QLabel::indent () const"
Returns the indent of the label.
.PP
See also setIndent().
.SH "QSize QLabel::minimumSizeHint () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QMovie* QLabel::movie () const"
If the label contains a movie, returns a pointer to it. Otherwise, returns 0.
.PP
See also setMovie().
.SH "QPixmap * QLabel::pixmap () const"
If the label contains a pixmap, returns a pointer to it. Otherwise, returns 0.
.PP
See also setPixmap().
.SH "void QLabel::resizeEvent ( QResizeEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLabel::setAlignment ( int alignment ) \fC[virtual]\fR"
Sets the alignment of the label contents.
.PP
The \fIalignment\fR must be a bitwise OR of Qt::AlignmentFlags values. The \fCWordBreak, ExpandTabs, SingleLine\fR and \fCShowPrefix\fR flags apply only if the label contains a plain text, and are otherwise ignored. The \fCDontClip\fR flag is always ignored.
.PP
If the label has a buddy, the \fCShowPrefix\fR flag is forced to TRUE.
.PP
The default alignment is \fCAlignLeft | AlignVCenter | ExpandTabs\fR if the label doesn't have a buddy and \fCAlignLeft | AlignVCenter | ExpandTabs | ShowPrefix \fR if the label has a buddy.
.PP
See also Qt::AlignmentFlags, alignment(), setBuddy() and setText().
.PP
Examples:
.(l
cursor/cursor.cpp layout/layout.cpp popup/popup.cpp qmag/qmag.cpp customlayout/main.cpp
.)l
.SH "void QLabel::setAutoMask ( bool b ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLabel::setAutoResize ( bool enable ) \fC[virtual]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.PP
Enables auto-resizing if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
When auto-resizing is enabled, the label will resize itself to fit the contents whenever the contents change. The top left corner is not moved. This is useful for QLabel widgets that are not managed by a QLayout (e.g. top-level widgets).
.PP
Auto-resizing is disabled by default.
.PP
See also autoResize(), adjustSize() and sizeHint().
.SH "void QLabel::setBuddy ( QWidget * buddy ) \fC[virtual]\fR"
Sets the buddy of this label to \fIbuddy.\fR
.PP
When the user presses the accelerator key indicated by this label, the keyboard focus is transferred to the label's buddy widget.
.PP
The buddy mechanism is only available for QLabels that contain a plain text in which one letter is prefixed with '&'. It is this letter that is set as the accelerator key. The letter is displayed underlined, and the '&' is not displayed (i.e. the \fCShowPrefix\fR alignment flag is turned on; see setAlignment()).
.PP
In a dialog, you might create two data entry widgets and a label for each, and set up the geometry layout so each label is just to the left of its data entry widget (its "buddy"), somewhat like this:
.PP
.nf
.br
    QLineEdit *nameEd  = new QLineEdit( this );
.br
    QLabel    *nameLb  = new QLabel( "&Name:", this );
.br
    nameLb->setBuddy( nameEd );
.br
    QLineEdit *phoneEd = new QLineEdit( this );
.br
    QLabel    *phoneLb = new QLabel( "&Phone:", this );
.br
    phoneLb->setBuddy( phoneEd );
.br
    // ( layout setup not shown )
.fi
.PP
With the code above, the focus jumps to the Name field when the user presses Alt-N, and to the Phone field when the user presses Alt-P.
.PP
To unset a previously set buddy, call this function with \fIbuddy\fR set to 0.
.PP
See also buddy(), setText(), QAccel and setAlignment().
.SH "void QLabel::setIndent ( int indent )"
Sets the indent of the label to \fIindent\fR pixels.
.PP
The indent applies to the left edge if alignment() is \fCAlignLeft,\fR to the right edge if alignment() is \fCAlignRight,\fR to the top edge if alignment() is \fCAlignTop,\fR and to to the bottom edge if alignment() is \fCAlignBottom.\fR
.PP
If \fIindent\fR is negative, or if no indent has been set, the label computes the effective indent as follows: If frameWidth() is 0, the effective indent becomes 0. If frameWidth() is greater than 0, the effective indent becomes half the width of the "x" character of the widget's current font().
.PP
If \fIindent\fR is non-negative, the effective indent is \fIindent\fR pixels.
.PP
See also indent(), setAlignment(), frameWidth() and font().
.PP
Examples:
.(l
movies/main.cpp
.)l
.SH "void QLabel::setMovie ( const QMovie & movie ) \fC[virtual slot]\fR"
Sets the label contents to \fImovie.\fR Any previous content is cleared.
.PP
The buddy accelerator, if any, is disabled.
.PP
The label resizes itself if auto-resizing is enabled.
.PP
See also movie() and setBuddy().
.SH "void QLabel::setNum ( double num ) \fC[virtual slot]\fR"
Sets the label contents to a plain text containing the printed value of \fInum.\fR Does nothing if this is equal to the current contents of the label. Any previous content is cleared.
.PP
The buddy accelerator, if any, is disabled.
.PP
The label resizes itself if auto-resizing is enabled.
.PP
See also setText(), QString::setNum() and setBuddy().
.SH "void QLabel::setNum ( int num ) \fC[virtual slot]\fR"
Sets the label contents to a plain text containing the printed value of \fInum.\fR Does nothing if this is equal to the current contents of the label. Any previous content is cleared.
.PP
The buddy accelerator, if any, is disabled.
.PP
The label resizes itself if auto-resizing is enabled.
.PP
See also setText(), QString::setNum() and setBuddy().
.SH "void QLabel::setPixmap ( const QPixmap & pixmap ) \fC[virtual slot]\fR"
Sets the label contents to \fIpixmap.\fR Any previous content is cleared.
.PP
The buddy accelerator, if any, is disabled.
.PP
The label resizes itself if auto-resizing is enabled.
.PP
See also pixmap() and setBuddy().
.SH "void QLabel::setScaledContents ( bool enable )"
When called with \fIenable\fR == TRUE, and the label shows a pixmap, it will scale the pixmap to fill available space.
.PP
See also hasScaledContents().
.SH "void QLabel::setText ( const QString & text ) \fC[virtual slot]\fR"
Sets the label contents to \fItext,\fR or does nothing if \fItext\fR is equal to the current contents of the label. Any previous content is cleared.
.PP
\fItext\fR will be interpreted either as a plain text or as a rich text, depending on the text format setting; see setTextFormat(). The default setting is \fCAutoText,\fR i.e. QLabel will try to auto-detect the format of \fItext.\fR
.PP
If \fItext\fR is interpreted as a plain text, and a buddy has been set, the buddy accelerator key is updated from the new text.
.PP
The label resizes itself if auto-resizing is enabled.
.PP
Note that Qlabel is well suited to display small rich text documents only. For large documents, use QTextView instead. It will flicker less on resize and can also provide a scrollbar if necessary.
.PP
See also text(), setTextFormat(), setBuddy() and setAlignment().
.PP
Examples:
.(l
cursor/cursor.cpp layout/layout.cpp popup/popup.cpp qmag/qmag.cpp customlayout/main.cpp
.)l
.SH "void QLabel::setTextFormat ( Qt::TextFormat format )"
Sets the text format to \fIformat.\fR See the Qt::TextFormat enum for an explanation of the possible options.
.PP
The default format is \fCAutoText.\fR
.PP
See also textFormat() and setText().
.SH "QSize QLabel::sizeHint () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Examples:
.(l
layout/layout.cpp
.)l
.PP
Reimplemented from QWidget.
.SH "QSizePolicy QLabel::sizePolicy () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QString QLabel::text () const"
Returns the label text. If the content is a plain or a rich text, this is the string that was passed to setText(). Otherwise, it is an empty/null string.
.PP
See also setText(), setNum() and clear().
.SH "Qt::TextFormat QLabel::textFormat() const"
Returns the current text format.
.PP
See also  setTextFormat().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlabel.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlabel.3qt) and the Qt
version (2.3.2).
