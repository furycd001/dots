'\" t
.TH QLineEdit 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QLineEdit \- One-line text editor
.br
.PP
\fC#include <qlineedit.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQLineEdit\fR ( QWidget * " "parent" ", const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fBQLineEdit\fR ( const QString &, QWidget * " "parent" ", const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fB~QLineEdit\fR () "
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "QString \fBdisplayText\fR () const"
.br
.ti -1c
.BI "int \fBmaxLength\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetMaxLength\fR ( int ) "
.br
.ti -1c
.BI "virtual void \fBsetFrame\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBframe\fR () const"
.br
.ti -1c
.BI "enum \fBEchoMode\fR { Normal, NoEcho, Password }"
.br
.ti -1c
.BI "virtual void \fBsetEchoMode\fR ( EchoMode ) "
.br
.ti -1c
.BI "EchoMode \fBechoMode\fR () const"
.br
.ti -1c
.BI "void \fBsetReadOnly\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBisReadOnly\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetValidator\fR ( const QValidator * ) "
.br
.ti -1c
.BI "const QValidator* \fBvalidator\fR () const"
.br
.ti -1c
.BI "virtual QSize \fBsizeHint\fR () const"
.br
.ti -1c
.BI "virtual QSize \fBminimumSizeHint\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSelection\fR ( int, int ) "
.br
.ti -1c
.BI "virtual void \fBsetCursorPosition\fR ( int ) "
.br
.ti -1c
.BI "int \fBcursorPosition\fR () const"
.br
.ti -1c
.BI "bool \fBvalidateAndSet\fR ( const QString &, int, int, int ) "
.br
.ti -1c
.BI "void \fBcut\fR () "
.br
.ti -1c
.BI "void \fBcopy\fR () const"
.br
.ti -1c
.BI "void \fBpaste\fR () "
.br
.ti -1c
.BI "void \fBsetAlignment\fR ( int flag ) "
.br
.ti -1c
.BI "int \fBalignment\fR () const"
.br
.ti -1c
.BI "void \fBcursorLeft\fR ( bool " "mark" ", int " "steps" " = 1 ) "
.br
.ti -1c
.BI "void \fBcursorRight\fR ( bool " "mark" ", int " "steps" " = 1 ) "
.br
.ti -1c
.BI "void \fBcursorWordForward\fR ( bool mark ) "
.br
.ti -1c
.BI "void \fBcursorWordBackward\fR ( bool mark ) "
.br
.ti -1c
.BI "void \fBbackspace\fR () "
.br
.ti -1c
.BI "void \fBdel\fR () "
.br
.ti -1c
.BI "void \fBhome\fR ( bool mark ) "
.br
.ti -1c
.BI "void \fBend\fR ( bool mark ) "
.br
.ti -1c
.BI "void \fBsetEdited\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBedited\fR () const"
.br
.ti -1c
.BI "bool \fBhasMarkedText\fR () const"
.br
.ti -1c
.BI "QString \fBmarkedText\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetText\fR ( const QString & ) "
.br
.ti -1c
.BI "void \fBselectAll\fR () "
.br
.ti -1c
.BI "void \fBdeselect\fR () "
.br
.ti -1c
.BI "void \fBclearValidator\fR () "
.br
.ti -1c
.BI "void \fBinsert\fR ( const QString & ) "
.br
.ti -1c
.BI "void \fBclear\fR () "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBtextChanged\fR ( const QString & ) "
.br
.ti -1c
.BI "void \fBreturnPressed\fR () "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBkeyPressEvent\fR ( QKeyEvent * ) "
.br
.ti -1c
.BI "void \fBrepaintArea\fR ( int, int ) "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
QString	text	text	setText
int	maxLength	maxLength	setMaxLength
bool	frame	frame	setFrame
EchoMode	echoMode	echoMode	setEchoMode
QString	displayText	displayText
int	cursorPosition	cursorPosition	setCursorPosition
Alignment	alignment	alignment	setAlignment
bool	edited	edited	setEdited
bool	hasMarkedText	hasMarkedText
QString	markedText	markedText
.TE
.fi

.SH DESCRIPTION
The QLineEdit widget is a one-line text editor.
.PP
A line edit allows the user to enter and edit a single line of plain text, with a useful collection of editing functions, including undo & redo, cut & paste, and drag & drop.
.PP
By changing the echoMode() of a line edit it can also be used as a "write-only" field, for inputs such as passwords.
.PP
The length of the field can be constrained to a maxLength(), or the value can be arbitrarily constrained by setting a validator().
.PP
A closely related class is QMultiLineEdit which allows multi-line editing.
.PP
The default QLineEdit object has its own frame as specified by the Windows/Motif style guides, you can turn off the frame by calling setFrame( FALSE ).
.PP
The default key bindings are described in keyPressEvent(). A right-mouse-button menu presents a number of the editing commands to the user.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QMultiLineEdit, QLabel, QComboBox, GUI Design Handbook: Field, Entry, and GUI Design Handbook: Field, Required.
.PP
Examples:
.(l
xform/xform.cpp layout/layout.cpp popup/popup.cpp
.)l
.SS "Member Type Documentation"
.SH "QLineEdit::EchoMode"
This enum type describes how QLineEdit displays its contents. The defined values are:
.TP
\fCNormal\fR - display characters as they are entered. This is the default.
.TP
\fCNoEcho\fR - do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
.TP
\fCPassword\fR - display asterisks instead of the characters actually entered.
.PP
See also setEchoMode(), echoMode() and QMultiLineEdit::EchoMode.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QLineEdit::QLineEdit ( QWidget * parent, const char * name=0 )"
Constructs a line edit with no text.
.PP
The maximum text length is set to 32767 characters.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.PP
See also setText() and setMaxLength().
.SH "QLineEdit::QLineEdit ( const QString & contents, QWidget * parent, const char * name=0 )"
Constructs a line edit containing the text \fIcontents.\fR
.PP
The cursor position is set to the end of the line and the maximum text length to 32767 characters.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.PP
See also text() and setMaxLength().
.SH "QLineEdit::~QLineEdit ()"
Destructs the line edit.
.SH "int QLineEdit::alignment () const"
Returns the alignment of the line edit. Possible Values are Qt::AlignLeft, Qt::AlignRight and Qt::Align(H)Center.
.PP
See also setAlignment() and Qt::AlignmentFlags.
.SH "void QLineEdit::backspace ()"
Deletes the character to the left of the text cursor and moves the cursor one position to the left. If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the marked text and the marked text will be removed.
.PP
See also del().
.SH "void QLineEdit::clear () \fC[slot]\fR"
Syntactic sugar for setText( "" ), provided to match no-argument signals.
.SH "void QLineEdit::clearValidator () \fC[slot]\fR"
This slot is equivalent to setValidator( 0 ).
.SH "void QLineEdit::copy () const"
Copies the marked text to the clipboard, if there is any and if echoMode() is Normal.
.PP
See also cut() and paste().
.SH "void QLineEdit::cursorLeft ( bool mark, int steps = 1 )"
Moves the cursor leftwards one or more characters.
.PP
See also cursorRight().
.SH "int QLineEdit::cursorPosition () const"
Returns the current cursor position for this line edit.
.PP
See also setCursorPosition().
.SH "void QLineEdit::cursorRight ( bool mark, int steps = 1 )"
Moves the cursor rightwards one or more characters.
.PP
See also cursorLeft().
.SH "void QLineEdit::cursorWordBackward ( bool mark )"
Moves the cursor one word to the left. If \fImark\fR is TRUE, the text is marked.
.PP
See also cursorWordForward().
.SH "void QLineEdit::cursorWordForward ( bool mark )"
Moves the cursor one word to the right. If \fImark\fR is TRUE, the text is marked.
.PP
See also cursorWordBackward().
.SH "void QLineEdit::cut ()"
Copies the marked text to the clipboard and deletes it, if there is any.
.PP
If the current validator disallows deleting the marked text, cut() will copy it but not delete it.
.PP
See also copy() and paste().
.SH "void QLineEdit::del ()"
Deletes the character on the right side of the text cursor. If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the marked text and the marked text will be removed.
.PP
See also backspace().
.SH "void QLineEdit::deselect () \fC[slot]\fR"
Deselects all text (i.e. removes marking) and leaves the cursor at the current position.
.SH "QString QLineEdit::displayText () const"
Returns the text that is displayed. This is normally the same as text(), but can be e.g. "*****" if EchoMode is Password or" " if it is NoEcho.
.PP
See also setEchoMode(), text() and EchoMode.
.SH "void QLineEdit::dragEnterEvent ( QDragEnterEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::dropEvent ( QDropEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QLineEdit::EchoMode QLineEdit::echoMode() const"
Returns the echo mode of the line edit.
.PP
See also setEchoMode() and EchoMode.
.SH "bool QLineEdit::edited () const"
Returns the edited flag of the line edit. If this returns FALSE, the line edit's contents have not been changed since the construction of the QLineEdit (or the last call to either setText() or setEdited( FALSE ), if any). If it returns true, the contents have been edited, or setEdited( TRUE ) has been called.
.PP
See also setEdited().
.SH "void QLineEdit::end ( bool mark )"
Moves the text cursor to the right end of the line. If mark is TRUE text will be marked towards the last position, if not any marked text will be unmarked if the cursor is moved.
.PP
See also home().
.SH "bool QLineEdit::event ( QEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "void QLineEdit::focusInEvent ( QFocusEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::focusOutEvent ( QFocusEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "bool QLineEdit::frame () const"
Returns TRUE if the line edit draws itself inside a frame, FALSE if it draws itself without any frame.
.PP
The default is to use a frame.
.PP
See also setFrame().
.SH "bool QLineEdit::hasMarkedText () const"
Returns TRUE if part of the text has been marked by the user (e.g. by clicking and dragging).
.PP
See also markedText().
.SH "void QLineEdit::home ( bool mark )"
Moves the text cursor to the left end of the line. If mark is TRUE text will be marked towards the first position, if not any marked text will be unmarked if the cursor is moved.
.PP
See also end().
.SH "void QLineEdit::insert ( const QString & newText ) \fC[slot]\fR"
Removes any selected text, inserts \fInewText,\fR validates the result and if it is valid, sets it as the new contents of the line edit.
.SH "bool QLineEdit::isReadOnly () const"
Returns whether the line-edit is read-only.
.PP
See also setReadOnly().
.SH "void QLineEdit::keyPressEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Converts a key press into a line edit action.
.PP
If return or enter is pressed and the current text is valid (or can be made valid by the validator), the signal returnPressed is emitted.
.PP
The default key bindings are:
.TP
\fI Left Arrow \fR Move the cursor one character leftwards.
.TP
\fI Right Arrow \fR Move the cursor one character rightwards.
.TP
\fI Backspace \fR Delete the character to the left of the cursor.
.TP
\fI Home \fR Move the cursor to the beginning of the line.
.TP
\fI End \fR Move the cursor to the end of the line.
.TP
\fI Delete \fR Delete the character to the right of the cursor.
.TP
\fI Shift - Left Arrow \fR Move and mark text one character leftwards.
.TP
\fI Shift - Right Arrow \fR Move and mark text one character rightwards.
.TP
\fI Control-A \fR Move the cursor to the beginning of the line.
.TP
\fI Control-B \fR Move the cursor one character leftwards.
.TP
\fI Control-C \fR Copy the marked text to the clipboard.
.TP
\fI Control-D \fR Delete the character to the right of the cursor.
.TP
\fI Control-E \fR Move the cursor to the end of the line.
.TP
\fI Control-F \fR Move the cursor one character rightwards.
.TP
\fI Control-H \fR Delete the character to the left of the cursor.
.TP
\fI Control-K \fR Delete to end of line
.TP
\fI Control-V \fR Paste the clipboard text into line edit.
.TP
\fI Control-X \fR Move the marked text to the clipboard.
.TP
\fI Control-Z \fR Undo the last operation.
.TP
\fI Control-Y \fR Redo the last undone operation. In addition, the following key bindings are used on Windows:
.TP
\fI Shift - Delete \fR Cut the marked text, copy to clipboard
.TP
\fI Shift - Insert \fR Paste the clipboard text into line edit
.TP
\fI Control - Insert \fR Copy the marked text to the clipboard
.PP
All other keys with valid ASCII codes insert themselves into the line.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::leaveEvent ( QEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QString QLineEdit::markedText () const"
Returns the text marked by the user (e.g. by clicking and dragging), or a null string if no text is marked.
.PP
See also hasMarkedText().
.SH "int QLineEdit::maxLength () const"
Returns the maximum permitted length of the text in the editor.
.PP
See also setMaxLength().
.SH "QSize QLineEdit::minimumSizeHint () const \fC[virtual]\fR"
Returns a minimum size for the line edit.
.PP
The width returned is enough for at least one character.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::mouseDoubleClickEvent ( QMouseEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::mouseMoveEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::mousePressEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::mouseReleaseEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::paintEvent ( QPaintEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::paste ()"
Inserts the clipboard's text at the cursor position, deleting any previous marked text.
.PP
If the end result is not acceptable for the current validator, nothing happens.
.PP
See also copy() and cut().
.SH "void QLineEdit::repaintArea ( int from, int to ) \fC[protected]\fR"
Repaints all characters from \fIfrom\fR to \fIto.\fR If cursorPos is between from and to, ensures that cursorPos is visible.
.SH "void QLineEdit::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::returnPressed () \fC[signal]\fR"
This signal is emitted when the return or enter key is pressed.
.SH "void QLineEdit::selectAll () \fC[slot]\fR"
Selects all text (i.e. marks it) and moves the cursor to the end. This is useful when a default value has been inserted, since if the user types before clicking on the widget the selected text will be erased.
.SH "void QLineEdit::setAlignment ( int flag )"
Sets the alignment of the line edit. Possible Values are Qt::AlignLeft, Qt::AlignRight and Qt::Align(H)Center - see Qt::AlignmentFlags.
.PP
See also alignment().
.SH "void QLineEdit::setCursorPosition ( int newPos ) \fC[virtual]\fR"
Sets the cursor position for this line edit to \fInewPos\fR and repaints accordingly.
.PP
See also cursorPosition().
.SH "void QLineEdit::setEchoMode ( EchoMode mode )"
Sets the echo mode of the line edit widget.
.PP
The echo modes available are:
.TP
\fCNormal\fR - display characters as they are entered. This is the default.
.TP
\fCNoEcho\fR - do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
.TP
\fCPassword\fR - display asterisks instead of the characters actually entered.
.PP
The widget's display, and the ability to copy or drag the text is affected by this setting.
.PP
See also echoMode(), EchoMode and displayText().
.SH "void QLineEdit::setEdited ( bool on )"
Sets the edited flag of this line edit to \fIon.\fR The edited flag is never read by QLineEdit, and is changed to TRUE whenever the user changes its contents.
.PP
This is useful e.g. for things that need to provide a default value, but cannot find the default at once. Just open the line edit without the best default and when the default is known, check the edited() return value and set the line edit's contents if the user has not started editing the line edit.
.PP
See also edited().
.SH "void QLineEdit::setEnabled ( bool e ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QLineEdit::setFont ( const QFont & f ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QLineEdit::setFrame ( bool enable ) \fC[virtual]\fR"
Sets the line edit to draw itself inside a frame if \fIenable\fR is TRUE, and to draw itself without any frame if \fIenable\fR is FALSE.
.PP
The default is TRUE.
.PP
See also frame().
.SH "void QLineEdit::setMaxLength ( int m ) \fC[virtual]\fR"
Set the maximum length of the text in the editor. If the text is too long, it is chopped off at the limit. Any marked text will be unmarked. The cursor position is set to 0 and the first part of the string is shown.
.PP
See also maxLength().
.SH "void QLineEdit::setPalette ( const QPalette & p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QLineEdit::setReadOnly ( bool enable )"
Enables or disables read-only mode, where the user can cut-and-paste or drag-and-drop the text, but cannot edit it. They never see a cursor in this case.
.PP
See also setEnabled() and isReadOnly().
.SH "void QLineEdit::setSelection ( int start, int length ) \fC[virtual]\fR"
Sets the marked area of this line edit to start at \fIstart\fR and be \fIlength\fR characters long.
.SH "void QLineEdit::setText ( const QString & text ) \fC[virtual slot]\fR"
Sets the line edit text to \fItext,\fR clears the selection and moves the cursor to the end of the line.
.PP
If necessary the text is truncated to maxLength().
.PP
See also text().
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QLineEdit::setValidator ( const QValidator * v ) \fC[virtual]\fR"
Sets this line edit to accept input only as accepted by \fIv,\fR allowing arbitrary constraints on the text which the user can edit.
.PP
If \fIv\fR == 0, remove the current input validator. The default is no input validator (ie. any input is accepted up to maxLength()).
.PP
See also validator() and QValidator.
.SH "QSize QLineEdit::sizeHint () const \fC[virtual]\fR"
Returns a recommended size for the widget.
.PP
The width returned is enough for a few characters, typically 15 to 20.
.PP
Reimplemented from QWidget.
.SH "QSizePolicy QLineEdit::sizePolicy () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QString QLineEdit::text () const"
Returns the text in the line.
.PP
See also setText().
.SH "void QLineEdit::textChanged ( const QString & ) \fC[signal]\fR"
This signal is emitted every time the text changes. The argument is the new text.
.SH "bool QLineEdit::validateAndSet ( const QString & newText, int newPos, int newMarkAnchor, int newMarkDrag )"
Validates and perhaps sets this line edit to contain \fInewText\fR with the cursor at position newPos, with marked text from \fInewMarkAnchor\fR to \fInewMarkDrag.\fR Returns TRUE if it changes the line edit and FALSE if it doesn't.
.PP
Linebreaks in \fInewText\fR are converted to spaces, and it is truncated to maxLength() before testing its validity.
.PP
Repaints and emits textChanged() if appropriate.
.SH "const QValidator * QLineEdit::validator () const"
Returns a pointer to the current input validator, or 0 if no validator has been set.
.PP
See also  setValidator().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlineedit.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlineedit.3qt) and the Qt
version (2.3.2).
