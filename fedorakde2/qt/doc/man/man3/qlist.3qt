'\" t
.TH QList 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QList \- Template class that provides doubly linked lists
.br
.PP
\fC#include <qlist.h>\fR
.PP
Inherits QGList.
.PP
Inherited by QStrList.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQList\fR () "
.br
.ti -1c
.BI "\fBQList\fR ( const QList<type> & list ) "
.br
.ti -1c
.BI "\fB~QList\fR () "
.br
.ti -1c
.BI "QList<type>& \fBoperator=\fR ( const QList<type> & list ) "
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QList<type> & list ) const"
.br
.ti -1c
.BI "virtual uint \fBcount\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "bool \fBinsert\fR ( uint " "index" ", const type * item ) "
.br
.ti -1c
.BI "void \fBinSort\fR ( const type * item ) "
.br
.ti -1c
.BI "void \fBprepend\fR ( const type * item ) "
.br
.ti -1c
.BI "void \fBappend\fR ( const type * item ) "
.br
.ti -1c
.BI "bool \fBremove\fR ( uint index ) "
.br
.ti -1c
.BI "bool \fBremove\fR () "
.br
.ti -1c
.BI "bool \fBremove\fR ( const type * item ) "
.br
.ti -1c
.BI "bool \fBremoveRef\fR ( const type * item ) "
.br
.ti -1c
.BI "void \fBremoveNode\fR ( QLNode * node ) "
.br
.ti -1c
.BI "bool \fBremoveFirst\fR () "
.br
.ti -1c
.BI "bool \fBremoveLast\fR () "
.br
.ti -1c
.BI "type* \fBtake\fR ( uint index ) "
.br
.ti -1c
.BI "type* \fBtake\fR () "
.br
.ti -1c
.BI "type* \fBtakeNode\fR ( QLNode * node ) "
.br
.ti -1c
.BI "virtual void \fBclear\fR () "
.br
.ti -1c
.BI "void \fBsort\fR () "
.br
.ti -1c
.BI "int \fBfind\fR ( const type * item ) "
.br
.ti -1c
.BI "int \fBfindNext\fR ( const type * item ) "
.br
.ti -1c
.BI "int \fBfindRef\fR ( const type * item ) "
.br
.ti -1c
.BI "int \fBfindNextRef\fR ( const type * item ) "
.br
.ti -1c
.BI "uint \fBcontains\fR ( const type * item ) const"
.br
.ti -1c
.BI "uint \fBcontainsRef\fR ( const type * item ) const"
.br
.ti -1c
.BI "type* \fBat\fR ( uint index ) "
.br
.ti -1c
.BI "int \fBat\fR () const"
.br
.ti -1c
.BI "type* \fBcurrent\fR () const"
.br
.ti -1c
.BI "QLNode* \fBcurrentNode\fR () const"
.br
.ti -1c
.BI "type* \fBgetFirst\fR () const"
.br
.ti -1c
.BI "type* \fBgetLast\fR () const"
.br
.ti -1c
.BI "type* \fBfirst\fR () "
.br
.ti -1c
.BI "type* \fBlast\fR () "
.br
.ti -1c
.BI "type* \fBnext\fR () "
.br
.ti -1c
.BI "type* \fBprev\fR () "
.br
.ti -1c
.BI "void \fBtoVector\fR ( QGVector * vec ) const"
.br
.in -1c
.SH DESCRIPTION
The QList class is a template class that provides doubly linked lists.
.PP
In Qt 2.0 QList is only implemented as a template class. Define a template instance QList<X> to create a list that operates on pointers to X, or X*.
.PP
Example:
.PP
.nf
.br
    #include <qlist.h>
.br
    #include <qstring.h>
.br
    #include <stdio.h>
.br
.br
    class Employee
.br
    {
.br
    public:
.br
        Employee( const QString& name, int salary ) { n=name; s=salary; }
.br
        QString     name()   const               { return n; }
.br
        int         salary() const               { return s; }
.br
    private:
.br
        QString     n;
.br
        int         s;
.br
    };
.br
.br
    void main()
.br
    {
.br
        QList<Employee> list;           // list of pointers to Employee
.br
        list.setAutoDelete( TRUE );     // delete items when they are removed
.br
.br
        list.append( new Employee("Bill", 50000) );
.br
        list.append( new Employee("Steve",80000) );
.br
        list.append( new Employee("Ron",  60000) );
.br
.br
        Employee *emp;
.br
        for ( emp=list.first(); emp != 0; emp=list.next() )
.br
            printf( "%s earns %d\\n", emp->name().latin1(), emp->salary() );
.br
    }
.fi
.PP
Program output:
.PP
.nf
.br
        Bill earns 50000
.br
        Steve earns 80000
.br
        Ron earns 60000
.fi
.PP
The list class is indexable and has a current index and a current item. The first item corresponds to index 0. The current index is -1 if the current item is null.
.PP
QList has several member functions for traversing the list, but using a QListIterator can be more practical. Multiple list iterators may traverse the same list, independent of each other and independent of the current list item.
.PP
In the example above, we make the call setAutoDelete(TRUE). Enabling auto-deletion tells the list to delete items that are removed from the list. The default is to not delete items when they are removed, but that would cause a memory leak in our example since we have no other references to the list items.
.PP
List items are stored as \fCvoid*\fR in an internal QLNode, which also holds pointers to the next and previous list items. The functions currentNode(), removeNode() and takeNode() operate directly on the QLNode, but they should be used with care.
.PP
When inserting an item into a list, only the pointer is copied, not the item itself. This is called a shallow copy. It is possible to make the list copy all of the item's data (known as a deep copy) when an item is inserted. insert(), inSort() and append() call the virtual function QCollection::newItem() for the item to be inserted. Inherit a list and reimplement it if you want deep copies.
.PP
When removing an item from a list, the virtual function QCollection::deleteItem() is called. QList's default implementation is to delete the item if auto-deletion is enabled.
.PP
The virtual function QGList::compareItems() can be reimplemented to compare two list items. This function is called from all list functions that need to compare list items, for instance remove(const type*). If you only want to deal with pointers, there are functions that compare pointers instead, for instance removeRef(const type*). These functions are somewhat faster than those that call compareItems().
.PP
The QStrList class in qstrlist.h is a list of \fCchar*.\fR QStrList is a good example of a list that reimplements newItem(), deleteItem() and compareItems()
.PP
See also QListIterator and Collection Classes
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QList::QList ()"
Constructs an empty list.
.SH "QList::QList ( const QList<type> & list )"
Constructs a copy of \fIlist.\fR
.PP
Each item in \fIlist\fR is appended to this list. Only the pointers are copied (shallow copy).
.SH "QList::~QList ()"
Removes all items from the list and destroys the list.
.PP
All list iterators that access this list will be reset.
.PP
See also setAutoDelete().
.SH "void QList::append ( const type * item )"
Inserts the \fIitem\fR at the end of the list.
.PP
The inserted item becomes the current list item. This is equivalent to \fCinsert(count(),item).\fR
.PP
The \fIitem\fR must not be a null pointer.
.PP
See also insert(), current() and prepend().
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH "int QList::at () const"
Returns the index of the current list item. The returned value is -1 if the current item is null.
.PP
See also current().
.SH "type * QList::at ( uint index )"
Returns a pointer to the item at position \fIindex\fR in the list, or null if the index is out of range.
.PP
Sets the current list item to this item if \fIindex\fR is valid. The valid range is \fC0 .. (count() - 1)\fR inclusive.
.PP
This function is very efficient. It starts scanning from the first item, last item or current item, whichever is closest to \fIindex.\fR
.PP
See also current().
.SH "void QList::clear () \fC[virtual]\fR"
Removes all items from the list.
.PP
The removed items are deleted if auto-deletion is enabled.
.PP
All list iterators that access this list will be reset.
.PP
See also remove(), take() and setAutoDelete().
.PP
Reimplemented from QCollection.
.SH "uint QList::contains ( const type * item ) const"
Counts and returns the number of occurrences of \fIitem\fR in the list.
.PP
The compareItems() function is called when looking for the \fIitem\fR in the list. If compareItems() is not reimplemented, it is more efficient to call containsRef().
.PP
Does not affect the current list item.
.PP
See also containsRef() and compareItems().
.SH "uint QList::containsRef ( const type * item ) const"
Counts and returns the number of occurrences of \fIitem\fR in the list.
.PP
Calling this function is must faster than contains(), because contains() compares \fIitem\fR with each list item using compareItems(). This function only compares the pointers.
.PP
Does not affect the current list item.
.PP
See also contains().
.SH "uint QList::count () const \fC[virtual]\fR"
Returns the number of items in the list.
.PP
See also isEmpty().
.PP
Reimplemented from QCollection.
.SH "type * QList::current () const"
Returns a pointer to the current list item. The current item may be null (implies that the current index is -1).
.PP
See also at().
.SH "QLNode * QList::currentNode () const"
Returns a pointer to the current list node.
.PP
The node can be kept and removed later using removeNode(). The advantage is that the item can be removed directly without searching the list.
.PP
\fBWarning:\fR Do not call this function unless you are an expert.
.PP
See also removeNode(), takeNode() and current().
.SH "int QList::find ( const type * item )"
Finds the first occurrence of \fIitem\fR in the list.
.PP
If the item is found, the list sets the current item to point to the found item and returns the index of this item. If the item is not found, the list sets the current item to null, the current index to -1 and returns -1.
.PP
The compareItems() function is called when searching for the item in the list. If compareItems() is not reimplemented, it is more efficient to call findRef().
.PP
See also findNext(), findRef(), compareItems() and current().
.SH "int QList::findNext ( const type * item )"
Finds the next occurrence of \fIitem\fR in the list, starting from the current list item.
.PP
If the item is found, the list sets the current item to point to the found item and returns the index of this item. If the item is not found, the list sets the current item to null, the current index to -1 and returns -1.
.PP
The compareItems() function is called when searching for the item in the list. If compareItems() is not reimplemented, it is more efficient to call findNextRef().
.PP
See also find(), findNextRef(), compareItems() and current().
.SH "int QList::findNextRef ( const type * item )"
Finds the next occurrence of \fIitem\fR in the list, starting from the current list item.
.PP
If the item is found, the list sets the current item to point to the found item and returns the index of this item. If the item is not found, the list sets the current item to null, the current index to -1 and returns -1.
.PP
Calling this function is must faster than findNext(), because findNext() compares \fIitem\fR with each list item using compareItems(). This function only compares the pointers.
.PP
See also findRef(), findNext() and current().
.SH "int QList::findRef ( const type * item )"
Finds the first occurrence of \fIitem\fR in the list.
.PP
If the item is found, the list sets the current item to point to the found item and returns the index of this item. If the item is not found, the list sets the current item to null, the current index to -1 and returns -1.
.PP
Calling this function is must faster than find(), because find() compares \fIitem\fR with each list item using compareItems(). This function only compares the pointers.
.PP
See also findNextRef(), find() and current().
.SH "type * QList::first ()"
Returns a pointer to the first item in the list and makes this the current list item, or null if the list is empty.
.PP
See also getFirst(), last(), next(), prev() and current().
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH "type * QList::getFirst () const"
Returns a pointer to the first item in the list, or null if the list is empty.
.PP
Does not affect the current list item.
.PP
See also first() and getLast().
.SH "type * QList::getLast () const"
Returns a pointer to the last item in the list, or null if the list is empty.
.PP
Does not affect the current list item.
.PP
See also last() and getFirst().
.SH "void QList::inSort ( const type * item )"
Inserts the \fIitem\fR at its sorted position in the list.
.PP
The sort order depends on the virtual QGList::compareItems() function. All items must be inserted with inSort() to maintain the sorting order.
.PP
The inserted item becomes the current list item.
.PP
The \fIitem\fR must not be a null pointer.
.PP
Please note that inSort is slow. If you want to insert lots of items in a list and sort after inserting then you should use sort(). inSort() takes up to O(n) compares. That means inserting n items in your list will need O(n^2) compares while sort() only needs O(n*logn) for the same task. So you inSort() only if you already have a pre-sorted list and want to insert only few additional items.
.PP
See also insert(), QGList::compareItems(), current() and sort().
.SH "bool QList::insert ( uint index, const type * item )"
Inserts the \fIitem\fR at the position \fIindex\fR in the list.
.PP
Returns TRUE if successful, or FALSE if \fIindex\fR is out of range. The valid range is \fC0 .. count()\fR inclusive. The item is appended if \fIindex\fR == count().
.PP
The inserted item becomes the current list item.
.PP
The \fIitem\fR must not be a null pointer.
.PP
See also append() and current().
.SH "bool QList::isEmpty () const"
Returns TRUE if the list is empty, i.e. count() == 0. Returns FALSE otherwise.
.PP
See also count().
.SH "type * QList::last ()"
Returns a pointer to the last item in the list and makes this the current list item, or null if the list is empty.
.PP
See also getLast(), first(), next(), prev() and current().
.SH "type * QList::next ()"
Returns a pointer to the item succeeding the current item. Returns null if the current item is null or equal to the last item.
.PP
Makes the succeeding item current. If the current item before this function call was the last item, the current item will be set to null. If the current item was null, this function does nothing.
.PP
See also first(), last(), prev() and current().
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH "QList<type> & QList::operator= ( const QList<type> & list )"
Assigns \fIlist\fR to this list and returns a reference to this list.
.PP
This list is first cleared, then each item in \fIlist\fR is appended to this list. Only the pointers are copied (shallow copy), unless newItem() has been reimplemented().
.SH "bool QList::operator== ( const QList<type> & list ) const"
Compares this list with \fIlist.\fR Retruns TRUE if the lists contain the same data, else FALSE.
.SH "void QList::prepend ( const type * item )"
Inserts the \fIitem\fR at the start of the list.
.PP
The inserted item becomes the current list item. This is equivalent to \fCinsert(0,item).\fR
.PP
The \fIitem\fR must not be a null pointer.
.PP
See also append(), insert() and current().
.SH "type * QList::prev ()"
Returns a pointer to the item preceding the current item. Returns null if the current item is null or equal to the first item.
.PP
Makes the preceding item current. If the current item before this function call was the first item, the current item will be set to null. If the current item was null, this function does nothing.
.PP
See also first(), last(), next() and current().
.SH "bool QList::remove ()"
Removes the current list item.
.PP
Returns TRUE if successful, or FALSE if the current item is null.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The item after the removed item becomes the new current list item if the removed item is not the last item in the list. If the last item is removed, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also take(), clear(), setAutoDelete(), current() and removeRef().
.SH "bool QList::remove ( const type * item )"
Removes the first occurrence of \fIitem\fR from the list.
.PP
Returns TRUE if successful, or FALSE if the item could not be found in the list.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The compareItems() function is called when searching for the item in the list. If compareItems() is not reimplemented, it is more efficient to call removeRef().
.PP
The item after the removed item becomes the new current list item if the removed item is not the last item in the list. If the last item is removed, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also removeRef(), take(), clear(), setAutoDelete(), compareItems() and current().
.SH "bool QList::remove ( uint index )"
Removes the item at position \fIindex\fR in the list.
.PP
Returns TRUE if successful, or FALSE if \fIindex\fR is out of range. The valid range is \fC0 .. (count() - 1)\fR inclusive.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The item after the removed item becomes the new current list item if the removed item is not the last item in the list. If the last item is removed, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also take(), clear(), setAutoDelete(), current() and removeRef().
.SH "bool QList::removeFirst ()"
Removes the first item from the list. Returns TRUE if successful, or FALSE if the list is empty.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The first item in the list becomes the new current list item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also removeLast(), setAutoDelete(), current() and remove().
.SH "bool QList::removeLast ()"
Removes the last item from the list. Returns TRUE if successful, or FALSE if the list is empty.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The last item in the list becomes the new current list item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also removeFirst(), setAutoDelete() and current().
.SH "void QList::removeNode ( QLNode * node )"
Removes the \fInode\fR from the list.
.PP
This node must exist in the list, otherwise the program may crash.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The first item in the list will become the new current list item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the item succeeding this item, or the preceding item if the removed item was the last item.
.PP
\fBWarning:\fR Do not call this function unless you are an expert.
.PP
See also takeNode(), currentNode(), remove() and removeRef().
.SH "bool QList::removeRef ( const type * item )"
Removes the first occurrence of \fIitem\fR from the list.
.PP
Returns TRUE if successful, or FALSE if the item cannot be found in the list.
.PP
The removed item is deleted if auto-deletion is enabled.
.PP
The list is scanned until the pointer \fIitem\fR is found. It is removed if it is found.
.PP
Equivalent to:
.PP
.nf
.br
    if ( list.findRef(item) != -1 )
.br
        list.remove();
.fi
.PP
The item after the removed item becomes the new current list item if the removed item is not the last item in the list. If the last item is removed, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the removed item will be set to point to the new current item.
.PP
See also remove(), clear(), setAutoDelete() and current().
.SH "void QList::sort ()"
Sorts the list by the result of the virtual compareItems() function.
.PP
The Heap-Sort algorithm is used for sorting. It sorts n items with O(n*log n) compares. This is the asymptotic optimal solution of the sorting problem.
.PP
If the items in your list support operator< and operator== then you might be better off with QSortedList since it implements the compareItems() function for you using these two operators.
.PP
See also inSort().
.SH "type * QList::take ()"
Takes the current item out of the list without deleting it (even if auto-deletion is enabled). Returns a pointer to the item taken out of the list, or null if the current item is null.
.PP
The item after the taken item becomes the new current list item if the taken item is not the last item in the list. If the last item is taken, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the taken item will be set to point to the new current item.
.PP
See also remove(), clear() and current().
.SH "type * QList::take ( uint index )"
Takes the item at position \fIindex\fR out of the list without deleting it (even if auto-deletion is enabled).
.PP
Returns a pointer to the item taken out of the list, or null if the index is out of range. The valid range is \fC0 .. (count() - 1)\fR inclusive.
.PP
The item after the taken item becomes the new current list item if the taken item is not the last item in the list. If the last item is taken, the new last item becomes the current item. The current item is set to null if the list becomes empty.
.PP
All list iterators that refer to the taken item will be set to point to the new current item.
.PP
See also remove(), clear() and current().
.SH "type * QList::takeNode ( QLNode * node )"
Takes the \fInode\fR out of the list without deleting its item (even if auto-deletion is enabled). Returns a pointer to the item taken out of the list.
.PP
This node must exist in the list, otherwise the program may crash.
.PP
The first item in the list becomes the new current list item.
.PP
All list iterators that refer to the taken item will be set to point to the item succeeding this item, or the preceding item if the taken item was the last item.
.PP
\fBWarning:\fR Do not call this function unless you are an expert.
.PP
See also removeNode() and currentNode().
.SH "void QList::toVector ( QGVector * vec ) const"
Stores all list items in the vector \fIvec.\fR
.PP
The vector must be have the same item type, otherwise the result
will be undefined.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlist.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlist.3qt) and the Qt
version (2.3.2).
