'\" t
.TH QMessageBox 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMessageBox \- Displays a brief message, an icon, and some buttons
.br
.PP
\fC#include <qmessagebox.h>\fR
.PP
Inherits QDialog.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBIcon\fR { NoIcon = 0, Information = 1, Warning = 2, Critical = 3 }"
.br
.ti -1c
.BI "\fBQMessageBox\fR ( QWidget * " "parent" "=0, const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fBQMessageBox\fR ( const QString & " "caption" ", const QString & " "text" ", Icon " "icon" ", int " "button0" ", int " "button1" ", int " "button2" ", QWidget * " "parent" "=0, const char * " "name" "=0, bool " "modal" "=TRUE, WFlags " "f" "=WStyle_DialogBorder ) "
.br
.ti -1c
.BI "\fB~QMessageBox\fR () "
.br
.ti -1c
.BI "enum { NoButton = 0, Ok = 1, Cancel = 2, Yes = 3, No = 4, Abort = 5, Retry = 6, Ignore = 7, ButtonMask = 0x07, Default = 0x100, Escape = 0x200, FlagMask = 0x300 }"
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "void \fBsetText\fR ( const QString & ) "
.br
.ti -1c
.BI "Icon \fBicon\fR () const"
.br
.ti -1c
.BI "void \fBsetIcon\fR ( Icon ) "
.br
.ti -1c
.BI "const QPixmap* \fBiconPixmap\fR () const"
.br
.ti -1c
.BI "void \fBsetIconPixmap\fR ( const QPixmap & ) "
.br
.ti -1c
.BI "QString \fBbuttonText\fR ( int button ) const"
.br
.ti -1c
.BI "void \fBsetButtonText\fR ( int " "button" ", const QString & ) "
.br
.ti -1c
.BI "virtual void \fBadjustSize\fR () "
.br
.ti -1c
.BI "TextFormat \fBtextFormat\fR () const"
.br
.ti -1c
.BI "void \fBsetTextFormat\fR ( TextFormat ) "
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "int \fBinformation\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", int " "button0" ", int " "button1" "=0, int " "button2" "=0 ) "
.br
.ti -1c
.BI "int \fBinformation\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int " "defaultButtonNumber" " = 0, int " "escapeButtonNumber" " = -1 ) "
.br
.ti -1c
.BI "int \fBwarning\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", int " "button0" ", int " "button1" ", int " "button2" "=0 ) "
.br
.ti -1c
.BI "int \fBwarning\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int " "defaultButtonNumber" " = 0, int " "escapeButtonNumber" " = -1 ) "
.br
.ti -1c
.BI "int \fBcritical\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", int " "button0" ", int " "button1" ", int " "button2" "=0 ) "
.br
.ti -1c
.BI "int \fBcritical\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & " "text" ", const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int " "defaultButtonNumber" " = 0, int " "escapeButtonNumber" " = -1 ) "
.br
.ti -1c
.BI "void \fBabout\fR ( QWidget * " "parent" ", const QString & " "caption" ", const QString & text ) "
.br
.ti -1c
.BI "void \fBaboutQt\fR ( QWidget * " "parent" ", const QString & caption=QString::null ) "
.br
.ti -1c
.BI "QPixmap \fBstandardIcon\fR ( Icon " "icon" ", GUIStyle style ) "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
QString	text	text	setText
Icon	icon	icon	setIcon
QPixmap	iconPixmap	iconPixmap	setIconPixmap
TextFormat	textFormat	textFormat	setTextFormat
.TE
.fi

.SH DESCRIPTION
Displays a brief message, an icon, and some buttons.
.PP
A message box is a modal dialog that displays an icon, a text and up to three push buttons. It's used for simple messages and questions.
.PP
QMessageBox provides a range of different messages, arranged roughly along two axes: Severity and complexity.
.PP
Severity is
.TP
\fCInformation\fR - for message boxes that are part of normal operation
.TP
\fCWarning\fR - for message boxes that tell the user about unusual errors
.TP
\fCCritical\fR - as Warning, but for critical errors
.PP
The message box has a different icon for each of the severity levels.
.PP
Complexity is one button (Ok) for a simple messages, or two or even three buttons for questions.
.PP
There are static functions that let you do most of the common jobs, for example:
.PP
If a program is unable to find a supporting file, but can do perfectly well without:
.PP
.nf
.br
  QMessageBox::information( this, "Application name",
.br
                            "Unable to find the user preferences file.\\n"
.br
                            "The factory default will be used instead." );
.fi
.PP
warning() can be used to tell the user about unusual errors, or errors which can't be easily fixed:
.PP
.nf
.br
  switch( QMessageBox::warning( this, "Application name",
.br
                                "Could not connect to the <mumble> server.\\n"
.br
                          "This program can't function correctly "
.br
                          "without the server.\\n\\n",
.br
                          "Try again", "Quit", 0,
.br
                          0, 1 );
.br
  case 0: // Try again or Enter
.br
      // try again
.br
      break;
.br
  case 1: // Quit or Escape
.br
      // exit
.br
      break;
.br
  }
.fi
.PP
Finally,
.PP
The text part of all message box messages can be either rich text or plain text. If you specify a rich text formatted string, it will be rendered using the default stylesheet. See QStyleSheet::defaultSheet() for details. With certain strings that contain XML meta characters, the auto-rich text detection may fail, interpreting plain text falsely as rich text. In these rare cases, use QStyleSheet::convertFromPlainText() to convert your plain text string to a visually equivalent rich text string or set the text format explicitly with setTextFormat().
.PP
Here are some examples of how to use the static member functions. After these examples you will find an overview of the non-static member functions.
.PP
If a program is unable to find a supporting file, it may perhaps do:
.PP
.nf
.br
    QMessageBox::information( this, "Application name here",
.br
                              "Unable to find the file \\"index.html\\".\\n"
.br
                              "The factory default will be used instead." );
.fi
.PP
The Microsoft Windows User Interface Guidelines strongly recommends using the application name as window caption. The message box has just one button, OK, and its text tells the user both what happened and what the program will do about it. Since the application is able to make do, the message box is just information, not a warning or a critical error.
.PP
Exiting a program is part of its normal operation, and if there are unsaved data the user probably should be asked what to do, for example like this:
.PP
.nf
.br
    switch( QMessageBox::information( this, "Application name here",
.br
                                      "The document contains unsaved work\\n"
.br
                                      "Do you want to save it before exiting?",
.br
                                      "&Save", "&Don't Save", "&Cancel",
.br
                                      0,      // Enter == button 0
.br
                                      2 ) ) { // Escape == button 2
.br
    case 0: // Save clicked, Alt-S or Enter pressed.
.br
        // save
.br
        break;
.br
    case 1: // Don't Save clicked or Alt-D pressed
.br
        // don't save but exit
.br
        break;
.br
    case 2: // Cancel clicked, Alt-C or Escape pressed
.br
        // don't exit
.br
        break;
.br
    }
.fi
.PP
Again, the application name is used as window caption, as Microsoft recommends. The Escape button cancels the entire Exit operation, and Enter/Return saves the document and exits.
.PP
Disk full errors are unusual (in a perfect world, they are) and they certainly can be hard to correct. This example uses predefined buttons instead of hardcoded button texts:
.PP
.nf
.br
    switch( QMessageBox::warning( this, "Application name here",
.br
                                  "Could not save the the user preferences,\\n"
.br
                                  "because the disk is full.  You can delete\\n"
.br
                                  "some files and press Retry, or you can\\n"
.br
                                  "abort the Save Preferences operation.",
.br
                                  QMessageBox::Retry | QMessageBox::Default,
.br
                                  QMessageBox::Abort | QMessageBox::Escape )) {
.br
    case QMessageBox::Retry: // Retry or Enter
.br
        // try again
.br
        break;
.br
    case QMessageBox::Abort: // Abort or Cancel
.br
        // abort
.br
        break;
.br
    }
.fi
.PP
The critical() function should be reserved for critical errors. In this example, errorDetails is a QString or const char*, and QString is used to concatenate several strings:
.PP
.nf
.br
    QMessageBox::critical( 0, "Application name here",
.br
                           QString("An internal error occurred. Please ") +
.br
                           "call technical support at 123456789 and report\\n"+
.br
                           "these numbers:\\n\\n" + errorDetails +
.br
                           "\\n\\n<Application> will now exit." );
.fi
.PP
QMessageBox provides a very simple About box, which displays an appropriate icon and the string you give it:
.PP
.nf
.br
     QMessageBox::about( this, "About <Application>",
.br
                         "<Application> is a <one-paragraph blurb>\\n\\n"
.br
                         "Copyright 1951-1997 Such-and-such.  "
.br
                         "<License words here.>\\n\\n"
.br
                         "For technical support, call 123456789 or see\\n"
.br
                         "http://www.such-and-such.com/Application/\\n" );
.fi
.PP
See about() for more information.
.PP
Finally, you can make a QMessageBox from scratch and set custom button texts:
.PP
.nf
.br
    QMessageBox mb( "Application name here",
.br
                    "Saving the file will overwrite the old file on disk.\\n"
.br
                    "Do you really want to save?",
.br
                    QMessageBox::Information,
.br
                    QMessageBox::Yes | QMessageBox::Default,
.br
                    QMessageBox::No,
.br
                    QMessageBox::Cancel | QMessageBox::Escape );
.br
    mb.setButtonText( QMessageBox::Yes, "Save" );
.br
    mb.setButtonText( QMessageBox::No, "Don't Save" );
.br
    switch( mb.exec() ) {
.br
        case QMessageBox::Yes:
.br
            // save and exit
.br
            break;
.br
        case QMessageBox::No:
.br
            // exit without saving
.br
            break;
.br
        case QMessageBox::Cancel:
.br
            // don't save and don't exit
.br
            break;
.br
    }
.fi
.PP
QMessageBox defines two enum types, Icon and an unnamed button type. Icon defines the \fCInformation, Warning\fR and \fCCritical\fR icons for each GUI style. It is used by the constructor, by the static member functions information(), warning() and critical(), and there is a function called standardIcon() which gives you access to the various icons.
.PP
The button types are:
.TP
\fCOk\fR - the default for single-button message boxes
.TP
\fCCancel\fR - note that this is \fInot\fR automatically Escape
.TP
\fCYes\fR
.TP
\fCNo\fR
.TP
\fCAbort\fR
.TP
\fCRetry\fR
.TP
\fCIgnore\fR
.PP
Button types can be combined with two modifiers by using OR:
.TP
\fCDefault\fR - makes pressing Enter or Return be equivalent with clicking this button. Normally used with Ok, Yes or similar.
.TP
\fCEscape\fR - makes pressing Escape be equivalent with this button. Normally used with Abort, Cancel or similar.
.PP
The text(), icon() and iconPixmap() functions provide access to the current text and pixmap of a message box, and setText(), setIcon() and setIconPixmap() lets you change it. The difference between setIcon() and setIconPixmap() is that the former accepts a QMessageBox::Icon and can it be used to set standard icons while the latter accepts a QPixmap and can be used to set custom icons.
.PP
setButtonText() and buttonText() provide access to the buttons.
.PP
QMessageBox has no signals or slots.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QDialog, Isys on error messages, and GUI Design Handbook: Message Box.
.SS "Member Type Documentation"
.SH "QMessageBox::Icon"
This type includes the following values:
.TP
\fCQMessageBox::NoIcon\fR
.TP
\fCQMessageBox::Information\fR
.TP
\fCQMessageBox::Warning\fR
.TP
\fCQMessageBox::Critical\fR
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMessageBox::QMessageBox ( QWidget * parent=0, const char * name=0 )"
Constructs a message box with no text and a button with the text "OK".
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
The \fIparent\fR and \fIname\fR arguments are passed to the QDialog constructor.
.SH "QMessageBox::QMessageBox ( const QString & caption, const QString & text, Icon icon, int button0, int button1, int button2, QWidget * parent=0, const char * name=0, bool modal=TRUE, WFlags f=WStyle_DialogBorder )"
Constructs a message box with a \fIcaption,\fR a \fItext,\fR an \fIicon\fR and up to three buttons.
.PP
The \fIicon\fR must be one of:
.TP
\fCQMessageBox::NoIcon\fR
.TP
\fCQMessageBox::Information\fR
.TP
\fCQMessageBox::Warning\fR
.TP
\fCQMessageBox::Critical\fR
.PP
Each button can have one of the following values:
.TP
\fCQMessageBox::NoButton\fR
.TP
\fCQMessageBox::Ok\fR
.TP
\fCQMessageBox::Cancel\fR
.TP
\fCQMessageBox::Yes\fR
.TP
\fCQMessageBox::No\fR
.TP
\fCQMessageBox::Abort\fR
.TP
\fCQMessageBox::Retry\fR
.TP
\fCQMessageBox::Ignore\fR
.PP
Use QMessageBox::NoButton for the later parameters to have less than three buttons in your message box.
.PP
One of the buttons can be combined with the \fCQMessageBox::Default\fR flag to make a default button.
.PP
One of the buttons can be combined with the \fCQMessageBox::Escape\fR flag to make an escape option. Hitting the Esc key on the keyboard has the same effect as clicking this button with the mouse.
.PP
Example:
.PP
.nf
.br
    QMessageBox mb( "Hardware failure",
.br
                    "Disk error detected\\nDo you want to stop?",
.br
                    QMessageBox::NoIcon,
.br
                    QMessageBox::Yes | QMessageBox::Default,
.br
                    QMessageBox::No | QMessageBox::Escape );
.br
    if ( mb.exec() == QMessageBox::No )
.br
        // try again
.fi
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
If \fImodal\fR is TRUE the message becomes modal, otherwise it becomes modeless.
.PP
The \fIparent, name, modal\fR and \fIf\fR arguments are passed to the QDialog constructor.
.PP
See also setCaption(), setText() and setIcon().
.SH "QMessageBox::~QMessageBox ()"
Destructs the message box.
.SH "void QMessageBox::about ( QWidget * parent, const QString & caption, const QString & text ) \fC[static]\fR"
Displays a simple about box with window caption \fIcaption\fR and body text \fItext.\fR
.PP
about() looks for a suitable icon for the box in four locations:
.IP 1
It prefers parent->icon() if that exists. 
.IP 2
If not, it tries the top level widget containing \fIparent\fR 
.IP 3
If that too fails, it tries the main widget. 
.IP 4
As a last resort it uses the Information icon. 
.PP
The about box has a single button labelled OK.
.PP
See also QWidget::icon() and QApplication::mainWidget().
.PP
Examples:
.(l
menu/menu.cpp
.)l
.SH "void QMessageBox::aboutQt ( QWidget * parent, const QString & caption=QString::null ) \fC[static]\fR"
Displays a simple message box about Qt, with window caption \fIcaption\fR and optionally centered over \fIparent.\fR The message includes the version number of Qt being used by the application.
.PP
This is neat for inclusion into the Help menu. See the menu.cpp example.
.PP
Examples:
.(l
menu/menu.cpp trivial/trivial.cpp
.)l
.SH "void QMessageBox::adjustSize () \fC[virtual]\fR"
Adjusts the size of the message box to fit the contents just before QDialog::exec() or QDialog::show() is called.
.PP
This function will not be called if the message box has been explicitly resized before showing it.
.PP
Reimplemented from QWidget.
.SH "QString QMessageBox::buttonText ( int button ) const"
Returns the text of the message box button \fIbutton,\fR or null if the message box does not contain the button.
.PP
See also setButtonText().
.SH "int QMessageBox::critical ( QWidget * parent, const QString & caption, const QString & text, const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int defaultButtonNumber = 0, int escapeButtonNumber = -1 ) \fC[static]\fR"
Displays a critical error message box with a caption, a text and 1-3 buttons. Returns the number of the button that was clicked (0, 1 or 2).
.PP
\fIbutton0Text\fR is the text of the first button and is optional. If \fIbutton0Text\fR is not supplied, "OK" (translated) will be used. \fIbutton1Text\fR is the text of the second button and is optional, and \fIbutton2Text\fR is the text of the third button and is optional. \fIdefaultbuttonNumber\fR (0-2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). \fIescapeButtonNumber\fR is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1 (pressing Escape does nothing); supply 0, 1 or 2 to make pressing Escape be equivalent with clicking the relevant button.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also information() and warning().
.SH "int QMessageBox::critical ( QWidget * parent, const QString & caption, const QString & text, int button0, int button1, int button2=0 ) \fC[static]\fR"
Opens a critical message box with a caption, a text and up to three buttons. Returns the identifier of the button that was clicked.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also information() and warning().
.SH "QMessageBox::Icon QMessageBox::icon() const"
Returns the icon of the message box.
.PP
See also setIcon() and iconPixmap().
.SH "const QPixmap * QMessageBox::iconPixmap () const"
Returns the icon pixmap of the message box.
.PP
Example:
.PP
.nf
.br
    QMessageBox mb(...);
.br
    mb.setIcon( QMessageBox::Warning );
.br
    mb.iconPixmap();    // returns the warning icon pixmap
.fi
.PP
See also setIconPixmap() and icon().
.SH "int QMessageBox::information ( QWidget * parent, const QString & caption, const QString & text, const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int defaultButtonNumber = 0, int escapeButtonNumber = -1 ) \fC[static]\fR"
Displays an information message box with a caption, a text and 1-3 buttons. Returns the number of the button that was clicked (0, 1 or 2).
.PP
\fIbutton0Text\fR is the text of the first button and is optional. If \fIbutton0Text\fR is not supplied, "OK" (translated) will be used. \fIbutton1Text\fR is the text of the second button and is optional. \fIbutton2Text\fR is the text of the third button and is optional. \fIdefaultbuttonNumber\fR (0-2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). \fIescapeButtonNumber\fR is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1 (pressing Escape does nothing); supply 0, 1 or 2 to make pressing Escape be equivalent with clicking the relevant button.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also warning() and critical().
.SH "int QMessageBox::information ( QWidget * parent, const QString & caption, const QString & text, int button0, int button1=0, int button2=0 ) \fC[static]\fR"
Opens an information message box with a caption, a text and up to three buttons. Returns the identifier of the button that was clicked.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also warning() and critical().
.PP
Examples:
.(l
picture/picture.cpp
.)l
.SH "void QMessageBox::keyPressEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QMessageBox::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QMessageBox::setButtonText ( int button, const QString & text )"
Sets the text of the message box button \fIbutton\fR to \fItext.\fR Setting the text of a button that is not in the message box is quietly ignored.
.PP
See also buttonText().
.SH "void QMessageBox::setIcon ( Icon icon )"
Sets the icon of the message box to \fIicon,\fR which is a predefined icon:
.TP
\fCQMessageBox::NoIcon\fR
.TP
\fCQMessageBox::Information\fR
.TP
\fCQMessageBox::Warning\fR
.TP
\fCQMessageBox::Critical\fR
.PP
The actual pixmap used for displaying the icon depends on the current GUI style. You can also set a custom pixmap icon using the setIconPixmap() function.
.PP
See also icon(), setIconPixmap() and iconPixmap().
.SH "void QMessageBox::setIcon ( const QPixmap & pix ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QMessageBox::setIconPixmap ( const QPixmap & pixmap )"
Sets the icon of the message box to a custom \fIpixmap.\fR Note that it's often hard to draw one pixmap which looks appropriate in both Motif and Windoes GUI styles. You may want to draw two.
.PP
See also iconPixmap() and setIcon().
.SH "void QMessageBox::setText ( const QString & text )"
Sets the message box text to be displayed.
.PP
\fItext\fR will be interpreted either as a plain text or as a rich text, depending on the text format setting; see setTextFormat(). The default setting is \fCAutoText,\fR i.e. the message box will try to auto-detect the format of \fItext.\fR
.PP
See also text() and setTextFormat().
.SH "void QMessageBox::setTextFormat ( Qt::TextFormat format )"
Sets the text format to \fIformat.\fR See the Qt::TextFormat enum for an explanation of the possible options.
.PP
The default format is \fCAutoText.\fR
.PP
See also textFormat() and setText().
.SH "QPixmap QMessageBox::standardIcon ( Icon icon, GUIStyle style ) \fC[static]\fR"
Returns the pixmap used for a standard icon. This allows the pixmaps to be used in more complex message boxes.
.SH "void QMessageBox::styleChanged ( QStyle & ) \fC[protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "QString QMessageBox::text () const"
Returns the message box text currently set, or a null string if no text has been set.
.PP
See also setText() and textFormat().
.SH "Qt::TextFormat QMessageBox::textFormat() const"
Returns the current text format.
.PP
See also setTextFormat().
.SH "int QMessageBox::warning ( QWidget * parent, const QString & caption, const QString & text, const QString & button0Text = QString::null, const QString & button1Text = QString::null, const QString & button2Text = QString::null, int defaultButtonNumber = 0, int escapeButtonNumber = -1 ) \fC[static]\fR"
Displays a warning message box with a caption, a text and 1-3 buttons. Returns the number of the button that was clicked (0, 1 or 2).
.PP
\fIbutton0Text\fR is the text of the first button and is optional. If \fIbutton0Text\fR is not supplied, "OK" (translated) will be used. \fIbutton1Text\fR is the text of the second button and is optional, and \fIbutton2Text\fR is the text of the third button and is optional. \fIdefaultbuttonNumber\fR (0-2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). \fIescapeButtonNumber\fR is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1 (pressing Escape does nothing); supply 0, 1 or 2 to make pressing Escape be equivalent with clicking the relevant button.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also information() and critical().
.PP
Examples:
.(l
i18n/main.cpp
.)l
.SH "int QMessageBox::warning ( QWidget * parent, const QString & caption, const QString & text, int button0, int button1, int button2=0 ) \fC[static]\fR"
Opens a warning message box with a caption, a text and up to three buttons. Returns the identifier of the button that was clicked.
.PP
If \fIparent\fR is 0, then the message box becomes an application-global modal dialog box. If \fIparent\fR is a widget, the message box becomes modal relative to \fIparent.\fR
.PP
See also  information() and critical().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmessagebox.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmessagebox.3qt) and the Qt
version (2.3.2).
