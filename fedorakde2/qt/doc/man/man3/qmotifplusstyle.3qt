'\" t
.TH QMotifPlusStyle 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMotifPlusStyle \- More sophisticated Motif-ish look and feel
.br
.PP
\fC#include <qmotifplusstyle.h>\fR
.PP
Inherits QMotifStyle.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMotifPlusStyle\fR ( bool " "hoveringHighlight" " = FALSE ) "
.br
.ti -1c
.BI "virtual \fB~QMotifPlusStyle\fR () "
.br
.in -1c
.SH DESCRIPTION
More sophisticated Motif-ish look and feel
.PP
This class implements a Motif-ish look and feel with more sophisticated bevelling as used by the GIMP Toolkit (GTK+) for Unix/X11.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMotifPlusStyle::QMotifPlusStyle ( bool hoveringHighlight = FALSE )"
Constructs a QMotifPlusStyle
.PP
If \fIhoveringHighlight\fR is FALSE (default value), then the style will not highlight push buttons, checkboxes, radiobuttons, comboboxes, scrollbars and sliders.
.SH "QMotifPlusStyle::~QMotifPlusStyle () \fC[virtual]\fR"
Destructs the style.
.SH "QRect QMotifPlusStyle::comboButtonFocusRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QRect QMotifPlusStyle::comboButtonRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QMotifPlusStyle::defaultFrameWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawArrow ( QPainter * p, ArrowType type, bool down, int x, int y, int w, int h, const QColorGroup & g, bool, const QBrush * = 0 )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifPlusStyle::drawBevelButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawComboButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, bool editable = FALSE, bool = TRUE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawExclusiveIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool on, bool = FALSE, bool = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawIndicator ( QPainter * p, int x, int y,int w, int h, const QColorGroup & g, int state, bool = FALSE, bool = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawMenuBarItem ( QPainter * p, int x, int y, int w, int h, QMenuItem * mi, QColorGroup & g, bool enabled, bool activated )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifPlusStyle::drawPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, int = 1, const QBrush * = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawPopupMenuItem ( QPainter * p, bool checkable, int maxpmw, int tab, QMenuItem * mi, const QPalette & pl, bool act, bool enabled, int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawPushButton ( QPushButton * button, QPainter * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawScrollBarControls ( QPainter * p, const QScrollBar * sb, int sliderStart, uint controls, uint activeControl ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawSlider ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orientation, bool, bool ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawSliderGroove ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, QCOORD, Orientation ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::drawTab ( QPainter * p, const QTabBar * tabbar, QTab * tab, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "bool QMotifPlusStyle::eventFilter ( QObject * object, QEvent * event ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "QSize QMotifPlusStyle::exclusiveIndicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::getButtonShift ( int & x, int & y ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QMotifPlusStyle::indicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::polish ( QApplication * )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifPlusStyle::polish ( QPalette & pal )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifPlusStyle::polish ( QWidget * widget ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::polishPopupMenu ( QPopupMenu * menu ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::scrollBarMetrics ( const QScrollBar * scrollbar, int & sliderMin, int & sliderMax, int & sliderLength, int & buttonDim ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifPlusStyle::unPolish ( QApplication * app )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifPlusStyle::unPolish ( QWidget * widget ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmotifplusstyle.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmotifplusstyle.3qt) and the Qt
version (2.3.2).
