'\" t
.TH QMotifStyle 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMotifStyle \- Motif Look and Feel
.br
.PP
\fC#include <qmotifstyle.h>\fR
.PP
Inherits QCommonStyle.
.PP
Inherited by QCDEStyle, QInterlaceStyle, QMotifPlusStyle and QSGIStyle.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMotifStyle\fR ( bool " "useHighlightCols" " = FALSE ) "
.br
.ti -1c
.BI "virtual \fB~QMotifStyle\fR () "
.br
.ti -1c
.BI "void \fBsetUseHighlightColors\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBuseHighlightColors\fR () const"
.br
.ti -1c
.BI "virtual void \fBdrawButton\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawExclusiveIndicatorMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int, int, bool ) "
.br
.in -1c
.SH DESCRIPTION
Motif Look and Feel
.PP
This class implements the Motif look and feel. It almost completely resembles the original Motif look as defined by the Open Group, but also contains minor improvements. The Motif style is Qt's default GUI style on UNIX platforms.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMotifStyle::QMotifStyle ( bool useHighlightCols = FALSE )"
Constructs a QMotifStyle.
.PP
If useHighlightCols is FALSE (default value), then the style will polish the application's color palette to emulate the Motif way of highlighting, which is a simple inversion between the base and the text color.
.SH "QMotifStyle::~QMotifStyle () \fC[virtual]\fR"
Destructs the style.
.SH "QRect QMotifStyle::comboButtonFocusRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QRect QMotifStyle::comboButtonRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawArrow ( QPainter * p, ArrowType type, bool down, int x, int y, int w, int h, const QColorGroup & g, bool enabled, const QBrush * = 0 )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifStyle::drawBevelButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Draws a press-sensitive shape.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawCheckMark ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool act, bool dis ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawComboButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool = FALSE, bool editable = FALSE, bool = TRUE, const QBrush * fb = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawExclusiveIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool on, bool down = FALSE, bool = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawExclusiveIndicatorMask ( QPainter * p, int x, int y, int w, int h, bool ) \fC[virtual]\fR"
Draws the mask of a mark indicating the state of an exclusive choice.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawFocusRect ( QPainter * p, const QRect & r, const QColorGroup & g, const QColor * bg =0, bool atBorder = FALSE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int s, bool down = FALSE, bool = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawPopupMenuItem ( QPainter * p, bool checkable, int maxpmw, int tab, QMenuItem * mi, const QPalette & pal, bool act, bool enabled, int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawPushButton ( QPushButton * btn, QPainter * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawScrollBarControls ( QPainter * p, const QScrollBar * sb, int sliderStart, uint controls, uint activeControl ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawSlider ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient, bool, bool ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawSliderGroove ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, QCOORD, Orientation ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawSplitter ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::drawTab ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifStyle::drawTabMask ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "QSize QMotifStyle::exclusiveIndicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QMotifStyle::extraPopupMenuItemWidth ( bool checkable, int maxpmw, QMenuItem * mi, const QFontMetrics & ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QMotifStyle::indicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::polish ( QApplication * a )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifStyle::polish ( QPalette & pal )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QMotifStyle::polish ( QWidget * w ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::polishPopupMenu ( QPopupMenu * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QMotifStyle::popupMenuItemHeight ( bool, QMenuItem * mi, const QFontMetrics & fm ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::scrollBarMetrics ( const QScrollBar * sb, int & sliderMin, int & sliderMax, int & sliderLength, int & buttonDim ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::setUseHighlightColors ( bool arg )"
If the argument is FALSE, then the style will polish the application's color palette to emulate the Motif way of highlighting, which is a simple inversion between the base and the text color.
.PP
The effect will show up the next time a application palette is set via QApplication::setPalette(). The current color palette of the application remains unchanged.
.PP
See also QStyle::polish(, QPalette& and ).
.SH "int QMotifStyle::sliderLength () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QMotifStyle::splitterWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QMotifStyle::tabbarMetrics ( const QTabBar * t, int & hframe, int & vframe, int & overlap )"
Reimplemented for internal reasons; the API is not affected.
.SH "bool QMotifStyle::useHighlightColors () const"
Returns whether the style treats the highlight colors of the palette
Motif-like, which is a simple inversion between the base and the
text color. The default is FALSE.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmotifstyle.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmotifstyle.3qt) and the Qt
version (2.3.2).
