'\" t
.TH QMouseEvent 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMouseEvent \- Parameters that describe a mouse event
.br
.PP
\fC#include <qevent.h>\fR
.PP
Inherits QEvent.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMouseEvent\fR ( Type " "type" ", const QPoint & " "pos" ", int " "button" ", int state ) "
.br
.ti -1c
.BI "\fBQMouseEvent\fR ( Type " "type" ", const QPoint & " "pos" ", const QPoint & " "globalPos" ", int " "button" ", int state ) "
.br
.ti -1c
.BI "const QPoint& \fBpos\fR () const"
.br
.ti -1c
.BI "const QPoint& \fBglobalPos\fR () const"
.br
.ti -1c
.BI "int \fBx\fR () const"
.br
.ti -1c
.BI "int \fBy\fR () const"
.br
.ti -1c
.BI "int \fBglobalX\fR () const"
.br
.ti -1c
.BI "int \fBglobalY\fR () const"
.br
.ti -1c
.BI "ButtonState \fBbutton\fR () const"
.br
.ti -1c
.BI "ButtonState \fBstate\fR () const"
.br
.ti -1c
.BI "ButtonState \fBstateAfter\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QMouseEvent class contains parameters that describe a mouse event.
.PP
Mouse events occur when a mouse button is pressed or released inside a widget, or when the mouse cursor is moved.
.PP
Mouse move events will only occur when some mouse button is pressed down, unless mouse tracking has been enabled with QWidget::setMouseTracking().
.PP
Qt automatically grabs the mouse when a mouse button is pressed inside a widget, and the widget will continue to receive mouse events until the last mouse button is released.
.PP
The functions pos(), x() and y() give the cursor position relative to the widget that receives the mouse event. If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.
.PP
The QWidget::setEnable() function can be used to enable or disable mouse and keyboard events for a widget.
.PP
The event handlers QWidget::mousePressEvent(), QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent() and QWidget::mouseMoveEvent() receive mouse events.
.PP
See also QWidget::setMouseTracking(), QWidget::grabMouse() and QCursor::pos().
.PP
Examples:
.(l
qtimage/qtimage.cpp drawlines/connect.cpp popup/popup.cpp qmag/qmag.cpp scrollview/scrollview.cpp trivial/trivial.cpp movies/main.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMouseEvent::QMouseEvent ( Type type, const QPoint & pos, const QPoint & globalPos, int button, int state )"
Constructs a mouse event object.
.PP
The \fItype\fR parameter must be \fCQEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick\fR or \fCQEvent::MouseMove.\fR
.PP
The \fIpos\fR parameter specifies the position relative to the receiving widget; \fIglobalPos\fR is the position in absolute coordinates; \fIbutton\fR specifies the ButtonState of the button that caused the event, which should be 0 if \fItype\fR is \fCMouseMove;\fR and \fIstate\fR is the ButtonState at the time of the event.
.SH "QMouseEvent::QMouseEvent ( Type type, const QPoint & pos, int button, int state )"
Constructs a mouse event object.
.PP
The \fItype\fR parameter must be one of \fCQEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick\fR or \fCQEvent::MouseMove.\fR
.PP
The \fIpos\fR parameter specifies the position relative to the receiving widget; \fIbutton\fR specifies the ButtonState of the button that caused the event, which should be 0 if \fItype\fR is \fCMouseMove;\fR \fIstate\fR is the ButtonState at the time of the event.
.PP
The globalPos() is initialized to QCursor::pos(), which may not be appropriate. Use the other constructor to specify the global position explicitly.
.SH "ButtonState QMouseEvent::button () const"
Returns the button that caused the event.
.PP
Possible return values are \fCLeftButton, RightButton, MidButton\fR and \fCNoButton.\fR
.PP
Note that the returned value is always \fCNoButton\fR (0) for mouse move events.
.PP
See also state().
.PP
Examples:
.(l
movies/main.cpp
.)l
.SH "const QPoint & QMouseEvent::globalPos () const"
Returns the global position of the mouse pointer \fIat the time\fR of the event. This is important on asynchronous window systems like X11: Whenever you move your widgets around in response to mouse evens, globalPos() can differ a lot from the current pointer position QCursor::pos(), and from \fC QWidget::mapToGlobal( pos() ) \fR.
.PP
See also globalX() and globalY().
.SH "int QMouseEvent::globalX () const"
Returns the global X position of the mouse pointer at the time of the event
.PP
See also globalY() and globalPos().
.SH "int QMouseEvent::globalY () const"
Returns the global Y position of the mouse pointer at the time of the event
.PP
See also globalX() and globalPos().
.SH "const QPoint & QMouseEvent::pos () const"
Returns the position of the mouse pointer, relative to the widget that received the event.
.PP
If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.
.PP
See also x(), y() and globalPos().
.PP
Examples:
.(l
qtimage/qtimage.cpp drawlines/connect.cpp qmag/qmag.cpp
.)l
.SH "ButtonState QMouseEvent::state () const"
Returns the button state (a combination of mouse buttons and keyboard modifiers), i.e. what buttons and keys were being held depressed immediately before the event was generated.
.PP
Note that this means that for \fCQEvent::MouseButtonPress\fR and \fCQEvent::MouseButtonDblClick,\fR the flag for the button() itself will not be set in the state; while for \fCQEvent::MouseButtonRelease,\fR it will.
.PP
This value is mainly interesting for \fCQEvent::MouseMove,\fR for the other cases, button() is more useful.
.PP
The returned value is \fCLeftButton, RightButton, MidButton, ShiftButton, ControlButton\fR and \fCAltButton\fR OR'ed together.
.PP
See also button() and stateAfter().
.PP
Examples:
.(l
movies/main.cpp
.)l
.SH "ButtonState QMouseEvent::stateAfter () const"
Returns the state of buttons after the event.
.PP
See also state().
.SH "int QMouseEvent::x () const"
Returns the X position of the mouse pointer, relative to the widget that received the event.
.PP
See also y() and pos().
.PP
Examples:
.(l
scrollview/scrollview.cpp
.)l
.SH "int QMouseEvent::y () const"
Returns the Y position of the mouse pointer, relative to the widget that received the event.
.PP
See also x() and pos().
.PP
Examples:
.(l
scrollview/scrollview.cpp
.)l
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmouseevent.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmouseevent.3qt) and the Qt
version (2.3.2).
