'\" t
.TH QSessionManager 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSessionManager \- Access to the session manager
.br
.PP
\fC#include <qsessionmanager.h>\fR
.PP
Inherits QObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QString \fBsessionId\fR () const"
.br
.ti -1c
.BI "bool \fBallowsInteraction\fR () "
.br
.ti -1c
.BI "bool \fBallowsErrorInteraction\fR () "
.br
.ti -1c
.BI "void \fBrelease\fR () "
.br
.ti -1c
.BI "void \fBcancel\fR () "
.br
.ti -1c
.BI "enum \fBRestartHint\fR { RestartIfRunning, RestartAnyway, RestartImmediately, RestartNever }"
.br
.ti -1c
.BI "void \fBsetRestartHint\fR ( RestartHint ) "
.br
.ti -1c
.BI "RestartHint \fBrestartHint\fR () const"
.br
.ti -1c
.BI "void \fBsetRestartCommand\fR ( const QStringList & ) "
.br
.ti -1c
.BI "QStringList \fBrestartCommand\fR () const"
.br
.ti -1c
.BI "void \fBsetDiscardCommand\fR ( const QStringList & ) "
.br
.ti -1c
.BI "QStringList \fBdiscardCommand\fR () const"
.br
.ti -1c
.BI "void \fBsetProperty\fR ( const QString & " "name" ", const QString & value ) "
.br
.ti -1c
.BI "void \fBsetProperty\fR ( const QString & " "name" ", const QStringList & value ) "
.br
.ti -1c
.BI "bool \fBisPhase2\fR () const"
.br
.ti -1c
.BI "void \fBrequestPhase2\fR () "
.br
.in -1c
.SH DESCRIPTION
The QSessionManager class provides access to the session manager.
.PP
The session manager is responsible for session management, most importantly interruption and resumption.
.PP
QSessionManager provides an interface between the application and the session manager, so that the program can work well with the session manager. In Qt, the session management requests for action are handled by the two virtual functions QApplication::commitData() and QApplication::saveState(). Both functions provide a reference to a session manager object as argument, thus allowing the application to communicate with the session manager.
.PP
During a session management action, i.e. within one of the two mentioned functions, no user interaction is possible, \fIunless\fR the application got explicit permission from the session manager. You can ask for permission by calling allowsInteraction() or, if it's really urgent, allowsErrorInteraction(). Qt does not enforce this, but the session manager may. Perhaps.
.PP
You can try to abort the shutdown process by calling cancel. The default commitData() function does that if some top-level window rejected its closeEvent().
.PP
For sophisticated session managers as provided on Unix/X11, QSessionManager offers further possibilities to fine-tune an application's session management behaviour: setRestartCommand(), setDiscardCommand(), setRestartHint(), setProperty(), requestPhase2(). Please see the respective function descriptions for further details.
.SS "Member Type Documentation"
.SH "QSessionManager::RestartHint"
This enum type defines the circumstances under which this application wants to be restarted by the session manager. The current values are: 
.TP
\fCRestartIfRunning\fR - if the application still runs by the time the session is shut down, it wants to be restarted at the start of the next session.
.TP
\fCRestartAnyway\fR - the application wants to be started at the start of the next session, no matter what. (This is useful for utilities that run just after startup, then quit.)
.TP
\fCRestartImmediately\fR - the application wants to be started immediately whenever it is not running.
.TP
\fCRestartNever\fR - the application does not want to be restarted automatically.
.IP
.PP
The default hint is \fCRestartIfRunning.\fR
.SH MEMBER FUNCTION DOCUMENTATION
.SH "bool QSessionManager::allowsErrorInteraction ()"
Like allowsInteraction() but tells the session manager in addition that an error occurred. Session managers may give error interaction request higher priority. That means it is more likely that an error interaction is granted. However, you are still not guaranteed that the session manager will grant your request.
.PP
See also allowsInteraction(), release() and cancel().
.SH "bool QSessionManager::allowsInteraction ()"
Asks the session manager for permission to interact with the user. Returns TRUE if the interaction was granted, FALSE otherwise.
.PP
The rationale behind this mechanism is to make it possible to synchronize user interaction during a shutdown. Advanced session managers may ask all applications simultaneously to commit their data, resulting in a much faster shutdown.
.PP
When the interaction is done we strongly recommend releasing the user interaction semaphore with a call to release(). This way, other applications may get the chance to interact with the user while your application is still busy saving data. (The semaphore is implicitly released when the application exits.)
.PP
If the user decides to cancel the shutdown process during the interaction phase, you must tell the session manager so by calling cancel().
.PP
Here's an example usage of the mentioned functions that may occur in the QApplication::commitData() function of an application:
.PP
.nf
.br
void MyApplication::commitData( QSessionManager& sm ) {
.br
    if ( sm.allowsInteraction() ) {
.br
        switch ( QMessageBox::warning( yourMainWindow, "Application Name",
.br
                                        "Save changes to Document Foo?",
.br
                                        tr("&Yes"),
.br
                                        tr("&No"),
.br
                                        tr("Cancel"),
.br
                                        0, 2) ) {
.br
        case 0: // yes
.br
            sm.release();
.br
            // save document here. If saving fails, call sm.cancel()
.br
            break;
.br
        case 1: // no
.br
            break;
.br
        default: // cancel
.br
            sm.cancel();
.br
            break;
.br
        }
.br
    } else {
.br
        // we did not get permission to interact, then
.br
        // do something reasonable instead.
.br
    }
.br
}
.fi
.PP
If an error occurred within the application while saving its data, you may want to try allowsErrorInteraction() instead.
.PP
See also QApplication::commitData(), release() and cancel().
.SH "void QSessionManager::cancel ()"
Tells the session manager to cancel the shutdown process. Applications should not call this function without asking the user first.
.PP
See also allowsInteraction() and allowsErrorInteraction().
.SH "QStringList QSessionManager::discardCommand () const"
Returns the currently set discard command.
.PP
See also setDiscardCommand(), restartCommand() and setRestartCommand().
.SH "bool QSessionManager::isPhase2 () const"
Returns whether the session manager is currently performing a second session management phase.
.PP
See also requestPhase2().
.SH "void QSessionManager::release ()"
Releases the session manager's interaction semaphore after an interaction phase.
.PP
See also allowsInteraction() and allowsErrorInteraction().
.SH "void QSessionManager::requestPhase2 ()"
Requests a second session management phase for the application. The application may then return immediately from the QApplication::commitData() or QApplication::saveState() function, and they will be called again once most/all other applications have finished their session management.
.PP
The two phases are useful for applications like X11 window manager, that need to store informations about other application's windows and therefore have to wait until these applications finished their respective session management tasks.
.PP
Note that if another application has requested a second phase, it may get called before, simultaneously with, or after your application's second phase.
.PP
See also isPhase2().
.SH "QStringList QSessionManager::restartCommand () const"
Returns the currently set restart command.
.PP
See also setRestartCommand() and restartHint().
.SH "QSessionManager::RestartHint QSessionManager::restartHint() const"
Returns the application's current restart hint. The default is \fCRestartIfRunning.\fR
.PP
See also setRestartHint().
.SH "QString QSessionManager::sessionId () const"
Returns the identifier of the current session.
.PP
If the application has been restored from an earlier session, this identifier is the same as it was in that previous session.
.PP
See also QApplication::sessionId().
.SH "void QSessionManager::setDiscardCommand ( const QStringList & )"
See also discardCommand() and setRestartCommand().
.SH "void QSessionManager::setProperty ( const QString & name, const QString & value )"
Low-level write access to the application's identification and state record kept in the session manager.
.SH "void QSessionManager::setProperty ( const QString & name, const QStringList & value )"
Low-level write access to the application's identification and state record kept in the session manager.
.SH "void QSessionManager::setRestartCommand ( const QStringList & command )"
If the session manager is capable of restoring sessions, it will execute \fIcommand\fR in order to restore the application. The command defaults to
.PP
.nf
.br
               appname -session id
.fi
.PP
The \fC-session\fR option is mandatory, otherwise QApplication can not tell whether it has been restored or what the current session identifier is. See QApplication::isSessionRestored() and QApplication::sessionId() for details. If your application is very simple, it may be possible to store the entire application state in additional command line options. In general, this is a very bad idea, since command lines are often limited to a few hundred bytes. Instead, use temporary files or a database for this purpose. By marking the data with the unique sessionId(), you will be able to restore the application in a future session.
.PP
See also restartCommand(), setDiscardCommand() and setRestartHint().
.SH "void QSessionManager::setRestartHint ( RestartHint hint )"
Sets the application's restart hint to \fIhint.\fR On application start-up the hint is set to \fCRestartIfRunning.\fR
.PP
Note that these flags are only hints, a session manager may or may not obey them.
.PP
We recommend setting the restart hint in QApplication::saveState() since most session managers perform a checkpoint shortly after an application's startup.
.PP
See also  restartHint().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsessionmanager.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsessionmanager.3qt) and the Qt
version (2.3.2).
