'\" t
.TH QSGIStyle 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSGIStyle \- SGI Look and Feel
.br
.PP
\fC#include <qsgistyle.h>\fR
.PP
Inherits QMotifStyle.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSGIStyle\fR ( bool " "useHighlightCols" " = FALSE ) "
.br
.ti -1c
.BI "virtual \fB~QSGIStyle\fR () "
.br
.ti -1c
.BI "virtual void \fBpolish\fR ( QWidget * ) "
.br
.ti -1c
.BI "void \fBpolish\fR ( QApplication * ) "
.br
.ti -1c
.BI "virtual void \fBdrawPanel\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, int " "lineWidth" " = 1, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawSeparator\fR ( QPainter * " "p" ", int " "x1" ", int " "y1" ", int " "x2" ", int " "y2" ", const QColorGroup & " "g" ", bool " "sunken" " = TRUE, int " "lineWidth" " = 1, int " "midLineWidth" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawButton\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawBevelButton\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawPushButton\fR ( QPushButton *, QPainter * ) "
.br
.ti -1c
.BI "void \fBdrawArrow\fR ( QPainter * " "p" ", ArrowType " "type" ", bool " "down" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "enabled" ", const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawIndicator\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", int " "state" ", bool " "down" " = FALSE, bool " "enabled" " = TRUE ) "
.br
.ti -1c
.BI "virtual void \fBdrawCheckMark\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "act" ", bool dis ) "
.br
.ti -1c
.BI "virtual void \fBdrawIndicatorMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", int s ) "
.br
.ti -1c
.BI "virtual void \fBdrawExclusiveIndicator\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "on" ", bool " "down" " = FALSE, bool " "enabled" " = TRUE ) "
.br
.ti -1c
.BI "virtual void \fBdrawExclusiveIndicatorMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", bool on ) "
.br
.ti -1c
.BI "virtual void \fBdrawComboButton\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, bool " "editable" " = FALSE, bool " "enabled" " = TRUE, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawScrollBarControls\fR ( QPainter * " "p" ", const QScrollBar *, int " "sliderStart" ", uint " "controls" ", uint activeControl ) "
.br
.ti -1c
.BI "virtual void \fBdrawSlider\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", Orientation " "orient" ", bool " "tickAbove" ", bool tickBelow ) "
.br
.ti -1c
.BI "virtual void \fBdrawSliderGroove\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", QCOORD " "c" ", Orientation orient ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool \fBeventFilter\fR ( QObject *, QEvent * ) "
.br
.in -1c
.SH DESCRIPTION
SGI Look and Feel
.PP
This class implements the SGI look and feel. It tries to resemble a SGI-like GUI style with the QStyle system.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSGIStyle::QSGIStyle ( bool useHighlightCols = FALSE )"
Constructs a QSGIStyle
.PP
If useHighlightCols is FALSE (default value), then the style will polish the application's color palette to emulate the Motif way of highlighting, which is a simple inversion between the base and the text color.
.PP
See also QMotifStyle::useHighlightColors().
.SH "QSGIStyle::~QSGIStyle () \fC[virtual]\fR"
Destructs the style.
.SH "QRect QSGIStyle::comboButtonFocusRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QRect QSGIStyle::comboButtonRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QSGIStyle::defaultFrameWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawArrow ( QPainter * p, ArrowType type, bool, int x, int y, int w, int h, const QColorGroup & g, bool enabled, const QBrush * fill = 0 )"
Reimplemented to be SGI-like.
.SH "void QSGIStyle::drawBevelButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Draws a button with a stronger separation from the user interface.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Draws a press-senstive interface element.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawCheckMark ( QPainter * p, int x, int y, int, int, const QColorGroup & g, bool act, bool dis ) \fC[virtual]\fR"
Draws a fancy red checkmark indicating the state of choice in checkboxes or checkable menu items.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawComboButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool = FALSE, bool editable = FALSE, bool = TRUE, const QBrush * fb = 0 ) \fC[virtual]\fR"
Draws a raised shape used as a combobox.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawExclusiveIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool on, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Draws an interface element used to show the state of an exclusive choice as used in a radio button.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawExclusiveIndicatorMask ( QPainter * p, int x, int y, int, int, bool ) \fC[virtual]\fR"
Draws the mask of a mark indicating the state of an exclusive choice.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int s, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Draws a interface element showing the state of choice, used by a checkbox.
.PP
See also drawCheckMark().
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawIndicatorMask ( QPainter * p, int x, int y, int w, int h, int s ) \fC[virtual]\fR"
Draws a mask for an indicator in state /e s.
.PP
See also drawIndicator().
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawMenuBarItem ( QPainter * p, int x, int y, int w, int h, QMenuItem * mi, QColorGroup & g, bool enabled, bool active )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSGIStyle::drawPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, int lineWidth = 1, const QBrush * fill = 0 ) \fC[virtual]\fR"
Draws a SGI-like panel with somewhat rounded edges.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawPopupMenuItem ( QPainter * p, bool checkable, int maxpmw, int tab, QMenuItem * mi, const QPalette & pal, bool act, bool enabled, int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawPopupPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int lineWidth = 2, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawPushButton ( QPushButton * btn, QPainter * p ) \fC[virtual]\fR"
Reimplemented ot be SGI-like.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawScrollBarControls ( QPainter * p, const QScrollBar * sb, int sliderStart, uint controls, uint activeControl ) \fC[virtual]\fR"
Draws scrollbar controls in SGI-like style.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSeparator ( QPainter * p, int x1, int y1, int x2, int y2, const QColorGroup & g, bool sunken = TRUE, int = 1, int = 0 ) \fC[virtual]\fR"
Draws a line to separate parts of the visual interface.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSlider ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient, bool, bool ) \fC[virtual]\fR"
Draws the sliding element of a slider-widget.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSliderGroove ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, QCOORD, Orientation ) \fC[virtual]\fR"
Draws the groove of a slider widget.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSliderGrooveMask ( QPainter * p, int x, int y, int w, int h, QCOORD c, Orientation orient ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSliderMask ( QPainter * p, int x, int y, int w, int h, Orientation orient, bool tickAbove, bool tickBelow ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawSplitter ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::drawTab ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSGIStyle::drawTabMask ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "bool QSGIStyle::eventFilter ( QObject * o, QEvent * e ) \fC[virtual protected]\fR"
Reimplemented to enable the SGI-like effect of "glowing" widgets.
.PP
Reimplemented from QObject.
.SH "QSize QSGIStyle::exclusiveIndicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QSGIStyle::indicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::polish ( QApplication * app )"
Changes some application-wide settings to be SGI like, e.g. sets bold/italic font for the menu-system.
.SH "void QSGIStyle::polish ( QPalette & pal )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSGIStyle::polish ( QWidget * w ) \fC[virtual]\fR"
Installs eventfilters for several widgets to enable the SGI-effect of glowing buttons.
.PP
Reimplemented from QStyle.
.SH "int QSGIStyle::popupMenuItemHeight ( bool, QMenuItem * mi, const QFontMetrics & fm ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::scrollBarMetrics ( const QScrollBar * sb, int & sliderMin, int & sliderMax, int & sliderLength, int & buttonDim ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QSGIStyle::splitterWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QSGIStyle::unPolish ( QApplication * )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSGIStyle::unPolish ( QWidget * w ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsgistyle.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsgistyle.3qt) and the Qt
version (2.3.2).
