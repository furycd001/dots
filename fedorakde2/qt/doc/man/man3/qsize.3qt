'\" t
.TH QSize 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSize \- Defines the size of a two-dimensional object
.br
.PP
\fC#include <qsize.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSize\fR () "
.br
.ti -1c
.BI "\fBQSize\fR ( int " "w" ", int h ) "
.br
.ti -1c
.BI "bool \fBisNull\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "int \fBwidth\fR () const"
.br
.ti -1c
.BI "int \fBheight\fR () const"
.br
.ti -1c
.BI "void \fBsetWidth\fR ( int w ) "
.br
.ti -1c
.BI "void \fBsetHeight\fR ( int h ) "
.br
.ti -1c
.BI "void \fBtranspose\fR () "
.br
.ti -1c
.BI "QSize \fBexpandedTo\fR ( const QSize & ) const"
.br
.ti -1c
.BI "QSize \fBboundedTo\fR ( const QSize & ) const"
.br
.ti -1c
.BI "QCOORD& \fBrwidth\fR () "
.br
.ti -1c
.BI "QCOORD& \fBrheight\fR () "
.br
.ti -1c
.BI "QSize& \fBoperator+=\fR ( const QSize & ) "
.br
.ti -1c
.BI "QSize& \fBoperator-=\fR ( const QSize & ) "
.br
.ti -1c
.BI "QSize& \fBoperator*=\fR ( int c ) "
.br
.ti -1c
.BI "QSize& \fBoperator*=\fR ( double c ) "
.br
.ti -1c
.BI "QSize& \fBoperator/=\fR ( int c ) "
.br
.ti -1c
.BI "QSize& \fBoperator/=\fR ( double c ) "
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "QSize \fBoperator*\fR (const QSize & " "s" ", int " "c" ")"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR (QDataStream & " "s" ", const QSize & " "sz" ")"
.br
.ti -1c
.BI "QSize \fBoperator/\fR (const QSize & " "s" ", int " "c" ")"
.br
.ti -1c
.BI "QSize \fBoperator*\fR (const QSize & " "s" ", double " "c" ")"
.br
.ti -1c
.BI "bool \fBoperator!=\fR (const QSize & " "s1" ", const QSize & " "s2" ")"
.br
.ti -1c
.BI "QSize \fBoperator-\fR (const QSize & " "s1" ", const QSize & " "s2" ")"
.br
.ti -1c
.BI "QSize \fBoperator+\fR (const QSize & " "s1" ", const QSize & " "s2" ")"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR (QDataStream & " "s" ", QSize & " "sz" ")"
.br
.ti -1c
.BI "QSize \fBoperator*\fR (int " "c" ", const QSize & " "s" ")"
.br
.ti -1c
.BI "bool \fBoperator==\fR (const QSize & " "s1" ", const QSize & " "s2" ")"
.br
.ti -1c
.BI "QSize \fBoperator*\fR (double " "c" ", const QSize & " "s" ")"
.br
.ti -1c
.BI "QSize \fBoperator/\fR (const QSize & " "s" ", double " "c" ")"
.br
.in -1c
.SH DESCRIPTION
The QSize class defines the size of a two-dimensional object.
.PP
A size is specified by a width and a height.
.PP
The coordinate type is QCOORD (defined in qwindowdefs.h as \fCint).\fR The minimum value of QCOORD is QCOORD_MIN (-2147483648) and the maximum value is QCOORD_MAX (2147483647).
.PP
See also QPoint and QRect.
.PP
Examples:
.(l
xform/xform.cpp menu/menu.cpp progress/progress.cpp qfd/qfd.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSize::QSize ()"
Constructs a size with invalid (negative) width and height.
.SH "QSize::QSize ( int w, int h )"
Constructs a size with width \fIw\fR and height \fIh.\fR
.SH "QSize QSize::boundedTo ( const QSize & otherSize ) const"
Returns a size with the minimum width and height of this size and \fIotherSize.\fR
.SH "QSize QSize::expandedTo ( const QSize & otherSize ) const"
Returns a size with the maximum width and height of this size and \fIotherSize.\fR
.SH "int QSize::height () const"
Returns the height.
.PP
See also width().
.PP
Examples:
.(l
qfd/qfd.cpp
.)l
.SH "bool QSize::isEmpty () const"
Returns TRUE if the width is <= 0 or the height is <= 0, otherwise FALSE.
.SH "bool QSize::isNull () const"
Returns TRUE if the width is 0 and the height is 0, otherwise FALSE.
.SH "bool QSize::isValid () const"
Returns TRUE if the width is equal to or greater than 0 and the height is equal to or greater than 0, otherwise FALSE.
.SH "QSize & QSize::operator*= ( double c )"
Multiplies both the width and height with \fIc\fR and returns a reference to the size.
.PP
Note that the result is truncated.
.SH "QSize & QSize::operator*= ( int c )"
Multiplies both the width and height with \fIc\fR and returns a reference to the size.
.SH "QSize & QSize::operator+= ( const QSize & s )"
Adds \fIs\fR to the size and returns a reference to this size.
.PP
Example:
.PP
.nf
.br
    QSize s(  3, 7 );
.br
    QSize r( -1, 4 );
.br
    s += r;                     // s becomes (2,11)
.fi
.SH "QSize & QSize::operator-= ( const QSize & s )"
Subtracts \fIs\fR from the size and returns a reference to this size.
.PP
Example:
.PP
.nf
.br
    QSize s(  3, 7 );
.br
    QSize r( -1, 4 );
.br
    s -= r;                     // s becomes (4,3)
.fi
.SH "QSize & QSize::operator/= ( double c )"
Divides both the width and height by \fIc\fR and returns a reference to the size.
.PP
Note that the result is truncated.
.SH "QSize & QSize::operator/= ( int c )"
Divides both the width and height by \fIc\fR and returns a reference to the size.
.SH "QCOORD & QSize::rheight ()"
Returns a reference to the height.
.PP
Using a reference makes it possible to directly manipulate the height.
.PP
Example:
.PP
.nf
.br
    QSize s( 100, 10 );
.br
    s.rheight() += 5;           // s becomes (100,15)
.fi
.PP
See also rwidth().
.SH "QCOORD & QSize::rwidth ()"
Returns a reference to the width.
.PP
Using a reference makes it possible to directly manipulate the width.
.PP
Example:
.PP
.nf
.br
    QSize s( 100, 10 );
.br
    s.rwidth() += 20;           // s becomes (120,10)
.fi
.PP
See also rheight().
.SH "void QSize::setHeight ( int h )"
Sets the height to \fIh.\fR
.PP
See also height() and setWidth().
.SH "void QSize::setWidth ( int w )"
Sets the width to \fIw.\fR
.PP
See also width() and setHeight().
.SH "void QSize::transpose ()"
Swaps the values of width and height.
.SH "int QSize::width () const"
Returns the width.
.PP
See also height().
.PP
Examples:
.(l
qfd/qfd.cpp
.)l
.SH RELATED FUNCTION DOCUMENTATION
.SH "QSize operator* (const QSize & s, int c)"
Multiplies \fIs\fR by \fIc\fR and returns the result.
.SH "QDataStream & operator<< (QDataStream & s, const QSize & sz)"
Writes the size to the stream and returns a reference to the stream.
.PP
See also Format of the QDataStream operators
.SH "QSize operator/ (const QSize & s, int c)"
Divides \fIs\fR by \fIc\fR and returns the result.
.SH "QSize operator* (const QSize & s, double c)"
Multiplies \fIs\fR by \fIc\fR and returns the result.
.SH "bool operator!= (const QSize & s1, const QSize & s2)"
Returns TRUE if \fIs1\fR and \fIs2\fR are different, or FALSE if they are equal.
.SH "QSize operator- (const QSize & s1, const QSize & s2)"
Returns \fIs2\fR subtracted from \fIs1;\fR each component is subtracted separately.
.SH "QSize operator+ (const QSize & s1, const QSize & s2)"
Returns the sum of \fIs1\fR and \fIs2;\fR each component is added separately.
.SH "QDataStream & operator>> (QDataStream & s, QSize & sz)"
Reads the size from the stream and returns a reference to the stream.
.PP
See also Format of the QDataStream operators
.SH "QSize operator* (int c, const QSize & s)"
Multiplies \fIs\fR by \fIc\fR and returns the result.
.SH "bool operator== (const QSize & s1, const QSize & s2)"
Returns TRUE if \fIs1\fR and \fIs2\fR are equal, or FALSE if they are different.
.SH "QSize operator* (double c, const QSize & s)"
Multiplies \fIs\fR by \fIc\fR and returns the result.
.SH "QSize operator/ (const QSize & s, double c)"
Divides \fIs\fR by \fIc\fR and returns the result.
.PP
Note that the result is truncated.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsize.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsize.3qt) and the Qt
version (2.3.2).
