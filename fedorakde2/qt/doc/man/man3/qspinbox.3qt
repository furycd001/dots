'\" t
.TH QSpinBox 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSpinBox \- Spin box widget, sometimes called up-down widget, little arrows widget or spin button
.br
.PP
\fC#include <qspinbox.h>\fR
.PP
Inherits QFrame and QRangeControl.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSpinBox\fR ( QWidget * " "parent" " = 0, const char * " "name" " = 0 ) "
.br
.ti -1c
.BI "\fBQSpinBox\fR ( int " "minValue" ", int " "maxValue" ", int " "step" " = 1, QWidget * " "parent" " = 0, const char * " "name" " = 0 ) "
.br
.ti -1c
.BI "\fB~QSpinBox\fR () "
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "virtual QString \fBprefix\fR () const"
.br
.ti -1c
.BI "virtual QString \fBsuffix\fR () const"
.br
.ti -1c
.BI "virtual QString \fBcleanText\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSpecialValueText\fR ( const QString & text ) "
.br
.ti -1c
.BI "QString \fBspecialValueText\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetWrapping\fR ( bool on ) "
.br
.ti -1c
.BI "bool \fBwrapping\fR () const"
.br
.ti -1c
.BI "enum \fBButtonSymbols\fR { UpDownArrows, PlusMinus }"
.br
.ti -1c
.BI "void \fBsetButtonSymbols\fR ( ButtonSymbols ) "
.br
.ti -1c
.BI "ButtonSymbols \fBbuttonSymbols\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetValidator\fR ( const QValidator * v ) "
.br
.ti -1c
.BI "const QValidator* \fBvalidator\fR () const"
.br
.ti -1c
.BI "void \fBsetMinValue\fR ( int ) "
.br
.ti -1c
.BI "void \fBsetMaxValue\fR ( int ) "
.br
.ti -1c
.BI "void \fBsetLineStep\fR ( int ) "
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetValue\fR ( int value ) "
.br
.ti -1c
.BI "virtual void \fBsetPrefix\fR ( const QString & text ) "
.br
.ti -1c
.BI "virtual void \fBsetSuffix\fR ( const QString & text ) "
.br
.ti -1c
.BI "virtual void \fBstepUp\fR () "
.br
.ti -1c
.BI "virtual void \fBstepDown\fR () "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBvalueChanged\fR ( int value ) "
.br
.ti -1c
.BI "void \fBvalueChanged\fR ( const QString & valueText ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual QString \fBmapValueToText\fR ( int value ) "
.br
.ti -1c
.BI "virtual int \fBmapTextToValue\fR ( bool * ok ) "
.br
.ti -1c
.BI "QString \fBcurrentValueText\fR () "
.br
.ti -1c
.BI "virtual void \fBupdateDisplay\fR () "
.br
.ti -1c
.BI "virtual void \fBinterpretText\fR () "
.br
.ti -1c
.BI "QPushButton* \fBupButton\fR () const"
.br
.ti -1c
.BI "QPushButton* \fBdownButton\fR () const"
.br
.ti -1c
.BI "QLineEdit* \fBeditor\fR () const"
.br
.ti -1c
.BI "virtual void \fBvalueChange\fR () "
.br
.ti -1c
.BI "virtual void \fBrangeChange\fR () "
.br
.ti -1c
.BI "virtual bool \fBeventFilter\fR ( QObject * " "obj" ", QEvent * ev ) "
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "void \fBtextChanged\fR () "
.br
.in -1c
.SS "Properties"
.nf
.TS
l l l l l
- - - - -
l l l l l.
Type	Name	READ	WRITE	Options
QString	text	text
QString	prefix	prefix	setPrefix
QString	suffix	suffix	setSuffix
QString	cleanText	cleanText
QString	specialValueText	specialValueText	setSpecialValueText
bool	wrapping	wrapping	setWrapping
ButtonSymbols	buttonSymbols	buttonSymbols	setButtonSymbols
int	maxValue	maxValue	setMaxValue
int	minValue	minValue	setMinValue
int	lineStep	lineStep	setLineStep
int	value	value	setValue
.TE
.fi

.SH DESCRIPTION
The QSpinBox class provides a spin box widget, sometimes called up-down widget, little arrows widget or spin button.
.PP
QSpinBox allows the user to choose a value, either by clicking the up/down buttons to increase/decrease the value currently displayed, or by typing the value directly into the spin box. Usually the value is an integer.
.PP
Every time the value changes, QSpinBox emits the valueChanged() signal. The current value can be fetched with value() and set with setValue().
.PP
The spin box clamps the value within a numeric range, see QRangeControl for details. Clicking the up/down down buttons (or using the keyboard accelerators: Up-arrow and Down-arrow) will increase or decrease the current value in steps of size lineStep().
.PP
Most spin boxes are directional, but QSpinBox can also operate as a circular spin box, i.e. if the range is 0-99 and the current value is 99, clicking Up will give 0. Use setWrapping() if you want circular behavior.
.PP
The displayed value can be prepended and/or appended with an arbitrary string indicating for example the unit of measurement. See setPrefix() and setSuffix().
.PP
Normally, the spin box displays up and down arrows in the buttons. You can use setButtonSymbols() to change the display to show + and - symbols, if this is clearer for your intended purpose. In either case, the up and down arrow keys always work.
.PP
It is often desirable to give the user a special, often default, choice in addition to the range of numeric values. See setSpecialValueText() for how to do this with QSpinBox.
.PP
The default QWidget::focusPolicy() is StrongFocus.
.PP
QSpinBox can easily be subclassed to allow the user to input other things than an integer value, as long as the allowed input can be mapped down to a range of integers. This can be done by overriding the virtual functions mapValueToText() and mapTextToValue() and setting another, suitable validator using setValidator(). For example, these function could be changed so that the user provided values from 0.0 to 10.0 while the range of integers used inside the program would be 0 to 100:
.PP
.nf
.br
  class MySpinBox : public QSpinBox {
.br
  public:
.br
    ...
.br
.br
    QString     mapValueToText( int value )
.br
    {
.br
      return QString("%1.%2").arg(value/10).arg(value%10);
.br
    }
.br
.br
    int         mapTextToValue( bool* ok )
.br
    {
.br
      return int(text().toFloat()*10);
.br
    }
.br
.br
  };
.fi
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QScrollBar, QSlider and GUI Design Handbook: Spin Box
.SS "Member Type Documentation"
.SH "QSpinBox::ButtonSymbols"
This enum type determines what the buttons in a spin box show. The currently defined values are: 
.TP
\fCUpDownArrows\fR - the buttons show little arrows, in the classic style. This is the default.
.TP
\fCPlusMinus\fR - the buttons show '+' and '-' symbols. This is often considered to be more meaningful than \fCUpDownArrows.\fR
.IP
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSpinBox::QSpinBox ( QWidget * parent = 0, const char * name = 0 )"
Constructs a spin box with the default QRangeControl range and step values.
.PP
See also minValue(), maxValue(), setRange(), lineStep() and setSteps().
.SH "QSpinBox::QSpinBox ( int minValue, int maxValue, int step = 1, QWidget * parent = 0, const char * name = 0 )"
Constructs a spin box with range from \fIminValue\fR to \fImaxValue\fR inclusive, with step amount \fIstep.\fR The value is initially set to \fIminValue.\fR
.PP
See also minValue(), maxValue(), setRange(), lineStep() and setSteps().
.SH "QSpinBox::~QSpinBox ()"
Destroys the spin box, freeing all memory and other resources.
.SH "QSpinBox::ButtonSymbols QSpinBox::buttonSymbols() const"
Returns the current button symbol mode. The default is \fCUpDownArrows.\fR
.PP
See also setButtonSymbols() and ButtonSymbols.
.SH "QString QSpinBox::cleanText () const \fC[virtual]\fR"
Returns a copy of the current text of the spin box with any prefix and/or suffix and white space at the start and end removed.
.PP
See also text(), setPrefix() and setSuffix().
.SH "QString QSpinBox::currentValueText () \fC[protected]\fR"
Returns the full text calculated from the current value, including any prefix, suffix or special-value text.
.SH "QPushButton* QSpinBox::downButton () const \fC[protected]\fR"
Returns a pointer to the embedded 'down' button.
.SH "QLineEdit* QSpinBox::editor () const \fC[protected]\fR"
Returns a pointer to the embedded QLineEdit.
.SH "bool QSpinBox::eventFilter ( QObject * obj, QEvent * ev ) \fC[virtual protected]\fR"
Intercepts and handles those events coming to the embedded QLineEdit which have special meaning for the QSpinBox.
.PP
Reimplemented from QObject.
.SH "void QSpinBox::interpretText () \fC[virtual protected]\fR"
QSpinBox calls this after the user has manually edited the contents of the spin box (not using the up/down buttons/keys).
.PP
The default implementation of this function interprets the new text using mapTextToValue(). If mapTextToValue() is successful, it changes the spin box' value. If not the value if left unchanged.
.SH "void QSpinBox::leaveEvent ( QEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "int QSpinBox::lineStep () const"
Reimplemented for internal reasons; the API is not affected.
.SH "int QSpinBox::mapTextToValue ( bool * ok ) \fC[virtual protected]\fR"
This virtual function is used by the spin box whenever it needs to interpret the text entered by the user as a value. The default implementation tries to interpret it as an integer in the standard way, and returns the integer value.
.PP
Reimplement this function in in a subclass if you want a specialized spin box, handling something else than integers. It should call text() (or cleanText() ) and return the value corresponding to that text. If the text does not represent a legal value (uninterpretable), the bool pointed to by \fIok\fR should be set to FALSE.
.PP
This function need not be concerned with special-value text, the QSpinBox handles that automatically.
.PP
See also interpretText() and mapValueToText().
.SH "QString QSpinBox::mapValueToText ( int v ) \fC[virtual protected]\fR"
This virtual function is used by the spin box whenever it needs to display value \fIv.\fR The default implementation returns a string containing \fIv\fR printed in the standard way.
.PP
Reimplement this function in in a subclass if you want a specialized spin box, handling something else than integers. This function need not be concerned with prefix or suffix or special-value text, the QSpinBox handles that automatically.
.PP
See also updateDisplay() and mapTextToValue().
.SH "int QSpinBox::maxValue () const"
Reimplemented for internal reasons; the API is not affected.
.SH "int QSpinBox::minValue () const"
Reimplemented for internal reasons; the API is not affected.
.SH "QString QSpinBox::prefix () const \fC[virtual]\fR"
Returns the currently set prefix, or a null string if no prefix is set.
.PP
See also setPrefix(), setSuffix() and suffix().
.SH "void QSpinBox::rangeChange () \fC[virtual protected]\fR"
This method gets called by QRangeControl whenever the range has changed. It adjusts the default validator and updates the display.
.SH "void QSpinBox::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QSpinBox::setButtonSymbols ( ButtonSymbols newSymbols )"
Sets the spin box to display \fInewSymbols\fR on its buttons. \fInewSymbols\fR can be either \fCUpDownArrows\fR (the default) or \fCPlusMinus.\fR
.PP
See also buttonSymbols() and ButtonSymbols.
.SH "void QSpinBox::setEnabled ( bool on ) \fC[virtual slot]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSpinBox::setLineStep ( int i )"
Sets the line step to \fIi.\fR
.PP
Calls the virtual stepChange() function if the new line step is different from the previous setting.
.PP
See also lineStep(), QRangeControl::setSteps() and setRange().
.SH "void QSpinBox::setMaxValue ( int i )"
A convenience function which just calls setRange( minValue(), i )
.PP
See also setRange().
.SH "void QSpinBox::setMinValue ( int i )"
A convenience function which just calls setRange( i, maxValue() )
.PP
See also setRange().
.SH "void QSpinBox::setPrefix ( const QString & text ) \fC[virtual slot]\fR"
Sets the prefix to \fItext.\fR The prefix is prepended to the start of the displayed value. Typical use is to indicate the unit of measurement to the user. eg.
.PP
.nf
.br
    sb->setPrefix("$");
.fi
.PP
To turn off the prefix display, call this function with an empty string as parameter. The default is no prefix.
.PP
See also prefix(), setSuffix() and suffix().
.SH "void QSpinBox::setSpecialValueText ( const QString & text ) \fC[virtual]\fR"
Sets the special-value text to \fItext.\fR If set, the spin box will display this text instead of a numeric value whenever the current value is equal to minVal(). Typically used for indicating that this choice has a special (default) meaning.
.PP
For example, if your spin box allows the user to choose the margin width in a print dialog, and your application is able to automatically choose a good margin width, you can set up the spin box like this:
.PP
.nf
.br
    QSpinBox marginBox( -1, 20, 1, parent, "marginBox" );
.br
    marginBox->setSuffix( " mm" );
.br
    marginBox->setSpecialValueText( "Auto" );
.fi
.PP
The user will then be able to choose a margin width from 0-20 millimeters, or select "Auto" to leave it to the application to choose. Your code must then interpret the spin box value of -1 as the user requesting automatic margin width.
.PP
Neither prefix nor suffix, if set, are added to the special-value text when displayed.
.PP
To turn off the special-value text display, call this function with an empty string as parameter. The default is no special-value text, i.e. the numeric value is shown as usual.
.PP
See also specialValueText().
.SH "void QSpinBox::setSuffix ( const QString & text ) \fC[virtual slot]\fR"
Sets the suffix to \fItext.\fR The suffix is appended to the end of the displayed value. Typical use is to indicate the unit of measurement to the user. eg.
.PP
.nf
.br
    sb->setSuffix("cm");
.fi
.PP
To turn off the suffix display, call this function with an empty string as parameter. The default is no suffix.
.PP
See also suffix(), setPrefix() and prefix().
.SH "void QSpinBox::setValidator ( const QValidator * v ) \fC[virtual]\fR"
Sets the validator to \fIv.\fR The validator controls what keyboard input is accepted when the user is editing in the value field. The default is to use a suitable QIntValidator.
.PP
Use setValidator(0) to turn off input validation (entered input will still be clamped to the range of the spinbox).
.SH "void QSpinBox::setValue ( int value ) \fC[virtual slot]\fR"
Sets the current value of the spin box to \fIvalue.\fR This is QRangeControl::setValue() made available as a slot.
.SH "void QSpinBox::setWrapping ( bool on ) \fC[virtual]\fR"
Setting wrapping to TRUE will allow the value to be stepped from the highest value to the lowest, and vice versa. By default, wrapping is turned off.
.PP
See also wrapping(), minValue(), maxValue() and setRange().
.SH "QSize QSpinBox::sizeHint () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QSizePolicy QSpinBox::sizePolicy () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QString QSpinBox::specialValueText () const"
Returns the currently special-value text, or a null string if no special-value text is currently set.
.PP
See also setSpecialValueText().
.SH "void QSpinBox::stepDown () \fC[virtual slot]\fR"
Decreases the current value one step, wrapping as necessary. This is the same as clicking on the pointing-down button, and can be used for e.g. keyboard accelerators.
.PP
See also stepUp(), subtractLine(), lineStep(), setSteps(), setValue() and value().
.SH "void QSpinBox::stepUp () \fC[virtual slot]\fR"
Increases the current value one step, wrapping as necessary. This is the same as clicking on the pointing-up button, and can be used for e.g. keyboard accelerators.
.PP
See also stepDown(), addLine(), lineStep(), setSteps(), setValue() and value().
.SH "void QSpinBox::styleChange ( QStyle & old ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QString QSpinBox::suffix () const \fC[virtual]\fR"
Returns the currently set suffix, or a null string if no suffix is set.
.PP
See also setSuffix(), setPrefix() and suffix().
.SH "QString QSpinBox::text () const"
Returns the current text of the spin box, including any prefix() and suffix().
.PP
See also value().
.SH "void QSpinBox::textChanged () \fC[protected slot]\fR"
This slot gets called whenever the user edits the text of the spin box.
.SH "QPushButton* QSpinBox::upButton () const \fC[protected]\fR"
Returns a pointer to the embedded 'up' button.
.SH "void QSpinBox::updateDisplay () \fC[virtual protected]\fR"
Updates the contents of the embedded QLineEdit to reflect current value, using mapValueToText(). Also enables/disables the push buttons accordingly.
.PP
See also mapValueToText().
.SH "const QValidator * QSpinBox::validator () const"
Returns the validator which constrains editing for this spin box if there is any, or else 0.
.PP
See also setValidator() and QValidator.
.SH "int QSpinBox::value () const"
Reimplemented for internal reasons; the API is not affected.
.SH "void QSpinBox::valueChange () \fC[virtual protected]\fR"
This method gets called by QRangeControl whenever the value has changed. Updates the display and emits the valueChanged() signals.
.SH "void QSpinBox::valueChanged ( const QString & valueText ) \fC[signal]\fR"
This signal is emitted whenever the valueChanged( int ) signal is emitted, i.e. every time the value of the spin box changes (whatever the cause - by setValue(), by a keyboard accelerator, by mouse clicks etc.).
.PP
The \fIvalueText\fR parameter is the same string that is displayed in the edit field of the spin box.
.PP
See also value().
.SH "void QSpinBox::valueChanged ( int value ) \fC[signal]\fR"
This signal is emitted every time the value of the spin box changes (whatever the cause - by setValue(), by a keyboard accelerator, by mouse clicks etc.).
.PP
Note that it is emitted \fIevery\fR time, not just for the "final" step - if the user clicks 'up' three times, this signal is emitted three times.
.PP
See also value().
.SH "void QSpinBox::wheelEvent ( QWheelEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "bool QSpinBox::wrapping () const"
Returns the current setWrapping() value.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qspinbox.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qspinbox.3qt) and the Qt
version (2.3.2).
