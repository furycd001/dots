'\" t
.TH QStack 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QStack \- Template class that provides a stack
.br
.PP
\fC#include <qstack.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQStack\fR () "
.br
.ti -1c
.BI "\fBQStack\fR ( const QStack<type> & s ) "
.br
.ti -1c
.BI "\fB~QStack\fR () "
.br
.ti -1c
.BI "QStack<type>& \fBoperator=\fR ( const QStack<type> & s ) "
.br
.ti -1c
.BI "bool \fBautoDelete\fR () const"
.br
.ti -1c
.BI "void \fBsetAutoDelete\fR ( bool enable ) "
.br
.ti -1c
.BI "virtual uint \fBcount\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "void \fBpush\fR ( const type * d ) "
.br
.ti -1c
.BI "type* \fBpop\fR () "
.br
.ti -1c
.BI "bool \fBremove\fR () "
.br
.ti -1c
.BI "virtual void \fBclear\fR () "
.br
.ti -1c
.BI "type* \fBtop\fR () const"
.br
.ti -1c
.BI "operator \fBtype*\fR ()const"
.br
.ti -1c
.BI "type* \fBcurrent\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QStack class is a template class that provides a stack.
.PP
QStack is implemented as a template class. Define a template instance QStack<X> to create a stack that operates on pointers to X, or X*.
.PP
A stack is a Last In, First Out (LIFO) structure. Items are added to the top of the stack with push() and retrieved from the top with pop().
.PP
See also Collection Classes
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QStack::QStack ()"
Creates and empty stack.
.SH "QStack::QStack ( const QStack<type> & s )"
Creates a stack by making a shallow copy of another stack.
.SH "QStack::~QStack ()"
Destroys the stack. All items will be deleted if autoDelete() is TRUE.
.SH "QStack::operator type* () const"
Returns a reference to the top item on the stack (most recently pushed). The stack is not changed.
.SH "bool QStack::autoDelete () const"
The same as QCollection::autoDelete().
.PP
See also setAutoDelete().
.SH "void QStack::clear () \fC[virtual]\fR"
Removes all items from the stack, deleting them if autoDelete() is TRUE.
.PP
See also remove().
.PP
Reimplemented from QCollection.
.SH "uint QStack::count () const \fC[virtual]\fR"
Returns the number of items in the stack.
.PP
See also isEmpty().
.PP
Reimplemented from QCollection.
.SH "type* QStack::current () const"
Returns a reference to the top item on the stack (most recently pushed). The stack is not changed.
.SH "bool QStack::isEmpty () const"
Returns TRUE is the stack contains no elements to be popped
.SH "QStack<type>& QStack::operator= ( const QStack<type> & s )"
Sets the contents of this stack by making a shallow copy of another stack. Elements currently in this stack will be deleted if autoDelete() is TRUE.
.SH "type* QStack::pop ()"
Removes the top item from the stack and returns it.
.SH "void QStack::push ( const type * d )"
Adds an element to the top of the stack. Last in, first out.
.SH "bool QStack::remove ()"
Removes the top item from the stack and deletes it if autoDelete() is TRUE. Returns TRUE if there was an item to pop.
.PP
See also clear().
.SH "void QStack::setAutoDelete ( bool enable )"
The same as QCollection::setAutoDelete().
.PP
See also autoDelete().
.SH "type* QStack::top () const"
Returns a reference to the top item on the stack (most recently pushed).
The stack is not changed.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qstack.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qstack.3qt) and the Qt
version (2.3.2).
