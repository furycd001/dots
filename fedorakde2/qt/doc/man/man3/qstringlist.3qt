'\" t
.TH QStringList 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QStringList \- A list of strings
.br
.PP
\fC#include <qstringlist.h>\fR
.PP
Inherits QValueList.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQStringList\fR () "
.br
.ti -1c
.BI "\fBQStringList\fR ( const QStringList & l ) "
.br
.ti -1c
.BI "\fBQStringList\fR ( const QValueList<QString> & l ) "
.br
.ti -1c
.BI "\fBQStringList\fR ( const QString & i ) "
.br
.ti -1c
.BI "\fBQStringList\fR ( const char * i ) "
.br
.ti -1c
.BI "void \fBsort\fR () "
.br
.ti -1c
.BI "QString \fBjoin\fR ( const QString & sep ) const"
.br
.ti -1c
.BI "QStringList \fBgrep\fR ( const QString & " "str" ", bool " "cs" " = TRUE ) const"
.br
.ti -1c
.BI "QStringList \fBgrep\fR ( const QRegExp & expr ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QStringList \fBfromStrList\fR ( const QStrList & ) "
.br
.ti -1c
.BI "QStringList \fBsplit\fR ( const QString & " "sep" ", const QString & " "str" ", bool " "allowEmptyEntries" " = FALSE ) "
.br
.ti -1c
.BI "QStringList \fBsplit\fR ( const QChar & " "sep" ", const QString & " "str" ", bool " "allowEmptyEntries" " = FALSE ) "
.br
.ti -1c
.BI "QStringList \fBsplit\fR ( const QRegExp & " "sep" ", const QString & " "str" ", bool " "allowEmptyEntries" " = FALSE ) "
.br
.in -1c
.SH DESCRIPTION
A list of strings.
.PP
QStringList is basically a QValueList of QString objects. As opposed to QStrList, that stores pointers to characters, QStringList deals with real QString objects. It is the class of choice whenever you work with unicode strings.
.PP
Like QString itself, QStringList objects are implicit shared. Passing them around as value-parameters is both fast and safe.
.PP
Example:
.PP
.nf
.br
        QStringList list;
.br
.br
        // three different ways of appending values:
.br
        list.append( "Torben");
.br
        list += "Warwick";
.br
        list << "Matthias" << "Arnt" << "Paul";
.br
.br
        // sort the list, Arnt's now first
.br
        list.sort();
.br
.br
        // print it out
.br
        for ( QStringList::Iterator it = list.begin(); it != list.end(); ++it ) {
.br
            printf( "%s \\n", (*it).latin1() );
.br
        }
.fi
.PP
Convenience methods such as sort(), split(), join() and grep() make working with QStringList easy.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QStringList::QStringList ()"
Creates an empty list.
.SH "QStringList::QStringList ( const QString & i )"
Constructs a string list consisting of the single string \fIi.\fR To make longer lists easily, use:
.PP
.nf
.br
    QString s1,s2,s3;
.br
    ...
.br
    QStringList mylist = QStringList() << s1 << s2 << s3;
.fi
.SH "QStringList::QStringList ( const QValueList<QString> & l )"
Constructs a new string list that is a copy of \fIl.\fR
.SH "QStringList::QStringList ( const QStringList & l )"
Creates a copy of the list. This function is very fast since QStringList is implicit shared. However, for the programmer this is the same as a deep copy. If this list or the original one or some other list referencing the same shared data is modified, then the modifying list makes a copy first.
.SH "QStringList::QStringList ( const char * i )"
Constructs a string list consisting of the single latin-1 string \fIi.\fR
.SH "QStringList QStringList::fromStrList ( const QStrList & ascii ) \fC[static]\fR"
Converts from a QStrList (ASCII) to a QStringList (Unicode).
.SH "QStringList QStringList::grep ( const QRegExp & expr ) const"
Returns a list of all strings containing a substring that matches the regular expression \fIexpr.\fR
.SH "QStringList QStringList::grep ( const QString & str, bool cs = TRUE ) const"
Returns a list of all strings containing the substring \fIstr.\fR
.PP
If \fIcs\fR is TRUE, the grep is done case sensitively, else not.
.SH "QString QStringList::join ( const QString & sep ) const"
Joins the stringlist into a single string with each element separated by \fIsep.\fR
.PP
See also split().
.SH "void QStringList::sort ()"
Sorts the list of strings in ascending order.
.PP
Sorting is very fast. It uses the Qt Template Library's efficient HeapSort implementation that operates in O(n*log n).
.SH "QStringList QStringList::split ( const QChar & sep, const QString & str, bool allowEmptyEntries = FALSE ) \fC[static]\fR"
Splits the string \fIstr\fR using \fIsep\fR as separator. Returns the list of strings. If \fIallowEmptyEntries\fR is TRUE, also empty entries are inserted into the list, else not. So if you have a string 'abc..d.e.', a list which contains 'abc', 'd', and 'e' would be returned if \fIallowEmptyEntries\fR is FALSE, but a list containing 'abc', '', 'd', 'e' and '' would be returned if \fIallowEmptyEntries\fR is TRUE. If \fIstr\fR doesn't contain \fIsep,\fR a stringlist with one item, which is the same as \fIstr,\fR is returned.
.PP
See also join().
.SH "QStringList QStringList::split ( const QRegExp & sep, const QString & str, bool allowEmptyEntries = FALSE ) \fC[static]\fR"
Splits the string \fIstr\fR using the regular expression \fIsep\fR as separator. Returns the list of strings. If \fIallowEmptyEntries\fR is TRUE, also empty entries are inserted into the list, else not. So if you have a string 'abc..d.e.', a list which contains 'abc', 'd', and 'e' would be returned if \fIallowEmptyEntries\fR is FALSE, but a list containing 'abc', '', 'd', 'e' and '' would be returned if \fIallowEmptyEntries\fR is TRUE. If \fIstr\fR doesn't contain \fIsep,\fR a stringlist with one item, which is the same as \fIstr,\fR is returned.
.PP
See also join().
.SH "QStringList QStringList::split ( const QString & sep, const QString & str, bool allowEmptyEntries = FALSE ) \fC[static]\fR"
Splits the string \fIstr\fR using \fIsep\fR as separator. Returns the list of strings. If \fIallowEmptyEntries\fR is TRUE, also empty entries are inserted into the list, else not. So if you have a string 'abc..d.e.', a list which contains 'abc', 'd', and 'e' would be returned if \fIallowEmptyEntries\fR is FALSE, but a list containing 'abc', '', 'd', 'e' and '' would be returned if \fIallowEmptyEntries\fR is TRUE. If \fIstr\fR doesn't contain \fIsep,\fR a stringlist with one item, which is the same as \fIstr,\fR is returned.
.PP
See also  join().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qstringlist.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qstringlist.3qt) and the Qt
version (2.3.2).
