'\" t
.TH QUrlOperator 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QUrlOperator \- Common operations on URLs (
.br
.PP
\fC#include <qurloperator.h>\fR
.PP
Inherits QObject and QUrl.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQUrlOperator\fR () "
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QString & urL ) "
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QUrlOperator & url ) "
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QUrlOperator & " "url" ", const QString & " "relUrl" ", bool " "checkSlash" " = FALSE ) "
.br
.ti -1c
.BI "virtual \fB~QUrlOperator\fR () "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBlistChildren\fR () "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBmkdir\fR ( const QString & dirname ) "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBremove\fR ( const QString & filename ) "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBrename\fR ( const QString & " "oldname" ", const QString & newname ) "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBget\fR ( const QString & location = QString::null ) "
.br
.ti -1c
.BI "virtual const QNetworkOperation* \fBput\fR ( const QByteArray & " "data" ", const QString & location = QString::null ) "
.br
.ti -1c
.BI "virtual QList<QNetworkOperation> \fBcopy\fR ( const QString & " "from" ", const QString & " "to" ", bool " "move" " = FALSE ) "
.br
.ti -1c
.BI "virtual void \fBcopy\fR ( const QStringList & " "files" ", const QString & " "dest" ", bool " "move" " = FALSE ) "
.br
.ti -1c
.BI "virtual bool \fBisDir\fR ( bool * " "ok" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBsetNameFilter\fR ( const QString & nameFilter ) "
.br
.ti -1c
.BI "QString \fBnameFilter\fR () const"
.br
.ti -1c
.BI "virtual QUrlInfo \fBinfo\fR ( const QString & entry ) const"
.br
.ti -1c
.BI "virtual void \fBstop\fR () "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBnewChildren\fR ( const QValueList<QUrlInfo> &, QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBfinished\fR ( QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBstart\fR ( QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBcreatedDirectory\fR ( const QUrlInfo &, QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBremoved\fR ( QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBitemChanged\fR ( QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBdata\fR ( const QByteArray &, QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBdataTransferProgress\fR ( int " "bytesDone" ", int " "bytesTotal" ", QNetworkOperation * res ) "
.br
.ti -1c
.BI "void \fBstartedNextCopy\fR ( const QList<QNetworkOperation> & lst ) "
.br
.ti -1c
.BI "void \fBconnectionStateChanged\fR ( int " "state" ", const QString & data ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBclearEntries\fR () "
.br
.ti -1c
.BI "void \fBgetNetworkProtocol\fR () "
.br
.ti -1c
.BI "void \fBdeleteNetworkProtocol\fR () "
.br
.in -1c
.SH DESCRIPTION
The QUrlOperator class provides common operations on URLs (get() and more).
.PP
This class operates on hierarchical structures (like filesystems) using URLs. Its API allows do all common operations on it (listing children, removing children, renaming, etc.). But the class itself contains no functionality for that. It uses the functionality of registered network protocols. This means, depending of the protocol of the URL, it uses a fitting network protocol class for the operations. In detail, each of the operation methods of QUrlOperator create a QNetworkOperation object which describes the operation and puts it into the operation queue of the used network protocol. If no fitting protocol could be found (because no implementation of the needed network protocol is registered), the url operator emits errors. Also not each protocol supports each operation - but the error handling deals with this problem.
.PP
A QUrlOperator can be used like this (for e.g. downloading a file)
.PP
.nf
.br
  QUrlOperator op;
.br
  op.copy( QString("ftp://ftp.trolltech.com/qt/source/qt-2.1.0.tar.gz"), "file:/tmp", FALSE );
.fi
.PP
Now, you also will connect to some signals of the QUrlOperator to get informed about success, errors, progress and more things.
.PP
Of course an implementation for the FTP protocol has to be registered for this example. In the Qt Network Extension Library there is an implementation of the FTP protocol.
.PP
For more information about the Qt Network Architecture take a look at the Qt Network Documentation.
.PP
See also QNetworkProtocol and QNetworkOperation.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QUrlOperator::QUrlOperator ()"
Constructs a QUrlOperator with an empty (i.e. invalid) URL.
.SH "QUrlOperator::QUrlOperator ( const QString & url )"
Constructs a QUrlOperator using \fIurl\fR and parses this string.
.PP
You can pass strings such as "/home/qt": in this case the protocol "file" is assumed.
.SH "QUrlOperator::QUrlOperator ( const QUrlOperator & url )"
Copy constructor.
.SH "QUrlOperator::QUrlOperator ( const QUrlOperator & url, const QString & relUrl, bool checkSlash = FALSE )"
Constructs a QUrlOperator. The URL on which this QUrlOperator works on is constructed out of the arguments \fIurl, relUrl\fR and \fIcheckSlash;\fR the meaning of those arguments is the same as the corresponding QUrl constructor takes.
.SH "QUrlOperator::~QUrlOperator () \fC[virtual]\fR"
Destructor.
.SH "bool QUrlOperator::cdUp () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "bool QUrlOperator::checkValid () \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QUrlOperator::clearEntries () \fC[virtual protected]\fR"
Clears the cache of children.
.SH "void QUrlOperator::connectionStateChanged ( int state, const QString & data ) \fC[signal]\fR"
This signal is emitted whenever the state of the connection of the network protocol of the url operator is changed. \fIstate\fR describes the new state, which is one of QNetworkProtocol::ConHostFound, QNetworkProtocol::ConConnected, QNetworkProtocol::ConClosed This enum is defined in QNetworkProtocol \fIdata\fR is a message text.
.SH "QList<QNetworkOperation> QUrlOperator::copy ( const QString & from, const QString & to, bool move = FALSE ) \fC[virtual]\fR"
Copies the file \fIfrom\fR to \fIto.\fR If \fImove\fR is TRUE, the file is moved (copied and removed). \fIfrom\fR has to point to a file and \fIto\fR must point to a directory (into which \fIfrom\fR is copied). The copying is done using get() and put() operations. If you want to get notified about the progress of the operation, connect to the dataTransferProgress() signal. But you have to know, that the get() and the put() operations emit this signal through the QUrlOperator! So, the number of transferred and total bytes which you get as argument in this signal isn't related to the the whole copy operation, but first to the get() and then to the put() operation. So always check for the type of the operation from which the signal comes (you get this by asking for the type of the QNetworkOperation pointer you also get as last argument of this signal).
.PP
Also at the end finished() (on success or failure) is emitted, so check the state of the network operation object to see if the operation was successful or not.
.PP
As a copy operation consists of multiple operations (get(), put() and maybe remove() (depending if you copy or move)) this method doesn't return a single QNetworkOperation, but a list of them. They are in the order get(), put(), remove(). As discussed, the third one (remove) is optional.
.PP
See also get() and put().
.SH "void QUrlOperator::copy ( const QStringList & files, const QString & dest, bool move = FALSE ) \fC[virtual]\fR"
Copies \fIfiles\fR to the directory \fIdest.\fR If \fImove\fR is TRUE, the files are moved and not copied. \fIdest\fR has to point to a directory.
.PP
This method is just a convenience function of the copy method above. It calls the copy above for each entry in \fIfiles\fR one after the other. You don't get a result from this method, but each time a new copy is started, startedNextCopy() is emitted, with a list of QNetworkOperations which describe the new copy operation.
.SH "void QUrlOperator::createdDirectory ( const QUrlInfo & i, QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted when mkdir() has been succesful and the directory has been created. \fIi\fR holds the information about the new directory. \fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on and using op->arg( 0 ) you also get the filename of the new directory.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::data ( const QByteArray & data, QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted when new \fIdata\fR has been received after e.g. calling get() or put(). \fIop\fR holds the name of the file which data is retrieved in the first argument and the data in the second argument (raw). You get them with op->arg( 0 ) and op->rawArg( 1 ).
.PP
\fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::dataTransferProgress ( int bytesDone, int bytesTotal, QNetworkOperation * op ) \fC[signal]\fR"
When transferring data (using put() or get()) this signal is emitted during the progress. \fIbytesDone\fR tells how many bytes of \fIbytesTotal\fR are transferred. More information about the operation is stored in the \fIop,\fR the pointer to the network operation which is processed. \fIbytesTotal\fR may be -1, which means that the number of total bytes is not known.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::deleteNetworkProtocol () \fC[protected]\fR"
Delete the currently used network protocol.
.SH "void QUrlOperator::finished ( QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted when an operation of some sort finished. This signal is emitted always, this means on success and on failure. \fIop\fR is the pointer to the operation object, which contains all infos of the operation which has been finished, including the state and so on. To check if the operation was successful or not, check the state and error code of the operation object.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::get ( const QString & location = QString::null ) \fC[virtual]\fR"
Tells the network protocol to get data from \fIlocation\fR or, if this is QString::null, to get data from the location to which this URL points (see QUrl::fileName() and QUrl::encodedPathAndQuery()). What exactly happens then is depending on the network protocol. When data comes in, the data() signal is emitted. As it's unlikely that all the data comes in at once, multiple data() signals will be emitted. During processing the operation the dataTransferProgress() is emitted. Also at the end finished() (on success or failure) is emitted, so check the state of the network operation object to see if the operation was successful or not.
.PP
Now, if \fIlocation\fR is QString::null, the path of this QUrlOperator should point to a file when you use this operation. If \fIlocation\fR is not empty, it can be relative (a child of the path to which the QUrlOperator points) or an absolute URL.
.PP
E.g. for getting a Web page you might do something like
.PP
.nf
.br
  QUrlOperator op( "http://www.whatever.org/cgi-bin/search.pl?cmd=Hallo" );
.br
  op.get();
.fi
.PP
But as for the most other operations it is required that the path of the QUrlOperator points to a directory, you could do following if you want e.g. download a file
.PP
.nf
.br
  QUrlOperator op( "ftp://ftp.whatever.org/pub" );
.br
  // do some other stuff like op.listChildren() or op.mkdir( "new Dir" )
.br
  op.get( "a_file.txt" );
.fi
.PP
This will get the data of ftp://ftp.whatever.org/pub/a_file.txt.
.PP
But \fBnever\fR do something like
.PP
.nf
.br
  QUrlOperator op( "http://www.whatever.org/cgi-bin" );
.br
  op.get( "search.pl?cmd=Hallo" );
.fi
.PP
This means if \fIlocation\fR is not empty and relative, it must not contain any queries or references, just the name of a child. So, if you need to specify a query or reference do it like in the first example or specify the full URL (like http://www.whatever.org/cgi-bin/search.pl?cmd=Hallo) as \fIlocation.\fR
.PP
See also copy().
.SH "void QUrlOperator::getNetworkProtocol () \fC[protected]\fR"
Finds a network protocol for the URL and deletes the old network protocol.
.SH "QUrlInfo QUrlOperator::info ( const QString & entry ) const \fC[virtual]\fR"
Returns the URL information for the child \fIentry\fR or en empty QUrlInfo object of there is no information available about \fIentry.\fR
.SH "bool QUrlOperator::isDir ( bool * ok = 0 ) \fC[virtual]\fR"
Returns TRUE if the url is a directory, else returns FALSE. This may not always work correctly, if the protocol of the URL is something else than file (local filesystem)! If you pass a bool as \fIok\fR argument, this is set to TRUE, if the result of this method is correct for sure, else \fIok\fR is set to FALSE.
.SH "void QUrlOperator::itemChanged ( QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted whenever a file, which is a child of this URL, has been changed e.g. by successfully calling rename(). \fIop\fR holds the original and the new filenames in the first and second arguments. You get them with op->arg( 0 ) and op->arg( 1 ).
.PP
\fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::listChildren () \fC[virtual]\fR"
Starts listing the children of this URL (e.g. of a directory). The signal start() is emitted, before the first entry is listed, and after the last one finished() is emitted. For each list of new entries, the newChildren() signals is emitted. If an error occurs, also the signal finished() is emitted, so check the state of the network operation pointer!
.PP
As the operation will not be executed immediately, a pointer to the QNetworkOperation object, which is created by this method, is returned. This object contains all data about the operation and is used to refer to this operation later (e.g. in the signals which are emitted by the QUrlOperator). The return value can be also 0 if the operation object couldn't be created.
.PP
The path of this QUrlOperator has to point to a directory, because the children of this directory will be listed, and not to a file, else this operation might not work!.
.SH "const QNetworkOperation * QUrlOperator::mkdir ( const QString & dirname ) \fC[virtual]\fR"
Tries to create a directory (child) with the name \fIdirname.\fR If it has been successful a newChildren() signal with the new child is emitted, and the createdDirectory() signal with the information about the new child is emitted too. Also finished() (on success or failure) is emitted, after the operation has been processed, so check the state of the network operation object to see if the operation was successful or not.
.PP
As the operation will not be executed immediately, a pointer to the QNetworkOperation object, which is created by this method, is returned. This object contains all data about the operation and is used to refer to this operation later (e.g. in the signals which are emitted by the QUrlOperator). The return value can be also 0 if the operation object couldn't be created.
.PP
This path of this QUrlOperator has to point to a directory, as the new directory will be created in this path, and not to a file, else this operation might not work!.
.SH "QString QUrlOperator::nameFilter () const"
Returns the name filter of the URL
.PP
See also QUrlOperator::setNameFilter() and QDir::nameFilter().
.SH "void QUrlOperator::newChildren ( const QValueList<QUrlInfo> & i, QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted after listChildren() was called and new children (e.g. files) have been read from a list of files. \fIi\fR holds the information about the new children. \fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "QUrlOperator& QUrlOperator::operator= ( const QString & url )"
Reimplemented for internal reasons; the API is not affected.
.SH "QUrlOperator& QUrlOperator::operator= ( const QUrlOperator & url )"
Reimplemented for internal reasons; the API is not affected.
.SH "bool QUrlOperator::parse ( const QString & url ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "const QNetworkOperation * QUrlOperator::put ( const QByteArray & data, const QString & location = QString::null ) \fC[virtual]\fR"
Tells the network protocol to put \fIdata\fR to \fIlocation,\fR or if this is empty (QString::null) it puts the \fIdata\fR to the location to which the URL points. What exactly happens is depending on the network protocol. Also depending on the network protocol after putting data some data might come back. In this case the data() signal is emitted. During processing the operation the dataTransferProgress() is emitted. Also at the end finished() (on success or failure) is emitted, so check the state of the network operation object to see if the operation was successful or not.
.PP
Now, if \fIlocation\fR is QString::null, the path of this QUrlOperator should point to a file when you use this operation. If \fIlocation\fR is not empty, it can be relative (a child of the path to which the QUrlOperator points) or an absolute URL.
.PP
E.g. for putting some data to a file you can do
.PP
.nf
.br
  QUrlOperator op( "ftp://ftp.whatever.com/home/me/filename" );
.br
  op.put( data );
.fi
.PP
But as for the most other operations it is required that the path of the QUrlOperator points to a directory, you could do following if you want e.g. upload data to a file
.PP
.nf
.br
  QUrlOperator op( "ftp://ftp.whatever.com/home/me" );
.br
  // do some other stuff like op.listChildren() or op.mkdir( "new Dir" )
.br
  op.put( data, "filename" );
.fi
.PP
This will upload the data to ftp://ftp.whatever.com/home/me/filename.
.PP
See also copy().
.SH "const QNetworkOperation * QUrlOperator::remove ( const QString & filename ) \fC[virtual]\fR"
Tries to remove the file (child) \fIfilename.\fR If it has been successful the signal removed() is emitted. Also finished() (on success or failure) is emitted after the operation has been processed, so check the state of the network operation object to see if the operation was successful or not.
.PP
As the operation will not be executed immediately, a pointer to the QNetworkOperation object, which is created by this method, is returned. This object contains all data about the operation and is used to refer to this operation later (e.g. in the signals which are emitted by the QUrlOperator). The return value can be also 0 if the operation object couldn't be created.
.PP
This path of this QUrlOperator has to point to a directory, because if \fIfilename\fR is relative, it will be tried to remove it in this directory, and not to a file, else this operation might not work!.
.SH "void QUrlOperator::removed ( QNetworkOperation * op ) \fC[signal]\fR"
This signal is emitted when remove() has been succesful and the file has been removed. \fIop\fR holds the filename of the removed file in the first argument, you get it with op->arg( 0 ).
.PP
\fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::rename ( const QString & oldname, const QString & newname ) \fC[virtual]\fR"
Tries to rename the file (child) \fIoldname\fR by \fInewname.\fR If it has been successful the signal itemChanged() is emitted. Also finished() (on success or failure) is emitted after the operation has been processed, so check the state of the network operation object to see if the operation was successful or not.
.PP
As the operation will not be executed immediately, a pointer to the QNetworkOperation object, which is created by this method, is returned. This object contains all data about the operation and is used to refer to this operation later (e.g. in the signals which are emitted by the QUrlOperator). The return value can be also 0 if the operation object couldn't be created.
.PP
This path of this QUrlOperator has to point to a directory, as \fIoldname\fR and \fInewname\fR are handled relatively to this directory, and not to a file, else this operation might not work!.
.SH "void QUrlOperator::reset () \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QUrlOperator::setNameFilter ( const QString & nameFilter ) \fC[virtual]\fR"
Sets the name filter of the URL
.PP
See also QDir::setNameFilter().
.SH "void QUrlOperator::setPath ( const QString & path ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.SH "void QUrlOperator::start ( QNetworkOperation * op ) \fC[signal]\fR"
Some operations (like listChildren()) emit this signal when they start processing the operation. \fIop\fR is the pointer to the operation object, which contains all infos of the operation, including the state and so on.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::startedNextCopy ( const QList<QNetworkOperation> & lst ) \fC[signal]\fR"
This signal is emitted if copy() started a new copy operation. \fIlst\fR contains all QNetworkOperations which describe this copy operation.
.PP
See also copy().
.SH "void QUrlOperator::stop () \fC[virtual]\fR"
Stops the current network operation which is just processed and
removes all waiting network operations of this QUrlOperator.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qurloperator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qurloperator.3qt) and the Qt
version (2.3.2).
