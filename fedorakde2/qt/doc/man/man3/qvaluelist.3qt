'\" t
.TH QValueList 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QValueList \- Value based template class that provides doubly linked lists
.br
.PP
\fC#include <qvaluelist.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQValueList\fR () "
.br
.ti -1c
.BI "\fBQValueList\fR ( const QValueList<T> & l ) "
.br
.ti -1c
.BI "\fB~QValueList\fR () "
.br
.ti -1c
.BI "QValueList<T>& \fBoperator=\fR ( const QValueList<T> & l ) "
.br
.ti -1c
.BI "QValueList<T> \fBoperator+\fR ( const QValueList<T> & l ) const"
.br
.ti -1c
.BI "QValueList<T>& \fBoperator+=\fR ( const QValueList<T> & l ) "
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QValueList<T> & l ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QValueList<T> & l ) const"
.br
.ti -1c
.BI "Iterator \fBbegin\fR () "
.br
.ti -1c
.BI "ConstIterator \fBbegin\fR () const"
.br
.ti -1c
.BI "Iterator \fBend\fR () "
.br
.ti -1c
.BI "ConstIterator \fBend\fR () const"
.br
.ti -1c
.BI "Iterator \fBfromLast\fR () "
.br
.ti -1c
.BI "ConstIterator \fBfromLast\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "Iterator \fBinsert\fR ( Iterator " "it" ", const T & x ) "
.br
.ti -1c
.BI "Iterator \fBappend\fR ( const T & x ) "
.br
.ti -1c
.BI "Iterator \fBprepend\fR ( const T & x ) "
.br
.ti -1c
.BI "Iterator \fBremove\fR ( Iterator it ) "
.br
.ti -1c
.BI "void \fBremove\fR ( const T & x ) "
.br
.ti -1c
.BI "T& \fBfirst\fR () "
.br
.ti -1c
.BI "const T& \fBfirst\fR () const"
.br
.ti -1c
.BI "T& \fBlast\fR () "
.br
.ti -1c
.BI "const T& \fBlast\fR () const"
.br
.ti -1c
.BI "T& \fBoperator[]\fR ( uint i ) "
.br
.ti -1c
.BI "const T& \fBoperator[]\fR ( uint i ) const"
.br
.ti -1c
.BI "Iterator \fBat\fR ( uint i ) "
.br
.ti -1c
.BI "ConstIterator \fBat\fR ( uint i ) const"
.br
.ti -1c
.BI "Iterator \fBfind\fR ( const T & x ) "
.br
.ti -1c
.BI "ConstIterator \fBfind\fR ( const T & x ) const"
.br
.ti -1c
.BI "Iterator \fBfind\fR ( Iterator " "it" ", const T & x ) "
.br
.ti -1c
.BI "ConstIterator \fBfind\fR ( ConstIterator " "it" ", const T & x ) const"
.br
.ti -1c
.BI "int \fBfindIndex\fR ( const T & x ) const"
.br
.ti -1c
.BI "uint \fBcontains\fR ( const T & x ) const"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "void \fBclear\fR () "
.br
.ti -1c
.BI "QValueList<T>& \fBoperator+=\fR ( const T & x ) "
.br
.ti -1c
.BI "QValueList<T>& \fBoperator<<\fR ( const T & x ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBdetach\fR () "
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "QDataStream& \fBoperator<<\fR (QDataStream & " "s" ", const QValueList<T> & " "l" ")"
.br
.ti -1c
.BI "QDataStream& \fBoperator>>\fR (QDataStream & " "s" ", QValueList<T> & " "l" ")"
.br
.in -1c
.SH DESCRIPTION
The QValueList class is a value based template class that provides doubly linked lists.
.PP
Define a template instance QValueList<X> to create a list of values which all have the class X. Please notice that QValueList does not store pointers to the members of the list. It holds a copy of every member. That is the reason why this kind of classes are called "value based" while QList and QDict are "reference based".
.PP
Some classes can not be used within a QValueList, for example everything derived from QObject and thus all classes that implement widgets. Only values can be used in a QValueList. To qualify as a value, the class must provide
.TP
a copy constructor,
.TP
an assignment operator and
.TP
a default constructor, i.e. a constructor that does not take any arguments.
.PP
Note that C++ defaults to field-by-field assignment operators and copy constructors if no explicit version is supplied. In many cases, this is sufficient.
.PP
Example:
.PP
.nf
.br
    #include <qvaluelist.h>
.br
    #include <qstring.h>
.br
    #include <stdio.h>
.br
.br
    class Employee
.br
    {
.br
    public:
.br
        Employee(): s(0) {}
.br
        Employee( const QString& name, int salary )
.br
            : n(name), s(salary)
.br
        {}
.br
.br
        QString     name()   const              { return n; }
.br
        int         salary() const              { return s; }
.br
        void        setSalary( int salary )     { s = salary; }
.br
    private:
.br
        QString     n;
.br
        int         s;
.br
    };
.br
.br
    void main()
.br
    {
.br
        typedef QValueList<Employee> EmployeeList;
.br
        EmployeeList list;              // list of Employee
.br
.br
        list.append( Employee("Bill", 50000) );
.br
        list.append( Employee("Steve",80000) );
.br
        list.append( Employee("Ron",  60000) );
.br
.br
        Employee joe( "Joe", 50000 );
.br
        list.append( joe );
.br
        joe.setSalary( 4000 );
.br
.br
        EmployeeList::Iterator it;
.br
        for( it = list.begin(); it != list.end(); ++it )
.br
            printf( "%s earns %d\\n", (*it).name().latin1(), (*it).salary().latin1() );
.br
    }
.fi
.PP
Program output:
.PP
.nf
.br
        Bill earns 50000
.br
        Steve earns 80000
.br
        Ron earns 60000
.br
        Joe earns 50000
.fi
.PP
As you can see, the latest changes to Joes salary did not affect the value in the list because the list created a copy of Joes entry.
.PP
There are three ways of finding items in the list. The first one is by using the at() function. It returns an iterator. The advantages of getting an iterator is that you can now move forward or backward from this position by incrementing/decrementing the iterator. To get the amount of items in the list call count(). Valid indices are 0..count().
.PP
The second way of accessing a list is with operator[]. That means you can address it like an array. The return value is a reference to the value stored in the list. There exist two versions of this operator. The first one is const and returns a const reference to the value. The second on is non const and returns a non const reference to the value. It is up to your compiler to choose the correct one.
.PP
The third method is to use the functions begin() and end(). With a simple for loop as shown in the example you can iterate over the complete list. It is save to have multiple iterators at the same time. If some member of the list is removed then only iterators pointing to the removed member become invalid. Inserting in the list does not invalidate any iterator. For convenience the function last() returns an iterator for the last and first() for the first element in the list.
.PP
In addition you can search items in the list with the find() function. It exists in a const and a non const version. It starts searching from the beginning of the list, but another flavor of the find() function allows you to specify where searching should start. If you just want to know wether a certain item is at least once in the list, then you can use the contains() function.
.PP
Since QValueList is value based there is no need to care about deleting elements in the list. The list holds its own copies and will free them if the corresponding member or the list itself is deleted. You can force the list to free all of its item with clear().
.PP
QValueList is implicitly shared. That means you can just make copies of the list in time O(1). If multiple QValueList instances share the same data and one is doing a modification of the lists data then this modifying instance makes a copy and modifies its private copy. So it does not affect the other instances. From a developers point of view you can think that a QValueList and a copy of this list have nothing to do with each other. Developers may only notice that copying is very fast. People known to a CPUs MMU architecture will know this pattern as "copy on write".
.PP
There exist three functions to insert items in the list. append() inserts an item at the end, prepend() inserts at the beginning and insert() inserts in front of the position given by an iterator.
.PP
Items can be removed from the list in two ways. The first is to pass an iterator to the remove(). The other possibility is to pass a value to remove() which will delete all members which match this value.
.PP
Lists can be sorted with the algorithms provided by the Qt Template Library, for example with qHeapSort():
.PP
Example:
.PP
.nf
.br
          QValueList l;
.br
          l.append( 5 );
.br
          l.append( 8 );
.br
          l.append( 3 );
.br
          l.append( 4 );
.br
          qHeapSort( l );
.fi
.PP
See also QValueListIterator.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QValueList::QValueList ()"
Constructs an empty list.
.SH "QValueList::QValueList ( const QValueList<T> & l )"
Constructs a copy of \fIl.\fR
.PP
This operation costs O(1) time since QValueList is implicit shared. The first instance applying modifications to a shared list will create a copy which takes in turn O(n) time. However returning a QValueList from a function is very fast.
.SH "QValueList::~QValueList ()"
Destroys the list. References to the values in the list and all iterators of this list become invalidated. Since QValueList is highly tuned for performance you wont see warnings if you use invalid iterators, because it is impossible for an iterator to check wether it is valid or not.
.SH "Iterator QValueList::append ( const T & x )"
Inserts the value \fIx\fR at the end of the list.
.PP
Returns an iterator pointing at the inserted item.
.PP
See also insert() and prepend().
.SH "ConstIterator QValueList::at ( uint i ) const"
Returns an iterator pointing to the item at position \fIi\fR in the list, or end() if the index is out of range.
.SH "Iterator QValueList::at ( uint i )"
Returns an iterator pointing to the item at position \fIi\fR in the list, or end() if the index is out of range.
.SH "ConstIterator QValueList::begin () const"
Returns an iterator pointing to the first element in the list. This iterator equals end() if the list is empty;
.PP
See also first() and end().
.SH "Iterator QValueList::begin ()"
Returns an iterator pointing to the first element in the list. This iterator equals end() if the list is empty;
.PP
See also first() and end().
.SH "void QValueList::clear ()"
Removes all items from the list.
.PP
See also remove().
.SH "uint QValueList::contains ( const T & x ) const"
Counts and returns the number of occurrences of the value \fIx\fR in the list.
.SH "uint QValueList::count () const"
Returns the number of items in the list.
.PP
See also isEmpty().
.SH "void QValueList::detach () \fC[protected]\fR"
If the list does not share its data with another QValueList instance, then nothing happens, otherwise the function creates a new copy of this data and detaches from the shared one. This function is called whenever the list is modified. The implicit sharing mechanism is implemented this way.
.SH "ConstIterator QValueList::end () const"
Returns an iterator pointing behind the last element in the list. This iterator equals begin() if the list is empty.
.PP
See also last() and begin().
.SH "Iterator QValueList::end ()"
Returns an iterator pointing behind the last element in the list. This iterator equals begin() if the list is empty.
.PP
See also last() and begin().
.SH "ConstIterator QValueList::find ( ConstIterator it, const T & x ) const"
Finds the first occurrence of \fIx\fR in the list starting at the position given by \fIit.\fR
.PP
Returns end() if no item did match.
.SH "ConstIterator QValueList::find ( const T & x ) const"
Finds the first occurrence of \fIx\fR in the list.
.PP
Returns end() if no item did match.
.SH "Iterator QValueList::find ( Iterator it, const T & x )"
Finds the first occurrence of \fIx\fR in the list starting at the position given by \fIit.\fR
.PP
Returns end() if no item did match.
.SH "Iterator QValueList::find ( const T & x )"
Finds the first occurrence of \fIx\fR in the list.
.PP
Returns end() if no item did match.
.SH "int QValueList::findIndex ( const T & x ) const"
Returns the first index of the value \fIx\fR in the list or -1 if no such value can be found in the list.
.SH "T& QValueList::first ()"
Returns a reference to the first item in the list or the item referenced by end() if no such items exists. Please note that you may not change the value the end() Iterator is pointing to.
.PP
See also begin() and last().
.SH "const T& QValueList::first () const"
Returns a reference to the first item in the list or the item referenced by end() if no such items exists.
.PP
See also begin() and last().
.SH "ConstIterator QValueList::fromLast () const"
Returns an iterator pointing to the last element in the list or end() if no such item exists.
.PP
See also last().
.SH "Iterator QValueList::fromLast ()"
Returns an iterator pointing to the last element in the list or end() if no such item exists.
.PP
See also last().
.SH "Iterator QValueList::insert ( Iterator it, const T & x )"
Inserts the value \fIx\fR in front of the iterator \fIit.\fR
.PP
Returns an iterator pointing at the inserted item.
.PP
See also append() and prepend().
.SH "bool QValueList::isEmpty () const"
Returns TRUE if the list is empty, i.e. count() == 0. Returns FALSE otherwise.
.PP
See also count().
.SH "T& QValueList::last ()"
Returns a reference to the last item in the list or the item referenced by end() if no such item exists. Please note that you may not change the value the end() Iterator is pointing to.
.PP
See also end(), first() and fromLast().
.SH "const T& QValueList::last () const"
Returns a reference to the last item in the list or the item referenced by end() if no such item exists.
.PP
See also end(), first() and fromLast().
.SH "bool QValueList::operator!= ( const QValueList<T> & l ) const"
Compares both lists.
.PP
Returns TRUE if both list are unequal.
.SH "QValueList<T> QValueList::operator+ ( const QValueList<T> & l ) const"
Creates a new list and fills it with the elements of this list. Then the elements of \fIl\fR are appended.
.PP
Returns the new list.
.SH "QValueList<T>& QValueList::operator+= ( const QValueList<T> & l )"
Adds \fIlist\fR to this list.
.PP
Returns a reference to this list.
.SH "QValueList<T>& QValueList::operator+= ( const T & x )"
Adds the value \fIx\fR to the end of the list.
.PP
Returns a reference to the list.
.SH "QValueList<T>& QValueList::operator<< ( const T & x )"
Adds the value \fIx\fR to the end of the list.
.PP
Returns a reference to the list.
.SH "QValueList<T>& QValueList::operator= ( const QValueList<T> & l )"
Assigns \fIl\fR to this list and returns a reference to this list.
.PP
All iterators of the current list become invalidated by this operation. The cost of such an assignment is O(1) since QValueList is implicitly shared.
.SH "bool QValueList::operator== ( const QValueList<T> & l ) const"
Compares both lists.
.PP
Returns TRUE if both list are equal.
.SH "T& QValueList::operator[] ( uint i )"
Returns a reference to the item with index \fIi\fR in the list. It is up to you to check wether this item really exists. You can do that easily with the count() function. However this operator does not check wether \fIi\fR is in range and will deliver undefined results if it does not exist. In contrast to the const operator[] you may manipulate the value returned by this operator.
.SH "const T& QValueList::operator[] ( uint i ) const"
Returns a const reference to the item with index \fIi\fR in the list. It is up to you to check wether this item really exists. You can do that easily with the count() function. However this operator does not check wether \fIi\fR is in range and will deliver undefined results if it does not exist.
.SH "Iterator QValueList::prepend ( const T & x )"
Inserts the value \fIx\fR at the beginning of the list.
.PP
Returns an iterator pointing at the inserted item.
.PP
See also insert() and append().
.SH "Iterator QValueList::remove ( Iterator it )"
Removes the item at position \fIit\fR in the list.
.PP
Returns an iterator pointing to the item following the removed on or end() if the last item was deleted.
.PP
See also clear().
.SH "void QValueList::remove ( const T & x )"
Removes all items which have the value \fIx.\fR
.PP
See also clear().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream& operator<< (QDataStream & s, const QValueList<T> & l)"
Writes a list to the stream. The type \fIT\fR stored in the list must implement the streaming operator, too.
.SH "QDataStream& operator>> (QDataStream & s, QValueList<T> & l)"
Reads a list from the stream. The type \fIT\fR stored in the list must implement
the streaming operator, too.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qvaluelist.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qvaluelist.3qt) and the Qt
version (2.3.2).
