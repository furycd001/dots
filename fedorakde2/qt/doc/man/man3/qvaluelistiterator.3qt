'\" t
.TH QValueListIterator 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QValueListIterator \- Iterator for
.br
.PP
\fC#include <qvaluelist.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQValueListIterator\fR () "
.br
.ti -1c
.BI "\fBQValueListIterator\fR ( NodePtr p ) "
.br
.ti -1c
.BI "\fBQValueListIterator\fR ( const QValueListIterator<T> & it ) "
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QValueListIterator<T> & it ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QValueListIterator<T> & it ) const"
.br
.ti -1c
.BI "const T& \fBoperator*\fR () const"
.br
.ti -1c
.BI "T& \fBoperator*\fR () "
.br
.ti -1c
.BI "QValueListIterator<T>& \fBoperator++\fR () "
.br
.ti -1c
.BI "QValueListIterator<T> \fBoperator++\fR ( int ) "
.br
.ti -1c
.BI "QValueListIterator<T>& \fBoperator--\fR () "
.br
.ti -1c
.BI "QValueListIterator<T> \fBoperator--\fR ( int ) "
.br
.in -1c
.SH DESCRIPTION
The QValueListIterator class provides an iterator for QValueList.
.PP
You can not create an iterator by yourself. Instead you have to ask a list to give you one. An iterator has only the size of a pointer. On 32 bit machines that means 4 bytes otherwise 8 bytes. That makes them very fast. In fact they resemble the semantics of pointers as good as possible and they are almost as fast as usual pointers.
.PP
Example:
.PP
.nf
.br
    #include <qvaluelist.h>
.br
    #include <qstring.h>
.br
    #include <stdio.h>
.br
.br
    class Employee
.br
    {
.br
    public:
.br
        Employee(): s(0) {}
.br
        Employee( const QString& name, int salary )
.br
            : n(name), s(salary)
.br
        {}
.br
.br
        QString     name()   const              { return n; }
.br
        int         salary() const              { return s; }
.br
        void        setSalary( int salary )     { s = salary; }
.br
    private:
.br
        QString     n;
.br
        int         s;
.br
    };
.br
.br
    void main()
.br
        {
.br
            typedef QValueList<Employee> EmployeeList;
.br
            EmployeeList list;          // list of Employee
.br
.br
            list.append( Employee("Bill", 50000) );
.br
            list.append( Employee("Steve",80000) );
.br
            list.append( Employee("Ron",  60000) );
.br
.br
            Employee joe( "Joe", 50000 );
.br
            list.append( joe );
.br
            joe.setSalary( 4000 );
.br
.br
            EmployeeList::Iterator it;
.br
            for( it = list.begin(); it != list.end(); ++it )
.br
                printf( "%s earns %d\\n", (*it).name().latin1(), (*it).salary() );
.br
        }
.fi
.PP
Program output:
.PP
.nf
.br
        Bill earns 50000
.br
        Steve earns 80000
.br
        Ron earns 60000
.br
        Joe earns 50000
.fi
.PP
In contrast to QList there are no built in functions in QValueList to traverse the list. The only way to do this is to use iterators. QValueList is highly optimized for performance and memory usage. On the other hand that means that you have to be a bit more careful by what you are doing. QValueList does not know about all its iterators and the iterators dont even know to which list they belong. That makes things fast and slim but a bit dangerous because it is up to you to make sure that iterators you are using are still valid. QListIterator will be able to give warnings while QValueListIterator may end up in an undefined state.
.PP
For every Iterator there is a ConstIterator. When accessing a QValueList in a const environment or if the reference or pointer to the list is itself const, then you have to use the ConstIterator. Its semantics are the same, but it returns only const references to the item it points to.
.PP
See also QValueList and QValueListConstIterator.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QValueListIterator::QValueListIterator ()"
Creates un uninitialized iterator.
.SH "QValueListIterator::QValueListIterator ( NodePtr p )"
Internal function.
.SH "QValueListIterator::QValueListIterator ( const QValueListIterator<T> & it )"
Constructs a copy of the iterator \fIit.\fR
.SH "bool QValueListIterator::operator!= ( const QValueListIterator<T> & it ) const"
Compares both iterators and returns TRUE if they point to different items.
.SH "T& QValueListIterator::operator* ()"
Asterix operator. Returns a reference to the current iterator item.
.SH "const T& QValueListIterator::operator* () const"
Asterix operator. Returns a reference to the current iterator item.
.SH "QValueListIterator<T> QValueListIterator::operator++ ( int )"
Postfix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator can not check wether it reached the end of the list. Incrementing the iterator as returned by end() causes undefined results.
.SH "QValueListIterator<T>& QValueListIterator::operator++ ()"
Prefix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator can not check wether it reached the end of the list. Incrementing the iterator as returned by end() causes undefined results.
.SH "QValueListIterator<T> QValueListIterator::operator-- ( int )"
Postfix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator can not check wether it reached the beginning of the list. Decrementing the iterator as returned by begin() causes undefined results.
.SH "QValueListIterator<T>& QValueListIterator::operator-- ()"
Prefix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator can not check wether it reached the beginning of the list. Decrementing the iterator as returned by begin() causes undefined results.
.SH "bool QValueListIterator::operator== ( const QValueListIterator<T> & it ) const"
Compares both iterators and returns TRUE if they point to the same item.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qvaluelistiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qvaluelistiterator.3qt) and the Qt
version (2.3.2).
