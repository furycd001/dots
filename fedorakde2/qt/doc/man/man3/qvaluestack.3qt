'\" t
.TH QValueStack 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QValueStack \- Value based template class that provides a stack
.br
.PP
\fC#include <qvaluestack.h>\fR
.PP
Inherits QValueList.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQValueStack\fR () "
.br
.ti -1c
.BI "\fB~QValueStack\fR () "
.br
.ti -1c
.BI "void \fBpush\fR ( const T & d ) "
.br
.ti -1c
.BI "T \fBpop\fR () "
.br
.ti -1c
.BI "T& \fBtop\fR () "
.br
.ti -1c
.BI "const T& \fBtop\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QValueStack class is a value based template class that provides a stack.
.PP
Define a template instance QValueStack<X> to create a stack of values which all have the class X. Please notice that QValueStack does not store pointers to the members of the stack. It holds a copy of every member. That is the reason why this kind of classes are called "value based" while QStack, QList and QDict are "reference based".
.PP
A stack is a Last In, First Out (LIFO) structure. Items are added to the top of the stack with push() and retrieved from the top with pop(). Furthermore, top() provides access to the topmost item without removing it.
.PP
Example:
.PP
.nf
.br
    #include <qvaluestack.h>
.br
    #include <stdio.h>
.br
.br
    void main()
.br
    {
.br
        QValueStack<int> stack;
.br
        stack.push( 1 );
.br
        stack.push( 2 );
.br
        stack.push( 3 );
.br
        while ( !stack.isEmpty() )
.br
                printf("pop item %d\\n", stack.pop() );
.br
  }
.fi
.PP
Program output:
.PP
.nf
.br
        pop item 3;
.br
        pop item 2;
.br
        pop item 1;
.fi
.PP
Technically, QValueStack is a specialized QValueList provided for convenience. All of QValueList's functionality applies also to QStack, for example the facility to iterate over all elements using QValueStack<T>::Iterator. See QValueListIterator for further details.
.PP
Some classes can not be used within a QValueStack, for example everything derived from QObject and thus all classes that implement widgets. Only values can be used in a QValueStack. To qualify as a value, the class must provide
.TP
a copy constructor,
.TP
an assignment operator and
.TP
a default constructor, i.e. a constructor that does not take any arguments.
.PP
Note that C++ defaults to field-by-field assignment operators and copy constructors if no explicit version is supplied. In many cases, this is sufficient.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QValueStack::QValueStack ()"
Constructs an empty stack.
.SH "QValueStack::~QValueStack ()"
Destroys the stack. References to the values in the stack and all iterators of this stack become invalidated. Since QValueStack is highly tuned for performance you wont see warnings if you use invalid iterators, because it is impossible for an iterator to check wether it is valid or not.
.SH "T QValueStack::pop ()"
Removes the top item from the stack and returns it.
.PP
See also top() and push().
.SH "void QValueStack::push ( const T & d )"
Adds an element to the top of the stack. Last in, first out.
.PP
This function is equivalent to append()
.PP
See also pop() and top().
.SH "T& QValueStack::top ()"
Returns a reference to the top item of the stack or the item referenced by end() if no such item exists. Please note that you may not change the value the end() Iterator is pointing to.
.PP
This function is equivalent to last().
.PP
See also pop(), push() and QValueList::fromLast().
.SH "const T& QValueStack::top () const"
Returns a reference to the top item of the stack or the item referenced by end() if no such item exists.
.PP
This function is equivalent to last().
.PP
See also  pop(), push() and QValueList::fromLast().
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qvaluestack.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qvaluestack.3qt) and the Qt
version (2.3.2).
