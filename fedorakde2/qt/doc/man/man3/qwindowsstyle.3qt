'\" t
.TH QWindowsStyle 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWindowsStyle \- Windows Look and Feel
.br
.PP
\fC#include <qwindowsstyle.h>\fR
.PP
Inherits QCommonStyle.
.PP
Inherited by QPlatinumStyle.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWindowsStyle\fR () "
.br
.ti -1c
.BI "virtual \fB~QWindowsStyle\fR () "
.br
.ti -1c
.BI "virtual void \fBdrawButton\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColorGroup & " "g" ", bool " "sunken" " = FALSE, const QBrush * " "fill" " = 0 ) "
.br
.ti -1c
.BI "virtual void \fBdrawExclusiveIndicatorMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", bool on ) "
.br
.ti -1c
.BI "virtual void \fBdrawSliderMask\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", Orientation, bool " "tickAbove" ", bool tickBelow ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBdrawWinShades\fR ( QPainter * " "p" ", int " "x" ", int " "y" ", int " "w" ", int " "h" ", const QColor & " "c1" ", const QColor & " "c2" ", const QColor & " "c3" ", const QColor & " "c4" ", const QBrush * fill ) "
.br
.in -1c
.SH DESCRIPTION
Windows Look and Feel
.PP
This class implements the look and feel known from the Windows platform. Naturally it is also Qt's default GUI style on Windows.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWindowsStyle::QWindowsStyle ()"
Constructs a QWindowsStyle.
.SH "QWindowsStyle::~QWindowsStyle () \fC[virtual]\fR"
Destructs the style.
.SH "QRect QWindowsStyle::comboButtonFocusRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QRect QWindowsStyle::comboButtonRect ( int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawArrow ( QPainter * p, ArrowType type, bool down, int x, int y, int w, int h, const QColorGroup & g, bool enabled, const QBrush * fill = 0 )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QWindowsStyle::drawBevelButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Draws a press-sensitive shape.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawCheckMark ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool act, bool dis ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawComboButton ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken = FALSE, bool = FALSE, bool enabled = TRUE, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawExclusiveIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool on, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawExclusiveIndicatorMask ( QPainter * p, int x, int y, int w, int h, bool ) \fC[virtual]\fR"
Draws the mask of a mark indicating the state of an exclusive choice.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawFocusRect ( QPainter * p, const QRect & r, const QColorGroup &, const QColor * bg =0, bool = FALSE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawIndicator ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int s, bool down = FALSE, bool enabled = TRUE ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, bool sunken=FALSE, int lineWidth = 1, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawPopupMenuItem ( QPainter * p, bool checkable, int maxpmw, int tab, QMenuItem * mi, const QPalette & pal, bool act, bool enabled, int x, int y, int w, int h ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawPopupPanel ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, int = 2, const QBrush * fill = 0 ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawPushButton ( QPushButton * btn, QPainter * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawScrollBarControls ( QPainter * p, const QScrollBar * sb, int sliderStart, uint controls, uint activeControl ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawSlider ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation orient, bool tickAbove, bool tickBelow ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawSliderGroove ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, QCOORD c, Orientation orient ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawSliderMask ( QPainter * p, int x, int y, int w, int h, Orientation orient, bool tickAbove, bool tickBelow ) \fC[virtual]\fR"
Draws the mask of a slider.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawSplitter ( QPainter * p, int x, int y, int w, int h, const QColorGroup & g, Orientation ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::drawTab ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QWindowsStyle::drawTabMask ( QPainter * p, const QTabBar * tb, QTab * t, bool selected )"
Reimplemented for internal reasons; the API is not affected.
.SH "void QWindowsStyle::drawWinShades ( QPainter * p, int x, int y, int w, int h, const QColor & c1, const QColor & c2, const QColor & c3, const QColor & c4, const QBrush * fill ) \fC[protected]\fR"
This function draws a rectangle with two pixel line width. It is called from qDrawWinButton() and qDrawWinPanel().
.PP
c1..c4 and fill are used:
.PP
1 1 1 1 1 2 1 3 3 3 4 2 1 3 F F 4 2 1 3 F F 4 2 1 4 4 4 4 2 2 2 2 2 2 2.
.SH "QSize QWindowsStyle::exclusiveIndicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QWindowsStyle::extraPopupMenuItemWidth ( bool checkable, int maxpmw, QMenuItem * mi, const QFontMetrics & ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::getButtonShift ( int & x, int & y ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "QSize QWindowsStyle::indicatorSize () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QWindowsStyle::maximumSliderDragDistance () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::polishPopupMenu ( QPopupMenu * p ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QWindowsStyle::popupMenuItemHeight ( bool, QMenuItem * mi, const QFontMetrics & fm ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::scrollBarMetrics ( const QScrollBar * sb, int & sliderMin, int & sliderMax, int & sliderLength, int & buttonDim ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QWindowsStyle::sliderLength () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "int QWindowsStyle::splitterWidth () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QStyle.
.SH "void QWindowsStyle::tabbarMetrics ( const QTabBar * t, int & hframe, int & vframe, int & overlap )"
Reimplemented for internal reasons; the API is not affected.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qwindowsstyle.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qwindowsstyle.3qt) and the Qt
version (2.3.2).
