'\" t
.TH QWizard 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWizard \- Framework for easily writing wizards
.br
.PP
\fC#include <qwizard.h>\fR
.PP
Inherits QDialog.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWizard\fR ( QWidget * " "parent" "=0, const char * " "name" "=0, bool " "modal" "=FALSE, WFlags " "f" "=0 ) "
.br
.ti -1c
.BI "\fB~QWizard\fR () "
.br
.ti -1c
.BI "virtual void \fBaddPage\fR ( QWidget *, const QString & ) "
.br
.ti -1c
.BI "virtual void \fBremovePage\fR ( QWidget * ) "
.br
.ti -1c
.BI "QString \fBtitle\fR ( QWidget * ) const"
.br
.ti -1c
.BI "void \fBsetTitle\fR ( QWidget *, const QString & ) "
.br
.ti -1c
.BI "virtual void \fBshowPage\fR ( QWidget * ) "
.br
.ti -1c
.BI "QWidget* \fBcurrentPage\fR () const"
.br
.ti -1c
.BI "QWidget* \fBpage\fR ( int pos ) const"
.br
.ti -1c
.BI "int \fBpageCount\fR () const"
.br
.ti -1c
.BI "virtual bool \fBappropriate\fR ( QWidget * ) const"
.br
.ti -1c
.BI "virtual void \fBsetAppropriate\fR ( QWidget *, bool ) "
.br
.ti -1c
.BI "QPushButton* \fBbackButton\fR () const"
.br
.ti -1c
.BI "QPushButton* \fBnextButton\fR () const"
.br
.ti -1c
.BI "QPushButton* \fBfinishButton\fR () const"
.br
.ti -1c
.BI "QPushButton* \fBcancelButton\fR () const"
.br
.ti -1c
.BI "QPushButton* \fBhelpButton\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetBackEnabled\fR ( QWidget *, bool ) "
.br
.ti -1c
.BI "virtual void \fBsetNextEnabled\fR ( QWidget *, bool ) "
.br
.ti -1c
.BI "virtual void \fBsetFinishEnabled\fR ( QWidget *, bool ) "
.br
.ti -1c
.BI "virtual void \fBsetHelpEnabled\fR ( QWidget *, bool ) "
.br
.ti -1c
.BI "virtual void setFinish ( QWidget *, bool ) \fI(obsolete)\fR"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBhelpClicked\fR () "
.br
.ti -1c
.BI "void \fBselected\fR ( const QString & ) "
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBlayOutButtonRow\fR ( QHBoxLayout * ) "
.br
.ti -1c
.BI "virtual void \fBlayOutTitleRow\fR ( QHBoxLayout *, const QString & ) "
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "virtual void \fBback\fR () "
.br
.ti -1c
.BI "virtual void \fBnext\fR () "
.br
.ti -1c
.BI "virtual void \fBhelp\fR () "
.br
.in -1c
.SH DESCRIPTION
The QWizard class provides a framework for easily writing wizards.
.PP
A wizard is a dialog that consists of a sequential number of steps, each consisting of a single page. QWizard provides a title for each page, and "Next", "Back", "Finish", "Cancel" and "Help" buttons, as appropriate.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWizard::QWizard ( QWidget * parent=0, const char * name=0, bool modal=FALSE, WFlags f=0 )"
Constructs an empty wizard dialog.
.SH "QWizard::~QWizard ()"
Destructs the object and frees any allocated resources, including, of course, all pages and controllers.
.SH "void QWizard::addPage ( QWidget * page, const QString & title ) \fC[virtual]\fR"
Adds \fIpage\fR to the end of the wizard, titled \fItitle.\fR
.SH "bool QWizard::appropriate ( QWidget * w ) const \fC[virtual]\fR"
This virtual function returns TRUE if \fIw\fR is appropriate for display in the current context of the wizard, and FALSE if QWizard should go on.
.PP
It is called when the Next button is clicked.
.PP
\fBWarning:\fR The last page of a wizard will be displayed if nothing else wants to, and the Next button was enabled when the user clicked.
.PP
The default implementation returns whatever was set using setAppropriate(). The ultimate default is TRUE.
.SH "void QWizard::back () \fC[virtual protected slot]\fR"
Called when the user clicks the Back button, this function shows the page which the user saw prior to the current one.
.SH "QPushButton * QWizard::backButton () const"
Returns the Back button of the dialog.
.PP
By default, this button is connected to the back() slot, which is virtual.
.SH "QPushButton * QWizard::cancelButton () const"
Returns the Cancel button of the dialog.
.PP
By default, this button is connected to the QDialog::reject() slot, which is virtual so you may reimplement it in a QWizard subclass.
.SH "QWidget * QWizard::currentPage () const"
Returns a pointer to the page currently being displayed by the wizard. The wizard does its best to make sure that this value is never 0, but if you try hard enough it can be.
.SH "bool QWizard::eventFilter ( QObject * o, QEvent * e ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "QPushButton * QWizard::finishButton () const"
Returns the Finish button of the dialog.
.PP
By default, this button is connected to the QDialog::accept() slot, which is virtual so you may reimplement it in a QWizard subclass.
.SH "void QWizard::help () \fC[virtual protected slot]\fR"
This slot either makes the wizard help you, if it can. The only way it knows is to emit the helpClicked() signal.
.SH "QPushButton * QWizard::helpButton () const"
Returns the Help button of the dialog.
.PP
By default, this button is connected to the help() slot.
.SH "void QWizard::helpClicked () \fC[signal]\fR"
This signal is emitted when the user clicks on the help button.
.SH "void QWizard::layOutButtonRow ( QHBoxLayout * layout ) \fC[virtual protected]\fR"
This virtual function is responsible for adding the bottom divider and buttons below it.
.PP
\fIlayout\fR is the vertical layout of the entire wizard.
.SH "void QWizard::layOutTitleRow ( QHBoxLayout * layout, const QString & title ) \fC[virtual protected]\fR"
This virtual function is responsible for laying out the title row and adding the vertical divider between the title and the wizard page. \fIlayout\fR is the vertical layout for the wizard, \fItitle\fR is the title for this page, and this function is called every time \fItitle\fR changes.
.SH "void QWizard::next () \fC[virtual protected slot]\fR"
Called when the user clicks the Next button, this function shows the next appropriate page.
.SH "QPushButton * QWizard::nextButton () const"
Returns the Next button of the dialog.
.PP
By default, this button is connected to the next() slot, which is virtual.
.SH "QWidget* QWizard::page ( int pos ) const"
Returns a pointer to page a position \fIpos,\fR or 0 if \fIpos\fR is out of range. The first page has position 0.
.SH "int QWizard::pageCount () const"
Returns the number of pages in the wizard.
.SH "void QWizard::removePage ( QWidget * page ) \fC[virtual]\fR"
Removes \fIpage\fR from this wizard. Does not delete \fIpage.\fR If \fIpage\fR is currently being displayed, QWizard will display something else.
.SH "void QWizard::selected ( const QString & ) \fC[signal]\fR"
This signal is emitted when the page changes, signalling the title of the page.
.SH "void QWizard::setAppropriate ( QWidget * w, bool enable ) \fC[virtual]\fR"
Sets whether it is appropriate for \fIw\fR to be displayed in the current context of the wizard.
.PP
See also appropriate().
.SH "void QWizard::setBackEnabled ( QWidget * w, bool enable ) \fC[virtual slot]\fR"
Enables or disables the "Back" button for pages \fIw\fR in the wizard. By default, all pages have this button.
.SH "void QWizard::setFinish ( QWidget *, bool ) \fC[virtual slot]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working, and will probably be removed in a future version of Qt. We strongly advise against using it in new code.
.SH "void QWizard::setFinishEnabled ( QWidget * w, bool enable ) \fC[virtual slot]\fR"
Enables or disables the "Finish" button for pages \fIw\fR in the wizard. By default, \fIno\fR pages have this button.
.SH "void QWizard::setFont ( const QFont & font ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QWizard::setHelpEnabled ( QWidget * w, bool enable ) \fC[virtual slot]\fR"
Enables or disables the "Help" button for pages \fIw\fR in the wizard. By default, all pages have this button.
.SH "void QWizard::setNextEnabled ( QWidget * w, bool enable ) \fC[virtual slot]\fR"
Enables or disables the "Next" button for pages \fIw\fR in the wizard. By default, all pages have this button.
.SH "void QWizard::setTitle ( QWidget * page, const QString & t )"
Sets the title for the \fIpage\fR to \fItitle.\fR
.SH "void QWizard::show () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QWizard::showPage ( QWidget * page ) \fC[virtual]\fR"
Makes \fIpage\fR be the displayed page and emits the selected() signal.
.SH "QString QWizard::title ( QWidget * page ) const"
Returns the title of \fIpage.\fR
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qwizard.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qwizard.3qt) and the Qt
version (2.3.2).
