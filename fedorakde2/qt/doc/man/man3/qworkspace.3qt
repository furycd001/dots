'\" t
.TH QWorkspace 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWorkspace \- Workspace window that can contain decorated windows, e.g. for MDI
.br
.PP
\fC#include <qworkspace.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWorkspace\fR ( QWidget * " "parent" "=0, const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fB~QWorkspace\fR () "
.br
.ti -1c
.BI "QWidget* \fBactiveWindow\fR () const"
.br
.ti -1c
.BI "QWidgetList \fBwindowList\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void \fBcascade\fR () "
.br
.ti -1c
.BI "void \fBtile\fR () "
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBwindowActivated\fR ( QWidget * w ) "
.br
.in -1c
.SH DESCRIPTION
The QWorkspace widget provides a workspace window that can contain decorated windows, e.g. for MDI.
.PP
An MDI application has one main window with a menu bar. The central widget of this window is a workspace. The workspace itself contains zero, one or more document windows, each of which displays a document.
.PP
The workspace itself is an ordinary Qt widget. It has a standard constructor that takes a parent widget and an object name. The parent window is usually a QMainWindow, but it need not be.
.PP
Document windows (alias MDI windows) are also ordinary Qt widgets, that have the workspace as parent widget. When you call show(), hide(), showMaximized(), setCaption(), etc on a document window, it is shown, hidden etc. with a frame, caption, icon and icon text, just as you'd expect. You can provide widget flags which will be used for the layout of the decoration or the behaviour of the widget itself. To change the geometry of the MDI windows it is necessary to make the necessary function calls to the parentWidget() of the widget, as this will move or resize the decorated window.
.PP
A document window becomes active when it gets the keyboard focus. You can activate it using setFocus(), and the user can activate it by moving focus in the normal ways. The workspace emits a signal windowActivated() when it detects the activation change, and the function activeWindow() always returns a pointer to the active document window.
.PP
The convenience function windowList() returns a list of all document windows. This is useful to create a popup menu "&Windows" on the fly, for example.
.PP
QWorkspace provides two built-in layout strategies for child windows, cascade() and tile(). Both are slots, so you can easily connect menu entries to them.
.PP
In case the toplevel window contains a menu bar and a document window is maximized, QWorkspace moves the document window's minimize, restore and close buttons from the document window's frame to the workspace window's menu bar, and inserts a window operations menu on the extreme left of the menu bar.
.PP
\fBWarning:\fR User interface research indicates that most users have problems with MDI applications. Use this class cautiously.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWorkspace::QWorkspace ( QWidget * parent=0, const char * name=0 )"
Constructs a workspace with a \fIparent\fR and a \fIname\fR
.SH "QWorkspace::~QWorkspace ()"
Destroys the object and frees any allocated resources.
.SH "QWidget* QWorkspace::activeWindow () const"
Returns the active window, or 0 if no window is active.
.SH "void QWorkspace::cascade () \fC[slot]\fR"
Arranges all child windows in a cascade pattern
.PP
See also tile().
.SH "void QWorkspace::childEvent ( QChildEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "bool QWorkspace::eventFilter ( QObject * o, QEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "void QWorkspace::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QWorkspace::showEvent ( QShowEvent * e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QSize QWorkspace::sizeHint () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QSizePolicy QWorkspace::sizePolicy () const \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QWorkspace::tile () \fC[slot]\fR"
Arranges all child windows in a tile pattern
.PP
See also cascade().
.SH "void QWorkspace::windowActivated ( QWidget * w ) \fC[signal]\fR"
This signal is emitted when the window widget \fIw\fR becomes active. Note that \fIw\fR can be null, and that more than one signal may be fired for one activation event.
.PP
See also activeWindow() and windowList().
.SH "QWidgetList QWorkspace::windowList () const"
Returns a list of all windows.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qworkspace.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qworkspace.3qt) and the Qt
version (2.3.2).
