'\" t
.TH QXmlReader 3qt "29 October 2001" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QXmlReader \- Interface for XML readers (i.e. parsers)
.br
.PP
\fC#include <qxml.h>\fR
.PP
Inherited by QXmlSimpleReader.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual bool \fBfeature\fR ( const QString & " "name" ", bool * " "ok" " = 0 ) const"
.br
.ti -1c
.BI "virtual void \fBsetFeature\fR ( const QString & " "name" ", bool value ) "
.br
.ti -1c
.BI "virtual bool \fBhasFeature\fR ( const QString & name ) const"
.br
.ti -1c
.BI "virtual void* \fBproperty\fR ( const QString & " "name" ", bool * " "ok" " = 0 ) const"
.br
.ti -1c
.BI "virtual void \fBsetProperty\fR ( const QString & " "name" ", void * value ) "
.br
.ti -1c
.BI "virtual bool \fBhasProperty\fR ( const QString & name ) const"
.br
.ti -1c
.BI "virtual void \fBsetEntityResolver\fR ( QXmlEntityResolver * handler ) "
.br
.ti -1c
.BI "virtual QXmlEntityResolver* \fBentityResolver\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetDTDHandler\fR ( QXmlDTDHandler * handler ) "
.br
.ti -1c
.BI "virtual QXmlDTDHandler* \fBDTDHandler\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetContentHandler\fR ( QXmlContentHandler * handler ) "
.br
.ti -1c
.BI "virtual QXmlContentHandler* \fBcontentHandler\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetErrorHandler\fR ( QXmlErrorHandler * handler ) "
.br
.ti -1c
.BI "virtual QXmlErrorHandler* \fBerrorHandler\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetLexicalHandler\fR ( QXmlLexicalHandler * handler ) "
.br
.ti -1c
.BI "virtual QXmlLexicalHandler* \fBlexicalHandler\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetDeclHandler\fR ( QXmlDeclHandler * handler ) "
.br
.ti -1c
.BI "virtual QXmlDeclHandler* \fBdeclHandler\fR () const"
.br
.ti -1c
.BI "virtual bool \fBparse\fR ( const QXmlInputSource & input ) "
.br
.in -1c
.SH DESCRIPTION
The QXmlReader class provides an interface for XML readers (i.e. parsers).
.PP
This abstract class describes an interface for all XML readers in Qt. At the moment there is only one implementation of a reader included in the XML module of Qt (QXmlSimpleReader). In future releases there might be more readers with different properties available (e.g. a validating parser).
.PP
The design of the XML classes follow the SAX2 java interface. It was adopted to fit into the Qt naming conventions; so it should be very easy for anybody who has worked with SAX2 to get started with the Qt XML classes.
.PP
All readers use the class QXmlInputSource to read the input document from. Since you are normally interested in certain contents of the XML document, the reader reports those contents through special handler classes (QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler and QXmlLexicalHandler).
.PP
You have to subclass these classes. Since the handler classes describe only interfaces you must implement all functions; there is a class (QXmlDefaultHandler) to make this easier; it implements a default behaviour (do nothing) for all functions.
.PP
For getting started see also the Quick start.
.PP
See also QXmlSimpleReader.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QXmlDTDHandler* QXmlReader::DTDHandler () const \fC[virtual]\fR"
Returns the DTD handler or 0 if none was set.
.PP
See also setDTDHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "QXmlContentHandler* QXmlReader::contentHandler () const \fC[virtual]\fR"
Returns the content handler or 0 if none was set.
.PP
See also setContentHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "QXmlDeclHandler* QXmlReader::declHandler () const \fC[virtual]\fR"
Returns the declaration handler or 0 if none was set.
.PP
See also setDeclHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "QXmlEntityResolver* QXmlReader::entityResolver () const \fC[virtual]\fR"
Returns the entity resolver or 0 if none was set.
.PP
See also setEntityResolver().
.PP
Reimplemented in QXmlSimpleReader.
.SH "QXmlErrorHandler* QXmlReader::errorHandler () const \fC[virtual]\fR"
Returns the error handler or 0 if none was set
.PP
See also setErrorHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "bool QXmlReader::feature ( const QString & name, bool * ok = 0 ) const \fC[virtual]\fR"
If the reader has the feature \fIname,\fR this function returns the value of the feature.
.PP
If the reader has not the feature \fIname,\fR the return value may be anything.
.PP
If \fIok\fR is not 0, then \fIok\fR is set to TRUE if the reader has the feature \fIname,\fR otherwise \fIok\fR is set to FALSE.
.PP
See also setFeature() and hasFeature().
.PP
Reimplemented in QXmlSimpleReader.
.SH "bool QXmlReader::hasFeature ( const QString & name ) const \fC[virtual]\fR"
Returns \fCTRUE\fR if the reader has the feature \fIname,\fR otherwise FALSE.
.PP
See also feature() and setFeature().
.PP
Reimplemented in QXmlSimpleReader.
.SH "bool QXmlReader::hasProperty ( const QString & name ) const \fC[virtual]\fR"
Returns TRUE if the reader has the property \fIname,\fR otherwise FALSE.
.PP
See also property() and setProperty().
.PP
Reimplemented in QXmlSimpleReader.
.SH "QXmlLexicalHandler* QXmlReader::lexicalHandler () const \fC[virtual]\fR"
Returns the lexical handler or 0 if none was set.
.PP
See also setLexicalHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "bool QXmlReader::parse ( const QXmlInputSource & input ) \fC[virtual]\fR"
Parses the XML document \fIinput.\fR Returns TRUE if the parsing was successful, otherwise FALSE.
.PP
Reimplemented in QXmlSimpleReader.
.SH "void* QXmlReader::property ( const QString & name, bool * ok = 0 ) const \fC[virtual]\fR"
If the reader has the property \fIname,\fR this function returns the value of the property.
.PP
If the reader has not the property \fIname,\fR the return value is 0.
.PP
If \fIok\fR is not 0, then \fIok\fR is set to TRUE if the reader has the property \fIname,\fR otherwise \fIok\fR is set to FALSE.
.PP
See also setProperty() and hasProperty().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setContentHandler ( QXmlContentHandler * handler ) \fC[virtual]\fR"
Sets the content handler to \fIhandler.\fR
.PP
See also contentHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setDTDHandler ( QXmlDTDHandler * handler ) \fC[virtual]\fR"
Sets the DTD handler to \fIhandler.\fR
.PP
See also DTDHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setDeclHandler ( QXmlDeclHandler * handler ) \fC[virtual]\fR"
Sets the declaration handler to \fIhandler.\fR
.PP
See also declHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setEntityResolver ( QXmlEntityResolver * handler ) \fC[virtual]\fR"
Sets the entity resolver to \fIhandler.\fR
.PP
See also entityResolver().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setErrorHandler ( QXmlErrorHandler * handler ) \fC[virtual]\fR"
Sets the error handler to \fIhandler.\fR
.PP
See also errorHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setFeature ( const QString & name, bool value ) \fC[virtual]\fR"
Sets the feature \fIname\fR to \fIvalue.\fR If the reader has not the feature \fIname,\fR this value is ignored.
.PP
See also feature() and hasFeature().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setLexicalHandler ( QXmlLexicalHandler * handler ) \fC[virtual]\fR"
Sets the lexical handler to \fIhandler.\fR
.PP
See also lexicalHandler().
.PP
Reimplemented in QXmlSimpleReader.
.SH "void QXmlReader::setProperty ( const QString & name, void * value ) \fC[virtual]\fR"
Sets the property \fIname\fR to \fIvalue.\fR If the reader has not the property \fIname,\fR this value is ignored.
.PP
See also property() and hasProperty().
.PP
Reimplemented in QXmlSimpleReader.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qxmlreader.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qxmlreader.3qt) and the Qt
version (2.3.2).
