/****************************************************************************
** $Id: qt/doc/HOWTO-Framebuffer.doc   2.3.2   edited 2001-04-12 $
**
** Windowsystem-specific pages
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

#if defined(DEBUG)
static char ident[] = "$Id: qt/doc/HOWTO-Framebuffer.doc   2.3.2   edited 2001-04-12 $";
#endif

/*! \page HOWTO-framebuffer.html

\title Enabling the Linux framebuffer

<h1>How to enable framebuffer support in the Linux kernel</h1>

<p>
This is only a short guide.
See <a href="file:/usr/src/linux/README"><tt>/usr/src/linux/README</tt></a> and
<a href="file:/usr/src/linux/Documentation/fb/"><tt>/usr/src/linux/Documentation/fb/</tt></a>
for detailed information.
There is also a detailed explanation at:
<a href="http://www.linuxdoc.org/HOWTO/Framebuffer-HOWTO.html">
http://www.linuxdoc.org/HOWTO/Framebuffer-HOWTO.html</a>

<ol>
<li> Make sure that you have the Linux kernel source code in
<a href="file:/usr/src/linux/">/usr/src/linux/</a>. 

<li> Log in as root and cd /usr/src/linux

<li> Configure the kernel:
   
   Run:
<pre>
	make menuconfig
</pre>

<p>
   Select "Code maturity level options" and set "Prompt for
   development and/or incomplete code/drivers".

<p>
   Then select "Console drivers" set "Support for frame buffer
   devices" to built-in (even if it says EXPERIMENTAL). Then configure
   the driver. Most modern graphics cards can use the "VESA VGA
   graphics console"; use that or a driver that specifically matches
   your video card. Finally enable "Advanced low level driver options"
   and make sure that 16 and 32 bpp packed pixel support are enabled. 

<p>
   When you are finished, chose exit and save.


<li> Compile the kernel

<p>
   First do:
<pre>
	make dep
</pre>
   then:
<pre>
	make bzImage
</pre>

  The new kernel should now be in <tt>arch/i386/boot/bzImage</tt>

<li> Copy the kernel to the boot directory:
<pre>
	cp arch/i386/boot/bzImage /boot/linux.vesafb
</pre>

<li> Edit <tt>/etc/lilo.conf</tt>

<p>
<i>
  IMPORTANT: Keep a backup of /etc/lilo.conf, and have a rescue disk
  available. If you make a mistake at this stage, the machine may not
  boot.
</i>
<p>
   The file /etc/lilo.conf specifies how the system boots. The precise
   contents of the file varies from system to system, this is one example:
<pre>
# LILO configuration file
boot = /dev/hda3
delay = 30 
image = /boot/vmlinuz
  root = /dev/hda3
  label = Linux
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
other=/dev/hda1
        label=nt
        table=/dev/hda
</pre>
<p>
<i>
  IMPORTANT: Keep a backup of /etc/lilo.conf, and have a rescue disk
  available. If you make a mistake here, the machine may not boot.
</i>
<p>
  Make a new "image" section that is a copy of the first one, but with
  image = /boot/linux.vesafb and label = Linux-vesafb. Place it just
  above the first image section.
<p>
  Add a line before the image section saying 'vga = 791'. (Meaning
  1024x768, 16 bpp.) 
<p>
  With the above example, lilo.conf would now be:
<pre>
# LILO configuration file
boot = /dev/hda3
delay = 30 
vga = 791
image = /boot/linux.vesafb
  root = /dev/hda3
  label = Linux-vesafb
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
image = /boot/vmlinuz
  root = /dev/hda3
  label = Linux
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
other=/dev/hda1
        label=nt
        table=/dev/hda
</pre>
<p>
Do not change any lines in the file; just add new ones.

<li> Run lilo
<p>
   To make the new changes take effect, run the lilo program:
<pre>
	lilo
</pre>

<li> Reboot the system
<p>
   You should now see a penguin logo while the system is booting.
   (Or more than one on a multi-processor machine.)


<li> Error recovery
<p>
   If it does not boot properly with the new kernel, you can boot with
   the old kernel by entering the label of the old image section at
   the LILO prompt. (with the example lilo.conf file, the old label is
   Linux.)
<p>
   If that does not work (probably because of an error in lilo.conf),
   boot the machine using your rescue disk, restore /etc/lilo.conf from
   backup and re-run lilo.


<li> Testing
<p>
   Here's a short C program that opens the frame buffer and draws a
   gradient-filled red square.
<pre>
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <linux/fb.h>
#include <sys/mman.h>

int main()
{
    int fbfd = 0;
    struct fb_var_screeninfo vinfo;
    struct fb_fix_screeninfo finfo;
    long int screensize = 0;
    char *fbp = 0;
    int x = 0, y = 0;
    long int location = 0;

    // Open the file for reading and writing
    fbfd = open("/dev/fb0", O_RDWR);
    if (fbfd < 0) {
	printf("Error: cannot open framebuffer device.\n");
	exit(1);
    }
    printf("The framebuffer device was opened successfully.\n");

    // Get fixed screen information
    if (ioctl(fbfd, FBIOGET_FSCREENINFO, &finfo)) {
	printf("Error reading fixed information.\n");
	exit(2);
    }

    // Get variable screen information
    if (ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo)) {
	printf("Error reading variable information.\n");
	exit(3);
    }

    printf("%dx%d, %dbpp\n", vinfo.xres, vinfo.yres, vinfo.bits_per_pixel );

    // Figure out the size of the screen in bytes
    screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / 8;

    // Map the device to memory
    fbp = (char *)mmap(0, screensize, PROT_READ | PROT_WRITE, MAP_SHARED,
		       fbfd, 0);
    if ((int)fbp == -1) {
	printf("Error: failed to map framebuffer device to memory.\n");
	exit(4);
    }
    printf("The framebuffer device was mapped to memory successfully.\n");

    x = 100; y = 100;       // Where we are going to put the pixel

    // Figure out where in memory to put the pixel
    for ( y = 100; y < 300; y++ )
	for ( x = 100; x < 300; x++ ) {

	    location = (x+vinfo.xoffset) * (vinfo.bits_per_pixel/8) +
		       (y+vinfo.yoffset) * finfo.line_length;

	    if ( vinfo.bits_per_pixel == 32 ) {
		*(fbp + location) = 100;        // Some blue
		*(fbp + location + 1) = 15+(x-100)/2;     // A little green
		*(fbp + location + 2) = 200-(y-100)/5;    // A lot of red
		*(fbp + location + 3) = 0;      // No transparency
	    } else  { //assume 16bpp
		int b = 10;
		int g = (x-100)/6;     // A little green
		int r = 31-(y-100)/16;    // A lot of red
		unsigned short int t = r<<11 | g << 5 | b;
		*((unsigned short int*)(fbp + location)) = t;
	    }

	}
    munmap(fbp, screensize);
    close(fbfd);
    return 0;
}
</pre>

*/
