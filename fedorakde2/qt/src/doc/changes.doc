/****************************************************************************
** $Id: qt/doc/changes.doc   2.3.2   edited 2001-02-14 $
**
** Change documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page changes211.html
\title Change Notes for Qt 2.1.1

<p>Qt 2.1.1 is a bugfix release. It keeps both forward and backward
compatibility (source and binary) with Qt 2.1.

<h2>General</h2>
<ul>
<li> Many documentation improvements

<li> Various compilation problems relating to particular versions of xlC,
MipsPRO, Solaris, Japanese Windows, old X11 libraries, and gcc 2.7.2
fixed

<li> 64bit HP build targets added

<li> Qt OpenGL Extension updated; see details in qt/extensions/opengl/CHANGES

<li> As usual, many minor bugfixes, too small to be mentioned here.

</ul>

<h2>Specific</h2>
<ul>

<li> QToolbar:	fix of layout-saving when moving out of dock

<li> QAccel:		Support for non-alphanumeric keys

<li> QPrinter:	Better tolerance for PS interpreter peculiarities

<li> QPainter:	drawText() with rasterOp on Windows

<li> QIconView:	Drawing fixes

<li> QDate:		Ensure invalid status when created with invalid values

<li> Motif Dnd:	Fix possible crash

<li> QWorkSpace:	Proper minmize/maximize activation

<li> QListBox:	Optimization: better performance for lists with thousands of
		elements. Selection problem fixed.
		
<li> QFont:		Fontset matching fix for X11

<li> QMultiLineEdit:	Wordwrap/selection workaround

<li> QTabBar:	Refresh layout after style change. Optimization.

<li> QTimer:		Zero-timers on Windows speedup

<li> QFileDialog:	Correct caption on Windows

<li> QComboBox:	Accept only left button. Do proper font propagation.

<li> QMenuBar:	Accept only left button

<li> QDialog:	Modal dialogs after QApplication::exec() returns

<li> QWidget:	Optimization: fewer server round-trips

<li> QCheckBox:	Fixed mask drawing

<li> QSpinBox:	Accept '-' key, for negative values

<li>Dnd:		Allow disabling on X11
	
<li>QFontDatabase:	Use QApplication's charset as default,
		and fixed garbage on Win2000

</ul>

*/

/*! \page changes21.html
\title Change Notes for Qt 2.1

<h2>New major features in existing classes</h2>
<ul>

<li>QApplication	- new function wakeUpGuiThread() to simplify using threads
		  with Qt.

<li>QArray		- added sorting and binary search.

<li>QColor		- custom color support added.  qRgb(r,g,b) helper function
		  now sets an opaque alpha value instead of a transparent
		  one.

<li>QComboBox	- support for text items with icons.

<li>QFileDialog	- many new features including fancy drag'n'drop
		  and inplace renaming.
		  Methods like setInfoPreviewWidget()and
		  setContentsPreviewWidget() make it easy to customize
		  the dialog extensively. With QUrlOperator and the
		  QNetworkProtocol abstraction, the dialog can operate
		  transparently by various different network protocols,
		  such as HTTP and FTP (see the Network Extension).

<li>QFocusEvent	- carries a reason() for the event. Possible reasons are
		  Mouse, Tab, ActiveWindow, ShortCut and other. The
		  addition makes line edit controls behave properly.

<li>QHeader		- added optional visual sort indicator. Revisited API that
		  operates on sections only (solves the 'logical' vs. 'actual'
		  index confusion). A reworked 'table' example shows how
		  to use QHeader in combination with a scrollview to create
		  a simple spreadsheet.

<li>QListBox	- many signals and functions added for convenience and
		  greater flexibility.

<li>QListView	- various selections modes similar to QListBox, many
		  new functions and signals added for convenience and
		  greater flexibility.

<li>QMainWindow	- implemented draggable and hidable toolbars. A menubar
		  can be made draggable by simply putting it in a toolbar.

<li>QMetaObject	- Parts of the API made public. The meta object allows
		  applications to access information about an object's
		  properties as well as its signals and slots.

<li>QMultiLineEdit	- added different word wrap modes: WidgetWidth,
		  FixedPixelWidth and FixedColumnWidth.

<li>QObject		- property access functions property() and setProperty().

<li>QPen		- added adjustable cap and join styles.

<li>QPopupMenu	- added support for tear-off menus, custom items
		  and widget items.
		  A new function setItemParameter() makes it possible
		  to distinguish between several menu items connected to
		  one single slot.

<li>QPrinter        - Now allows printing to the default printer without doing
                  setup() first.

<li>QProgressDialog	- auto-reset and auto-close modes.

<li>QPushButton	- added a menu button mode with setPopup().

<li>QScrollView	- support for auto-scrolling on drag move events (drag
		  auto scroll mode).

<li>QSignal		- optional additional integer parameter for the emitted
		  signal.

<li>QSimpleRichText - added adjustSize() function that implements a clever
		  size hint. Vertical break support for printing. inText()
		  hit test.

<li>QSpinBox	- different button symbols, currently UpDownArrows and
		  PlusMinus.

<li>QSplitter	- supports three resize modes now, Stretch, KeepSize
		  and FollowSizeHint.

<li>QString		- new functions setUnicode(), setUnicodeCodes(), setLatin1(),
		  startsWith() and endsWith()

<li>QStringList	- new functions fromStrList(), split(), join() and grep().

<li>QStyle		- some extensions for menu button indicators, default
		  button indicators, variable scrollbar extends and toolbar
		  handles.

<li>QStyleSheet	- a couple of tags added to the default sheet, such as
		  U, NOBR, HEAD, DL, DT, DD and table support (TABLE, TR,
		  TD, TH). Many attributes added to existing tags.

<li>QTextView	- basic table support. Contents is selectable, selections
		  can be pasted/dragged into other widgets.

<li>QToolBar	- stretchable depending on the orientation (setHorizontalStretchable()
		  and setVerticalStretchable(). Added orientationChanged() signal.

<li>QToolButton	- added optional delayed menu with setPopup() and
		  setPopupDelay(). Auto-raise behaviour adjustable.

<li>QWidget		- new widget flag WStyle_ContextHelp that adds a
		  context-help button to the window titlebar. The
		  button triggers "What's This?"-help. The flag works
		  with MS-Windows and future versions of X11 desktops
		  such as KDE-2.0.
		  New function showFullScreen().
		  Enabling and disabling with setEnabled() propagates to
		  children.
		  Changed isVisible(). It now returns whether a widget
		  is mapped up to the toplevel widget (the previous
		  implementation only returned isVisibleTo(parentWidget()).
		  New property 'backgroundOrigin' that lets a widget draw
		  its background relatively to its parent widget's coordinate
		  system. This makes pseudo-transparency possible, without
		  the overhead of a real widget mask.
</ul>
<h2>New Classes</h2>
<ul>
<li>QCustomMenuItem	- an abstract base class for custom menu items in
		  popup menus.

<li>QFontDataBase	- provides information about the available fonts. Not really
		  a new class (it was used internally for the QFontDialog),
		  but for the first time public API.

<li>QGuardedPtr	- a template class that provides guarded pointers to
		  QObjects.

<li>QIconView	- a sophisticated new widget similar to QListView and
		  QListBox.  An iconview contains optinally labelled pixmap
		  items that the user can select, drag around, rename, delete
		  and more. The widget is highly optimized for speed and
		  large amounts of icons.

<li>QInputDialog	- a convenience dialog to get some simple input values from
		  the user.

<li>QMetaProperty	- stores meta data about properties. Part of the meta
		  object system.

<li>QNetworkProtocol- base class for network protocols, provides
		  a common API for network protocols.

<li>QUrl/
QUrlOperator	- provides an easy way to work with URLs.

<li>QVariant	- a tagged union for the most common Qt data types.

<li>QValueStack	- a value-based stack container.

<li>QWorkspace	- provides a workspace that can contain decorated
		  windows as opposed to frameless child widgets.
		  QWorkspace makes it easy to implement a multidocument
		  interface (MDI).

<li>QBig5Codec	- provides support for the Big5 Chinese encoding.
</ul>

<h2> Changes which may affect runtime behaviour </h2>

<ul>
<li>QDataStream / QPicture
 To accomodate for improved functionality, the stream serialization format
 of QString and QPen has changed in Qt 2.1. The format version
 number has been increased to 3. Compatibility has been kept, so
 applications built with this version of Qt are automatically able to read
 QDataStream and QPicture data generated by earlier Qt 2.x versions. But if
 your application needs to generate data that must be readable by
 applications that are compiled with earlier versions of Qt, you must use
 QDataStream::setVersion() (if the data contains QString or QPen objects).
 See the documentation of this function for further discussion.

<li>QPainter::drawPolygon()
 An outline is no longer drawn in the brush color if NoPen is specified.
 This matches the behaviour on Windows and ensures that the area
 painted in this case is the same pixels defined by a QRegion made
 from the polygon.  To get the old behaviour, you can call
 painter.setPen(painter.brush()) prior to painting, which will also
 work on Windows.

<li>QPushButton::sizeHint()
 The size hint of auto-default push buttons has been slightly
 increased in order to reserve space for a default button indicator
 frame. This is necessary for a proper Motif or Platinum emulation. If
 this change destroys your geometry management, a auto-default button
 is probably not what you wanted anyway. Simply call
 setAutoDefault(FALSE) on these push buttons to get the old behaviour.

<li>QWidget
 Font and palette propagation has changed totally (from "almost
 brain-dead" to working).  In practice, the only changes we've seen are
 to the better.

<li>QColor
 qRgb(r,g,b) now sets a default opaque alpha value of 0xff instead of
 a transparent 0x00 alpha value formerly.  Use qRgb(r,g,b,a) if you do
 need a transparent alpha value.

<li>QPalette
 It turned out that the old normal/active/disabled set of color groups
 didn't work very well, except in the simplest hello-world examples,
 that it couldn't be fixed without nasty hacks, and that during five
 years nobody had discovered the bugs.  So, we've dropped our broken
 attempt at Tcl/Tk L&F compatibility, and added support for Windows
 2000 and Macintosh L&F compatibility instead.  The Macintosh and
 Windows 2000 looks differentiate between the window with focus and
 other windows.  Qt calls the color groups QPalette::active() and
 QPalette::inactive() respectively.

<li>QGridLayout/QBoxLayout
 setMargin() now also works on child layouts. As a result of this
 change, the geometry() of a layout now includes margin(). This may
 affect programs that use QLayout::geometry().

<li>QToolButton
 The now adjustable auto-raise behaviour defaults to TRUE only when
 a button is used inside a QToolBar. That's usually what you want. If not,
 call setAutoRaise(FALSE).
</ul>
*/

/*! \page changes22.html
\title Change Notes for Qt 2.2

<h2>New major features in existing classes</h2>
<ul>
<li>QApplication: 	- "global strut", an adjustable minimum size for interactable
		  control elements like the entries in a listbox, useful for
		  touch-screens. Popup window effects ( setEffectEnabled() )
		  and more threading support ( lock(), unlock(), locked() ).

<li>QCheckBox: 	- "tristate" is now a property.

<li>QClipboard: - text() supports subtypes.

<li>QComboBox: 	- "editable" is now a property that is changeable at runtime

<li>QDialog: 	- support for extensible dialogs ("More...") with
		  setExtension() and setOrientation(). Optional size grip.

<li>QFont: 	- new functions styleStrategy() and  setStyleHint()

<li>QIconSet: 	- new constructor that takes both a small and a large pixmap

<li>QLabel: 	- support for scaled pixmap contents, "pixmap" as property

<li>QLayout:	- improved flexibility with setEnabled(), access to the
		  layouted menu bar with menuBar().

<li>QListView: 	- "showSortIndicator" as property. New function
		  QListViewItem::moveItem() to simplify drag and drop.

<li>QMovie: 	- new functions pushSpace(), pushData(), frameImage(),
		support for the MNG animation format.

<li>QMultiLineEdit: - new functions pasteSubType() and  copyAvailable()

<li>QObject: 	- new function normalizeSignalSlot()

<li>QPicture: 	- streaming to and from QDataStream

<li>QPopupMenu: 	- new signal aboutToHide()

<li>QRegExp: 	- new functions setPattern() and find()

<li>QRegion: 	- new function setRects()

<li>QScrollView: 	- new property "staticBackground" to define a pixmap
		  background that does not scroll with the contents.

<li>QStatusBar: 	- "sizeGripEnabled" as property

<li>QStyle: 	- themable menu bars with drawMenuBarItem(). New functions
		  buttonMargin(), toolBarHandleExtent(), sliderThickness()

<li>QTabWidget: 	- new functions currentPageIndex(), setCurrentPage(), new
		  signal currentChanged(). Similar extensions to QTabBar
		  and QTabDialog

<li>QVariant: 	- new subtype QSizePolicy. Necessary for QWidget's
		   new sizePolicy property.

<li>QWidget: 	- new properties "sizePolicy", "ownPalette", "ownFont",
		  "ownCursor" and "hidden". The size policy is now adjustable
		  at runtime with setSizePolicy().  Added convenience slot
		  setDisabled(). Fast geometry mapping functions mapTo() and
		  mapFrom(). On X11, support for a new background mode
		  X11ParentRelative.

<li>QWizard: 	- runtime changeable titles with setTitle(), new signal
		  selected()

<li>QWorkspace:	- support for more widget flags like WType_Tool. Titlebar
		  blending effects on MS-Windows 98/2000.

</ul>
<h2>New Classes</h2>
<ul>
<li>QAction 	- Abstracts a user interface action that can appear both in
		  menus and tool bars. Changing an action's properties, for
		  example using setEnabled(),setOn() or setText(),
		  immediately shows up in all representations.

<li>QActionGroup 	- Combines actions to a group. An action group makes it easier
		  to deal with groups of actions. It allows to add, remove or
		  activate its children with a single call and provides
		  "one of many" semantics for toggle actions.

<li>QDial		- A rounded rangecontrol (like a speedometer or
		  potentiometer). Both API- and UI-wise the dial is very
		  similar to a QSlider.

<li>QMotifPlusStyle	- This class implements a Motif-ish look and feel with more
		  sophisticated bevelling as used by the GIMP toolkit (GTK)
		  for Unix/X11.

<li>QMutex:		- Provides access serialisation between threads.

<li>QSemaphore:	- A robust integer semaphore. another way of thread serialisation.

<li>QThread 	- Baseclass for platform-independent threads, and a thread
		  safe mechanism for posting events from threads other than
		  the main event loop thread.

<li>QWaitCondition 	- Allows threads to wait/wake on conditions
                          (POSIX condition variables)

</ul>

<h2>New Modules</h2>

Modules are major new large components not necessary useful for all
Qt-based applications. Note that some modules are included in the
Qt Enterprise Edition but not the Qt Professional Edition.

<ul>
 <li> <a href=table.html>Qt Table Module
 <li> <a href=canvas.html>Qt Canvas Module
 <li> <a href=network.html>Qt Network Module
 <li> <a href=xml.html>Qt XML Module
</ul>
*/

/*! \page keyfeatures22.html
\title Key Features in Qt 2.2

The greatest new feature in the 2.2 release is the Qt Designer, a
visual GUI design tool. It makes it possible to cut down on
development time even further through WYSIWYG dialog design. The
designer makes use of improved runtime flexibility and a revised
property system. Please see \link designer.html Qt GUI Designer
\endlink for a feature overview.

Qt 2.2 integrates now fully on MS-Windows 2000.  This includes fade
and scroll effects for popup windows and titelbar gradients for MDI
document windows in the MDI module. As with all Qt features, we
provide the same visual effects on Unix/X11. Try adding this to
your <tt>~/.Xresources</tt> or <tt>~/.Xdefaults</tt> file:
<pre>
   ! Qt GUI effects
   *guieffects: fademenu animatecombo animatetooltip
   designer.guieffects: animatemenu fadetooltip
</pre>

Two new classes \link qaction.html QAction\endlink
and \link qactiongroup.html QActionGroup\endlink
make it much easier to
create sophisticated main windows for today's applications. A QAction
abstracts a user interface action that can appear both in menus and
tool bars.  An action group makes it easier to deal with groups of
actions. It allows to add, remove or activate its children with a
single call and provides "one of many" semantics for toggle
actions. Changing an action's properties, for example using
setEnabled(), setOn() or setText(), immediately shows up in all
representations.

Few people consider the original OSF Motif style the most elegant or
flashy GUI style. Therefore several attempts have been made to come up
with a slightly improved Motif-ish look and feel. One of them is the
thinner CDE style, which was supported by Qt since version 2.0.  In the
2.2 release, we now added support for SGI's very own Motif version on
IRIX workstations.  With its more elegant bevelling of 3D elements and
mouse-under highlight effects, it is quite appealing. For Linux users,
we added a motif plus style, that resembles the bevelling used by the
GIMP toolkit (GTK). Optionally, this style also does hovering
highlight on buttons.

Last but not least we added support for multithreaded
applications. The classes involved are QThread to start threads,
QMutex and QSemaphore to serialize them, QWaitCondition to wait/wake
threads on conditions. See the \link threads.html Threads
documentation\endlink for more details.

In addition to improving the fundamental Qt functionality,
we've made changes regarding distribution. In order to
address the steady growth of functionality in the Qt library, we
split the source code into distinct modules that can be compiled
in (or left out) separately. This also makes it possible for us to
keep the cost of entry into the commercial Qt world as low as possible.

The modules available in Qt 2.2 are:

<ul>
<li> <b>Tools:</b> platform-independent Non-GUI API for I/O, encodings, containers,
    strings, time & date, and regular expressions.

<li> <b>Kernel:</b> platform-independent GUI API, a complete window-system API.

<li> <b>Widgets:</b> portable GUI controls.

<li> <b>Dialogs:</b> ready-made common dialogs for selection of colors, files,
    printers, fonts, and basic types, plus a wizard framework, message
    boxes and progress indicator.

<li> <b>\link opengl.html OpenGL 3D Graphics:\endlink</b>
    integration of OpenGL with Qt, making it very
    easy to use OpenGL rendering in a Qt application.

<li> <b>\link network.html Network:\endlink</b>
    advanced socket and server-socket handling plus
    asynchronous DNS lookup.

<li> <b>\link canvas.html Canvas:\endlink</b>
    a highly optimized 2D graphic area.

<li> <b>\link table.html Table:\endlink</b>
    a flexible and editable table widget.

<li> <b>\link iconview.html IconView:\endlink</b>
    a powerful visualization widget similar to QListView and
    QListBox. It contains optinally labelled pixmap items that the user
    can select, drag around, rename, delete and more.

<li> <b>\link XML.html XML:\endlink</b>
    a well-formed XML parser with SAX interface plus an
    implementation of the DOM Level 1.

<li> <b>\link workspace.html Workspace:\endlink</b>
    a workspace window that can contain decorated document
    windows for Multi Document Interfaces (MDI).
</ul>



*/


/*! \page changes23.html
\title Change Notes for Qt 2.3

<h2>New major features in existing classes</h2>
<ul>

<li>QPopupMenu	- run-time editing of popupmenu accelerators.  Pressing
		a mouse button on an item in a popup menu and typing an
		accelerator key causes the menuitem to use that accelerator.
		
</ul>

*/