/****************************************************************************
** $Id: qt/doc/collect.doc   2.3.2   edited 2001-01-26 $
**
** Qt collection classes documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*!
\page collection.html

\title Collection Classes

A collection class is a class that can contain a number of items in a
certain data structure and perform operations on the contained items;
insert, remove, find etc.

Qt has many reference based collection classes and some value based
collections.

The reference based collections are:
<ul>
<li> \l QCache QCache and \l QIntCache
	LRU (least recently used) cache structures.
<li> \l QDict, \l QIntDict and \l QPtrDict dictionary structures.
<li> \l QList a double linked list structure.
<li> \l QQueue a FIFO (first in, first out) queue structure.
<li> \l QStack a LIFO (last in, first out) stack structure.
<li> \l QVector a vector structure.
</ul>

The value based collections are:
<ul>
<li> \l QValueList a value based list
<li> \l QValueStack a value based stack structure
<li> \l QMap a value based dictionary structure
</ul>

The reference based collection classes work with pointers to items,
while the value based classes store copies of their items. An
exception is \l QArray. It is neither reference nor value based, but
memory based. For maximum efficiency with the simple data types usually
used in arrays, it uses bitwise operations to copy and compare array
elements.

Some of these classes have corresponding iterators.  An iterator
is a class for traversing the items in a collection:
<ul>
<li> \link QCacheIterator QCacheIterator\endlink and
	\link QIntCacheIterator QIntCacheIterator\endlink
<li> \link QDictIterator QDictIterator\endlink,
	\link QIntDictIterator QIntDictIterator\endlink, and
	\link QPtrDictIterator QPtrDictIterator\endlink
<li> \link QListIterator QListIterator\endlink
<li> \link QValueListIterator QValueListIterator\endlink, and
	\link QValueListConstIterator QValueListConstIterator\endlink
<li> \link QMapIterator QMapIterator\endlink, and
	\link QMapConstIterator QMapConstIterator\endlink
</ul>

The value based collections plus algorithms operating on them are
grouped together in <a href="qtl.html">the Qt Template
Library</a>. See the respective documentation for details. The rest of
this page talks about the reference based containers only.

<h2>Architecture of the reference based containers</h2>

There are three internal base classes for the reference based
containers; \l QGCache, \l QGDict and \l QGList that operate on \c
void* pointers.  A thin template layer implements the actual
collections by casting item pointers to and from \c void*.

This strategy allows Qt's templates to be very economical on space
(instantiating one of these templates adds only inline-able calls to
the base classes), while it does not hurt performance too much.

<h2>A QList Example</h2>

This example shows how to store Employee items in a list and prints
them out in the reverse order:

\code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
        Employee( const char *name, int salary ) { n=name; s=salary; }
        const char *name()   const		 { return n; }
        int	    salary() const		 { return s; }
    private:
        QString     n;
        int         s;
    };

    void main()
    {
	QList<Employee> list;		// list of pointers to Employee
	list.setAutoDelete( TRUE );	// delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	QListIterator<Employee> it(list); // iterator for employee list
	for ( it.toLast(); it.current(); --it) ) {
	    Employee *emp = it.current();
	    printf( "%s earns %d\n", emp->name(), emp->salary() );
        }
    }
\endcode

Program output:
\code
	Ron earns 60000
	Steve earns 80000
	Bill earns 50000
\endcode

<h2>Managing Collection Items</h2>

All reference based collections inherit the \l QCollection base class.
This class knows only the number of items in the collection and the
delete strategy.

Items in a collection are by default not deleted when they are removed
from the collection. The \l QCollection::setAutoDelete() function
specifies the delete strategy. In the list example, we enable
auto-deletion to make the list delete the items when they are removed
from the list.

When inserting an item into a collection, only the pointer is copied,
not the item itself. This is called a shallow copy. It is possible to
make the collection copy all of the item's data (known as a deep copy)
when an item is inserted.  All collection functions that insert an
item call the virtual function \l QCollection::newItem() for the item
to be inserted.  Inherit a collection and reimplement it if you want
to have deep copies in your collection.

When removing an item from a list, the virtual function \link
QCollection::deleteItem() QCollection::deleteItem()\endlink is called.
The default implementation in all collection classes deletes the item
if auto-deletion is enabled.


<h2>Usage</h2>

A reference based collection class, such as QList\<type\>, defines a
collection of \e pointers to \e type objects.  The pointer (*) is
implicit.

We discuss \l QList here, but the same techniques apply for all
reference based collection classes and all collection class iterators.

Template instantiation:
\code
  QList<Employee> list;		// wherever the list is used
\endcode

The item's class or type, Employee in our example, must be defined prior
to the list definition.

\code
  // Does not work: Employee is not defined
  class Employee;
  QList<Employee> list;

  // This works: Employee is defined before it is used
  class Employee {
    ...
  };
  QList<Employee> list;
\endcode

<h2>Iterators</h2>

Although \l QList has member functions to traverse the list, it can
often be better to make use of an iterator. \l QListIterator is very
safe and can traverse lists that are being modified at the same time.
Multiple iterators can work independently on the same collection.

A QList has an internal list of all iterators that are currently operating
on the list.  When a list entry is removed, the list updates all iterators
to point to this entry.

The \l QDict and \l QCache collections have no traversal functions. To
traverse these collections, you must use \l QDictIterator or \l
QCacheIterator.

<h2>Predefined Collections</h2>

Qt has the following predefined collection classes:
<ul>
<li> String lists; \l QStrList, \l QStrIList (\l qstrlist.h ) and
	\l QStringList (\l qstringlist.h )
<li> String vectors; \l QStrVec  and \l QStrIVec (\l qstrvec.h )
</ul>

In almost all cases you would choose QStringList, which is a value
list of implicitly shared QString unicode strings. QStrList and
QStrIList only store char* pointers.

<h2>Comparison with the STL</h2>

We often get questions about why Qt does not use the STL, and why Qt's
container templates are provided at all.  Here are the major factors
why we use and provide these templates: <ul>
<li>Qt's reference based container templates add less space when
instantiated than the STL ones do.  Size is important for a library,
and Qt contains many instantiations of QDict, QList etc.
<li>Qt's reference based containers are often not as fast as the
STL's, for several reasons such as Qt's safe iterators.
This is however not very important for
Qt, as they are used in code that doesn't need to be very fast. (The
speed-critical data structures in Qt are mostly caches - either QCache
instantiations or custom-written, custom-optimized ones.)
<li>Qt's containers are much more portable than the STL.  When we
started writing Qt, STL was far away in the future, and when we
released Qt 1.0, no widely-used compilers could compile the STL.  For
a library such as Qt, it is of course very important to compile on the
widest possible variety of compilers. Even today, the STL is
not portable across all platforms supported by Qt.
<li> Though primarily written for use internally in Qt, the containers
are well documented and so we saw no reason to hide them.
</ul>

Value based containers in the style of the STL do have one major
advantage, though: They are extremely efficient when being used with
value objects that implement a fast copy constructor. This is the case
with all implicit shared Qt classes such as QString or any of the C++
standard data types like int, bool or double. Since we needed that
functionality for Qt itself, we added a few <a href="qtl.html">value
based containers</a> in Qt-2.0. As with the other containers, the new
ones have a well documented interface and a naming scheme that matches
the usual Qt conventions - another advantage over the STL classes.

There are other differences, but the ones above are the important
reasons behind our decision to write, use and provide these classes.

*/
