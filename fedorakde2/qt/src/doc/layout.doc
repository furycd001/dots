/****************************************************************************
** $Id: qt/doc/layout.doc   2.3.2   edited 2001-01-26 $
**
** Explanation of the layout subsystem
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page layout.html

\title Layout Classes

The Qt layout system provides a simple and powerful way of specifying
the layout of child widgets.
<p>
By specifying the logical layout once, you get the following benefits:
<ul>
<li> Positioning of child widgets.
<li> Sensible default sizes for top-level widgets.
<li> Sensible minimum sizes for top-level widgets.
<li> Resize handling.
<li> Automatic update when contents change:
	<ul>
	<li> Font size, text or other contents of subwidgets.
	<li> Hiding or showing a subwidget.
	<li> Removal of subwidget.
	</ul>
</ul>

<h2>Layout Widgets</h2>

The easiest way to give your widgets a good layout is to use the
layout widgets: \link QHBox QHBox\endlink, \link QVBox QVBox\endlink
 and \link QGrid QGrid \endlink. A layout widget automatically
lays out its children in the order they are constructed. To make more
complex layouts, you can nest layout widgets inside each other.

<dl>
  <dt>\link QHBox QHBox\endlink
      <dd>A QHBox lays out its children in a horizontal row, left to right.
	<br><img src="qhbox-m.png" alt="QHBox with five children.">

  <dt>\link QVBox QVBox\endlink
      <dd>A QVBox lays out its children in a vertical row, top to bottom.
	<br><img src="qvbox-m.png" alt="QVBox with five children.">
  <dt>\link QGrid QGrid\endlink
      <dd>A QGrid lays out its children in a table. You specify how
	many columns the table has, and it is filled left to right,
	beginning a new row when the previous is filled up. The grid
	is fixed; the children will not flow to other rows as the
	widget is resized.
	<br><img src="qgrid-m.png" alt="Two-column QGrid with five children.">
</dl>

The grid above can be produced by the following code:
\code
    QGrid *main = new QGrid( 2 ); // a 2 x n grid
    new QLabel( "One", main );
    new QLabel( "Two", main );
    new QLabel( "Three", main );
    new QLabel( "Four", main );
    new QLabel( "Five", main );
\endcode


You can adjust the layout somewhat by calling \link
QWidget::setMinimumSize() setMinimumSize()\endlink or
\link QWidget::setFixedSize() setFixedSize()\endlink on
the children.

<h2>QLayout</h2>

If you need more control over the layout, use a \link QLayout QLayout\endlink
 subclass. The layout classes included in Qt 2.1 are \link QGridLayout
 QGridLayout\endlink and \link QBoxLayout QBoxLayout\endlink.
(\link QHBoxLayout  QHBoxLayout\endlink and
\link QVBoxLayout  QVBoxLayout\endlink are trivial subclasses of QBoxLayout,
that are simpler to use and make the code easier to read.)

<p>
When you use a layout, you have to insert each child both into its
parent widget (done in the constructor) and into its layout (typically
done with a function called \c addWidget()). This way, you can give
layout parameters for each widget, specifying properties like
alignment, stretch, and placement.
<p>
The following code makes a grid like the one above, with a couple of
improvements:
\code
    QWidget *main = new QWidget;

    //make a 1x1 grid, it will auto-expand:
    QGridLayout *grid = new QGridLayout( main, 1, 1 );

    //add the first four widgets with (row, column) addressing
    grid->addWidget( new QLabel( "One", main ), 0, 0 );
    grid->addWidget( new QLabel( "Two", main ), 0, 1 );
    grid->addWidget( new QLabel( "Three", main ), 1, 0 );
    grid->addWidget( new QLabel( "Four", main ), 1, 1 );

    //add the last widget on row 2, let it span from column 0 to
    //column 1, and let it be aligned center.	
    grid->addMultiCellWidget( new QLabel( "Five", main ), 2, 2, 0, 1,
			      Qt::AlignCenter );

    //let the ratio between the widths of columns 0 and 1 be 2:3.
    grid->setColStretch( 0, 2 );
    grid->setColStretch( 1, 3 );
\endcode

<p>

You can insert layouts inside a layout by giving the parent layout as
a parameter in the constructor.
\code
    QWidget*       main = new QWidget;
    QLineEdit*    field = new QLineEdit( main );
    QPushButton*     ok = new QPushButton( "OK", main );
    QPushButton* cancel = new QPushButton( "Cancel", main );
    QLabel*       label = new QLabel( "Where do you want to go?", main );

    QVBoxLayout *vbox    = new QVBoxLayout( main ); // A layout on a widget
    vbox->addWidget( label );
    vbox->addWidget( field );

    QHBoxLayout *buttons = new QHBoxLayout( vbox ); // A layout inside a layout
    buttons->addWidget( ok );
    buttons->addWidget( cancel );
\endcode
If you are not satisfied with the
default placement, you can create the layout without a parent and
then insert it with \c addLayout().

<h2>Custom Layouts</h2>

If the built-in layout classes are not sufficient, you can define your
own. You will have to make a subclass of \link QLayout QLayout\endlink
that handles resizing and size calculations, as well as a subclass of
\link QGLayoutIterator QGLayoutIterator\endlink to iterate over your
layout class.

See the <a href="customlayout.html">Custom Layout</a> page for an
in-depth description.

<h2>Custom Widgets In Layouts</h2>

When you make your own widget class, you should also communicate its
layout properties. If the widget has a QLayout, this is already taken
care of. If the widget does not have any children, or uses manual
layout, you should reimplement the following QWidget member functions:

<dl>
  <dt>\link QWidget::sizeHint() sizeHint()\endlink
      <dd> Returns the preferred size of the widget.
  <dt>\link QWidget::minimumSizeHint() minimumSizeHint()\endlink
      <dd> Returns the smallest size the widget can have.
  <dt>\link QWidget::sizePolicy() sizePolicy()\endlink
      <dd> Returns a \link QSizePolicy QSizePolicy\endlink; a value
      describing the space requirements of the widget.

</dl>

Call \link QWidget::updateGeometry() updateGeometry()\endlink whenever
the size hint, minimum size hint or size policy changes. This will
cause a layout recalculation. Multiple calls to updateGeometry() will
only cause one recalculation.

If the preferred height of your widget depends on its actual width
(eg. a label with automatic word-breaking), set the \c hasHeightForWidth()
flag in \c sizePolicy(), and reimplement \link QWidget::heightForWidth()
heightForWidth()\endlink.

Even if you implement heightForWidth(), it is still necessary to
provide a good sizeHint(). The sizeHint() provides the preferred width
of the widget, and it is used by QLayout subclasses that do not
support heightForWidth() (both QGridLayout and QBoxLayout support it).

For further guidance when implementing these functions, see their
implementations in existing Qt classes that have similar layout
requirements to your new widget.

<h2>Manual Layout</h2>

If you are making a one-of-a-kind special layout, you can also make a
custom widget as described above. Reimplement \link
QWidget::resizeEvent() resizeEvent()\endlink to calculate the
required distribution of sizes and call \link QWidget::setGeometry()
setGeometry()\endlink on each child.

The widget will get an event with \link QEvent::type() type \endlink
\c LayoutHint when the layout needs to be
recalculated. Reimplement \link QWidget::event() event()\endlink
to be notified of \c LayoutHint events.

*/


/*!  \page customlayout.html

\title Writing your own layout manager

Here we go through an example in detail. The class \c
CardLayout is inspired by the Java layout manager of the same name. It
lays out the items (widgets or nested layouts)
on top of each other, each item offset by
\link QLayout::spacing() spacing()\endlink.

To write your own layout class, you must define the following:
  <ul>
  <li>A data structure to store the items
       handle by the layout.
	Each item is a \link QLayoutItem QLayoutItem\endlink.
	We will just use a QList in this example.
  <li>\link QLayout::addItem() addItem() \endlink, how to add items
	to the layout.
  <li>\link QLayout::setGeometry() setGeometry() \endlink, how to do the
	layout.
  <li>\link QLayout::sizeHint() sizeHint() \endlink, the preferred size of the
	layout.
  <li>\link QLayout::iterator() iterator() \endlink, how to iterate over the
	layout.
  </ul>

In most cases, you will also implement \link QLayout::minimumSize()
minimumSize()\endlink.

<h3> card.h </h3>


\code
#ifndef CARD_H
#define CARD_H

#include <qlayout.h>
#include <qlist.h>

class CardLayout : public QLayout
{
public:
    CardLayout( QWidget *parent, int dist )
	: QLayout( parent, 0, dist ) {}
    CardLayout( QLayout* parent, int dist)
	: QLayout( parent, dist ) {}
    CardLayout( int dist )
	: QLayout( dist ) {}
    ~CardLayout();

    void addItem(QLayoutItem *item);
    QSize sizeHint() const;
    QSize minimumSize() const;
    QLayoutIterator iterator();
    void setGeometry(const QRect &rect);

private:
    QList<QLayoutItem> list;
};

#endif
\endcode


<h3> card.cpp </h3>
\code
#include "card.h"
\endcode

We first define an iterator over the layout. Layout iterators are
used internally by the layout system to handle deletion of
widgets. They are also available for application programmers.

There are two different classes involved: QLayoutIterator is the class
that is visible to application programmers, it is explicitly
shared. The QLayoutIterator contains a QGLayoutIterator that does all
the work. We must create a subclass of QGLayoutIterator that knows how
to iterate over our layout class.

In this case, we choose a simple implementation: we store an integer
index into the list and a pointer to the list. Every QGLayoutIterator
subclass must implement \link QGLayoutIterator::current() current()\endlink,
\link QGLayoutIterator::next() next()\endlink and
\link QGLayoutIterator::takeCurrent() takeCurrent()\endlink, as well as
a constructor. In our example we do not need a destructor.

\code
class CardLayoutIterator :public QGLayoutIterator
{
public:
  CardLayoutIterator(QList<QLayoutItem> *l)
    : idx(0), list(l)  {}

  QLayoutItem *current()
  { return idx < int(list->count()) ? list->at(idx) : 0;  }

  QLayoutItem *next()
  { idx++; return current(); }

  QLayoutItem *takeCurrent()
  { return list->take( idx ); }

private:
  int idx;
  QList<QLayoutItem> *list;
};
\endcode


We must implement QLayout:iterator() to return a QLayoutIterator over
this layout.

\code
QLayoutIterator CardLayout::iterator()
{	
    return QLayoutIterator( new CardLayoutIterator(&list) );
}
\endcode


addItem() implements the default placement strategy for layout items. It
must be implemented. It is used by QLayout::add(), by the QLayout
constructor that takes a layout as parent, and it is used to implement
the \link QLayout::autoAdd() auto-add\endlink feature. If your layout
has advanced placement options that require parameters, you will have to
provide extra access functions like eg. \link QGridLayout::addMultiCell()
QGridLayout::addMultiCell()\endlink.

\code
void CardLayout::addItem( QLayoutItem *item )
{
    list.append(item);
}
\endcode


The layout takes over responsibility of the items added. Since
QLayoutItem does not inherit QObject, we must delete the items
manually. The function \link QLayout::deleteAllItems() deleteAllItems()\endlink
uses the iterator we defined above to delete all items in the layout.

\code
CardLayout::~CardLayout()
{
    deleteAllItems();
}
\endcode


The setGeometry() function actually performs the layout. The rectangle
supplied as an argument does not include margin(). If relevant, use
spacing() as the distance between items.

\code
void CardLayout::setGeometry(const QRect &rect)
{
    QLayout::setGeometry(rect);

    QListIterator<QLayoutItem> it(list);
    if (it.count() == 0)
	return;

    QLayoutItem *o;

    int i = 0;

    int w = rect.width() - (list.count() - 1) * spacing();
    int h = rect.height() - (list.count() - 1) * spacing();

    while ((o=it.current()) != 0)
	{
	    ++it;
	    QRect geom(rect.x() + i * spacing(), rect.y() + i * spacing(),
		       w, h );
	    o->setGeometry( geom );
	    ++i;
	}	
}
\endcode



sizeHint() and minimumSize() are normally very similar in
implementation.  The sizes returned by both functions should include
spacing(), but not margin().

\code
QSize CardLayout::sizeHint() const
{
    QSize s(0,0);
    int n = list.count();
    if ( n > 0 )
	s = QSize(100,70); //start with a nice default size
    QListIterator<QLayoutItem> it(list);
    QLayoutItem *o;
    while ( (o=it.current()) != 0 ) {
	++it;
	s = s.expandedTo( o->minimumSize() );
    }
    return s + n*QSize(spacing(),spacing());
}

QSize CardLayout::minimumSize() const
{
    QSize s(0,0);
    int n = list.count();
    QListIterator<QLayoutItem> it(list);
    QLayoutItem *o;
    while ( (o=it.current()) != 0 ) {
	++it;
	s = s.expandedTo( o->minimumSize() );
    }
    return s + n*QSize(spacing(),spacing());
}
\endcode


<h2>Further comments</h2>

This layout does not implement heightForWidth().

We ignore QLayoutItem::isEmpty(), this means that the layout will treat
hidden widgets as visible.

For complex layouts, speed can be greatly increased by caching calculated
values and/or data structures. In that case, implement \link
QLayoutItem::invalidate() invalidate()\endlink to mark the cached
data as dirty.

Calling QLayoutItem::sizeHint(), etc. may be expensive, so you should
store the value in a local variable if you need it again later in the
same function.

You should not call QLayoutItem::setGeometry() twice on the same item
in the same function. That can be very expensive if the item has
several child widgets, because it will have to do a complete layout
every time. Instead, calculate the geometry and then set it. (This
does not only apply to layouts, you should do the same if you
implement your own resizeEvent()).

*/
