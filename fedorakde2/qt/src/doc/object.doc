/****************************************************************************
** $Id: qt/doc/object.doc   2.3.2   edited 2001-04-05 $
**
** Explanation of the Qt object model
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page object.html

\title Qt Object Model

The standard C++ Object Model provides very efficient runtime support
of the object paradigm. On the negative side, its static nature shows
inflexibility in certain problem domains. Graphical User Interface
programming is one example that requires both runtime efficiency and a
high level of flexibility. Qt provides this, by combining the speed of
C++ with the flexibility of the Qt Object Model.

In addition to C++, Qt provides

<ul>
<li> a very powerful mechanism for seamless object
  communication dubbed <a href="signalsandslots.html">signals and
  slots</a>,
<li> queryable and designable <a href="properties.html">object
  properties</a>,
<li> powerful <a href="eventsandfilters.html">events and event filters</a>,
<li> scoped <a href="i18n.html">string translation for internationalization</a>,
<li> sophisticated interval driven <a href="timers.html">timers</a>
  that make it possible to elegantly integrate many tasks in an
  event-driven GUI.
<li> hierarchical and queryable <a href="objecttrees.html">object
  trees</a> that organize object ownership in a natural way.
<li> guarded pointers, \l QGuardedPtr, that are automatically
  set to null when the referenced object is destroyed, unlike normal C++
  pointers which become "dangling pointers" in that case. 
</ul>

Many of these Qt features are implemented with standard C++
techniques, based on inheritance from \l QObject. Others, like the
object communication mechanism and the dynamic property system,
require the <a href="metaobjects.html">Meta Object System</a> provided
by Qt's own <a href="moc.html">Meta Object Compiler (moc)</a>. Think
of the Meta Object System as a C++ extension that makes the language
better suited for true component GUI programming.

*/




/*! \page timers.html

\title Timers

\l QObject, the base class of all Qt objects, provides the basic timer
support in Qt. With \l QObject::startTimer(), you start a timer with
an \e interval in milliseconds as argument. The function returns a
unique integer timer id. The timer will now "fire" every \e interval
milliseconds, until you explicitly call \l QObject::killTimer() with
the timer id.

For this mechanism to work, the application has to run in an event
loop. You start an event loop with \l QApplication::exec(). When a
timer fires, the application sends a QTimerEvent, and the flow of
control leaves the event loop until the timer event is processed. This
implies that a timer cannot fire while your application is busy doing
something else. In other words: the accuracy of timers depends on the
granularity of your application.

There is practically no upper limit for the interval value (more than
one year).  The accuracy depends on the underlying operating
system. Windows 95/98 has 55 millisecond (18.2 times per second)
accuracy; other systems that we have tested (UNIX X11, Windows NT and
OS/2) can handle 1 millisecond intervals.

The main API for the timer functionality is \l QTimer.  That class
provides regular timers that emit a signal when the timer fires, and
inherit \l QObject so that it fits well into the ownership structure
of most GUI programs.  The normal way of using it is like this excerpt
from a Qt example program:

\code
    QTimer * counter = new QTimer( this );
    connect( counter, SIGNAL(timeout()),
	     this, SLOT(updateCaption()) );
    counter->start( 1000 );
\endcode

The counter timer is made into a child of this widget, so that when
this widget is deleted, the timer is deleted too.  Next, its timeout
signal is connected to the slot that will do the work, and finally
it's started.

QTimer also provides a simple one-shot timer API.  \l QButton uses it
to show the button being pressed down and then (0.1 second later) be
released when the keyboard is used to "press" a button, for example:

\code
    QTimer::singleShot( 100, this, SLOT(animateTimeout()) );
\endcode

0.1 seconds after this line of code is executed, the same button's
animateTimeout() slot is called.

Here is an outline of a slightly longer example that combines object
communication via signals and slots with a QTimer object. It
demonstrates how to utilize timers to perform intensive calculations
in a single-threaded application without blocking the user interface.

  \code
    // The Mandelbrot class uses a QTimer to calculate the mandelbrot
    // set one scanline at a time without blocking the CPU.  It
    // inherits QObject to use signals and slots.  Calling start()
    // starts the calculation. The done() signal is emitted when it
    // has finished.  Note that this example is not complete, just an
    // outline.

    class Mandelbrot : public QObject
    {
	Q_OBJECT				// required for signals/slots
    public:
	Mandelbrot( QObject *parent=0, const char *name );
	...
    public slots:
	void	start();
    signals:
	void	done();
    private slots:
	void	calculate();
    private:
	QTimer	timer;
	...
    };

    //
    // Constructs and initializes a Mandelbrot object.
    //

    Mandelbrot::Mandelbrot( QObject *parent=0, const char *name )
	: QObject( parent, name )
    {
	connect( &timer, SIGNAL(timeout()), SLOT(calculate()) );
	...
    }

    //
    // Starts the calculation task. The internal calculate() slot
    // will be activated every 10 milliseconds.
    //

    void Mandelbrot::start()
    {
	if ( !timer.isActive() )		// not already running
	    timer.start( 10 );			// timeout every 10 ms
    }

    //
    // Calculates one scanline at a time.
    // Emits the done() signal when finished.
    //

    void Mandelbrot::calculate()
    {
	...			// perform the calculation for a scanline
	if ( finished ) {	// no more scanlines
	   timer.stop();
	   emit done();
	}
    }
  \endcode


*/


/*! \page properties.html

\title Properties

Qt provides a sophisticated property system similar to those shipped
by some compiler vendors. However, as a compiler- and
platform-independent library, Qt cannot rely on non-standard compiler
features like \c __property or \c [property]. Our solution works with
any standard C++ compiler on every platform we support. It's based on
the \link metaobjects.html Meta Object System \endlink that also
provides object communication through signals and slots.

The \c Q_PROPERTY macro in a class declaration declares a
property. Properties can only be declared in classes that inherit \l
QObject. A second macro - \c Q_OVERRIDE - can be used to override some
aspects of an inherited property in a subclass.

To the outer world, a property appears quite similar to a data
member. However, properties have several features that distinguish
them from ordinary data members:

<ul>
<li> a read method.  This always exists.

<li> a write method.  Optional: read-only properties like \l
QWidget::isDesktop() do not have this.

<li> an attribute "stored" that indicates persistence.  Most
properties are stored, but a few janus-faced properties like \l
QWidget::minimumWidth() aren't: That property is just way of looking
at \l QWidget::minimumSize(), it has no data of its own.

<li> a reset method to set a property back to its context specific
default value.  Very unusual, but e.g. \l QWidget::font() needs it:
The default is to follow its surroundings, and no call to \l
QWidget::setFont() can mean that.

<li> an attribute "designable" that indicates whether a property is
considered to be designable in a GUI Designer.  Most are, but e.g. \l
QButton::isDown() can't be designed.  The user can press buttons, and
the application programmer can make the program press its own buttons,
but a GUI design tool can't press buttons.

</ul>

Properties can be read and written through generic functions in
QObject without knowing anything about class in use.  These two are
equivalent:

\code
    //QButton * b and QObject * o point to the same button
    b->setDown( TRUE );
    o->setProperty( "down", TRUE );
\endcode

Equivalent, that is, except that the first is faster, and that the
first gives much better diagnostics at compile time.  When accessible,
the first is preferred.  However, since you can get a list of all
available properties for any QObject through its \link QMetaObject
metaObject() \endlink setProperty() can give you control over classes
that weren't available at compile time.

As well as QObject::setProperty(), there is a \l QObject::property().
\l QMetaObject::propertyNames() returns the names of all available
properties.  \l QMetaObject::property() returns the property data for
a named property: a \l QMetaProperty object.

Here's a simple example that shows the most important property
functions in use:

\code
    class MyClass : public QObject
    {
        Q_OBJECT
    public:
        MyClass( QObject * parent=0, const char * name=0 );
        ~MyClass();

        enum Priority { High, Low, VeryHigh, VeryLow };
        void setPriority( Priority );
        Priority priority() const;
    };
\endcode

The class has a property "priority" that is not yet known to the meta
object system. In order to make the property known, you have to
declare it with the \c Q_PROPERTY macro. The syntax is as follows:

\code
Q_PROPERTY( type name READ getFunction [WRITE setFunction]
            [STORED bool] [DESIGNABLE bool] [RESET resetFunction])
\endcode

For the declaration to be valid, the get function has to be const and
to return either the type itself, a pointer to it, or a reference to
it. The optional write function has to return void and to take exactly
one argument, either the type itself, a pointer or a const reference
to it. The meta object compiler enforces this.

The type of a property can be everything \l QVariant provides or an
enumeration type declared in the class itself. Since \c MyClass uses
the enumeration type \c Priority for the property, this type has to be
registered with the property system as well. This way it will be
possible to set a value by name, like this:

\code
   obj->setProperty( "priority", "VeryHigh" ); 
\endcode

Enumeration types are registered with the \c Q_ENUMS macro.  Here's the
final class declaration including the property declaration:

\code
    class MyClass : public QObject
    {
        Q_OBJECT
        Q_PROPERTY( Priority priority READ priority WRITE setPriority )
        Q_ENUMS( Priority )
    public:
        MyClass( QObject * parent=0, const char * name=0 );
        ~MyClass();

        enum Priority { High, Low, VeryHigh, VeryLow };
        void setPriority( Priority );
        Priority priority() const;
    };
\endcode

Another similar macro is \c Q_SETS. Like \c Q_ENUMS, it registers an
enumeration type but marks it in addition as "set", i.e. the
enumeration values can be or'ed together.  An I/O class might have
enumeration values "Read" and "Write" and accept "Read|Write": Such an
enum is best handled with \c Q_SETS, not \c Q_ENUMS.

The remaining keywords in the \c Q_PROPERTY section are \c STORED, \c
DESIGNABLE and \c RESET.

\c STORED declares whether the property's value is stored in the
object. Stored makes only sense for writable properties. The default
value is \c true.

\c DESIGNABLE declares whether this property is suited for
modification by a GUI designer program.  The default is \c true for
writable properties, otherwise \c false.

\c RESET names a function that will set the property to its default
state (which may have changed since initialization).  The function
must return void and take no arguments.

*/

/* Arnt didn't understand why this exists, so he left it out until he
can fit it into the text:

Connected to the property system is an additional macro, "Q_CLASSINFO",
that can be used to attach additional name/value-pairs to a classes'
meta object, for example:

\code
Q_CLASSINFO( "Status", "Very nice class" )
\endcode

Like other meta data, class information is accessible at runtime
through the meta object, see \l QMetaObject::classInfo() for details.

*/

/*! \page eventsandfilters.html

\title Events and Event Filters

An event, in Qt, is an object that inherits \l QEvent.  Events are
delivered to objects that inherit \l QObject through calling \l
QObject::event().  Event delivery means that an event has occurred, the
QEvent indicates precisely what, and the QObject needs to react.  Most
events are specific to \l QWidget and its subclasses, but there are
important events that aren't related to graphics, such as socket
activation, which is the event used by \l QSocketNotifier for its
work.

Some events come from the window system, e.g. \l QMouseEvent, some
from other sources, e.g. \l QTimerEvent, and some come from the
application program.  Qt is symmetric, as usual, so you can send
events in exactly the same ways as Qt's own event loop does.

Most events types have special classes, most commonly \l QResizeEvent,
\l QPaintEvent, \l QMouseEvent, \l QKeyEvent and \l QCloseEvent.
There are many others, perhaps forty or so, but most are rather odd.

Each class, \l QResizeEvent is an excellent example, subclasses QEvent
and adds event-specific functions.  In the case of QResizeEvent, \l
QResizeEvent::size() and \l QResizeEvent::oldSize() are added.

Some classes support more than one event type.  \l QMouseEvent
supports mouse moves, presses, shift-presses, drags, clicks,
right-presses, and so on ad infinitum.

Since programs need to react in varied and complicated ways, Qt's
event delivery mechanisms are rather flexible.  The documentation for
\l QApplication::notify() concisely tells the whole story, here we
will explain enough for 99% of applications.

The normal way for an event to be delivered is by calling a virtual
function.  For example, \l QPaintEvent is delivered by calling \l
QWidget::paintEvent().  This virtual function is responsible for
reacting appropriately, normally by repainting the widget.

Occasionally there isn't a such an event-specific function, or the
event-specific function isn't sufficient.  The most common example is
tab key presses.  Normally, those are interpreted by QWidget to move
the keyboard focus, but a few widgets need the tab key for themselves.

These objects can reimplement \l QObject::event(), the general event
handler, and either do their event handling before or after the usual
handling, or replace it completely.  A very odd widget that both
interprets tab and has an application-specific custom event might
contain:

\code
  bool MyClass:event( QEvent * e ) {
      if ( e->type() == QEvent::KeyPress ) {
	  QKeyEvent * ke = (QKeyEvent*) e;
	  if ( ke->key() == Key_Tab ) {
	      // special tab handling here
	      k->accept();
	      return TRUE;
	  }
      } else if ( e->type() >= QEvent::User ) {
	  QCustomEvent * c = (QCustomEvent*) e;
	  // custom event handling here
	  return TRUE;
      }
      QWidget::event( e );
  }
\endcode

More commonly, an object needs to look at another's events.  Qt
supports this using \l QObject::installEventFilter() (and the
corresponding remove).  For example, dialogs commonly want to filter
key presses for some widgets, e.g. to modify Return-key handling.

An event filter gets to process events before the target object does.
The filter's \l QObject::eventFilter() implementation is called, and
can accept or reject the filter, and allow or deny further processing
of the event.  If all the event filters allow further processing of an
event, the event is sent to the target object itself.  If one of them
stops processing, the target and any later event filters don't get to
see the event at all.

It's also possible to filter \e all events for the entire application,
by installing an event filter on \l QApplication.  This is what \l
QToolTip does in order to see \e all the mouse and keyboard activity.
Of course, this is very powerful, but it also slows down event
delivery of every single event in the entire application, so it's best
avoided.

The global event filters are called before the object-specific
filters.

Finally, many applications want to create and send their own events.

Creating an event of a built-in type is very simple: Create an object
of the relevant type, and then call \l QApplication::sendEvent() or \l
QApplication::postEvent().

sendEvent() processes the event immediately - when sendEvent()
returns, (the event filters and) the object have already processed the
event.  For many event classes there is a function called isAccepted()
tells you whether the event was accepted or rejected by the last
handler that was called.

postEvent() posts the event on a queue for later dispatch.  The next
time Qt's main event loop runs, it dispatches all posted events, with
some optimization.  For example, if there are several resize events,
they are are compacted into one.  The same applies to paint events: \l
QWidget::update() calls postEvent(), which minimizes flickering and
increases speed by avoiding multiple repaints.

postEvent() is also often used during object initialization, since the
posted event will typically be dispatched very soon after the
initialization of the object is complete.

To create events of a custom type, you need to define an event number,
which must be greater than \c QEvent::User, and probably you also need
to subclass \l QCustomEvent in order to pass characteristics about
your custom event.  See the documentation to \l QCustomEvent for
details.

*/

/*! \page objecttrees.html

\title Object Trees and Object Ownership

\link QObject QObjects\endlink organize themselves in object trees.
When you create a QObject with another object as parent, it's added to
the parent's \link QObject::children() children() \endlink list, and
is deleted when the parent is.  This turns out to fit the needs of GUI
objects well.  For example, a \l QAccel (keyboard accelerator) is a
child of the right window, so when the user closes that window, the
accelerator is deleted too.

The static function \l QObject::objectTrees() gives you access to all
the root objects that currently exist.

\l QWidget, the base class of everything that shows up on the screen,
extends the parent/child relationship: a child normally also becomes a
so-called child widget, i.e. it is displayed in its parent's
coordinate system and is graphically clipped by its parent's
boundaries.  Thus, when the the application deletes a message box
after it's been closed, the message box' OK button is deleted too,
just the way you would want, because the button is a child of the
message box.

Of course, you can also delete a child object yourself, and it will
remove itself from its parent.  For example, when the user removes a
toolbar that could often result in the application deleting one of the
\l QToolBar objects, and the tool bar's \l QMainWindow parent would
then notice the change and reconfigure its screen space.

The debugging functions \l QObject::dumpObjectTree() and \l
QObject::dumpObjectInfo() are often useful when an application looks or
acts strangely.

*/
