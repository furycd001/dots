/****************************************************************************
** $Id: qt/doc/qintcache.doc   2.3.2   edited 2001-01-26 $
**
** QIntCache and QIntCacheIterator class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/


/*****************************************************************************
  QIntCache documentation
 *****************************************************************************/

/*!
  \class QIntCache qintcache.h

  \brief The QIntCache class is a template class that provides a cache based on \c long keys.

  \ingroup collection
  \ingroup tools

  QIntCache is implemented as a template class. Define a
  template instance QIntCache\<X\> to create a cache that operates on
  pointers to X, or X*.

  A cache is a least recently used (LRU) list of cache items, accessed
  via \c long keys.  Each cache item has a cost.  The sum of item costs,
  totalCost(), will not exceed the maximum cache cost, maxCost().
  If inserting a new item would cause the total cost to exceed the
  maximum cost, the least recently used items in the cache are removed.

  Apart from insert(), by far the most important function is find()
  (which also exists as operator[]).  This function looks up an item,
  returns it, and by default marks it as being the most recently used
  item.

  There are also methods to remove() or take() an object from the
  cache.  Calling setAutoDelete(TRUE) for a cache tells it to delete
  items that are removed.  The default is to not delete items when
  then are removed (i.e. remove() and take() are equivalent).

  When inserting an item into the cache, only the pointer is copied, not
  the item itself. This is called a shallow copy. It is possible to make the
  dictionary copy all of the item's data (known as a deep copy) when an
  item is inserted.  insert() calls the virtual function
  QCollection::newItem() for the item to be inserted.
  Inherit a dictionary and reimplement it if you want deep copies.

  When removing a cache item, the virtual function
  QCollection::deleteItem() is called.  It's default implementation
  in QIntCache is to delete the item if auto-deletion is enabled.

  There is a QIntCacheIterator which may be used to traverse the
  items in the cache in arbitrary order.

  \sa QIntCacheIterator, QCache, QAsciiCache,
      \link collection.html Collection Classes\endlink
*/

/*!
  \fn QIntCache::QIntCache( const QIntCache<type> &c )

  \internal

  Do not use. A QCache cannot be copied. Calls qFatal() in debug version.
*/

/*!
  \fn QIntCache::QIntCache( int maxCost, int size  )

  Constructs a cache with the following properties:
  \arg \a maxCost is the maximum allowed total cost.
  \arg \a size is the size of the internal hash array.

  Each inserted item is associated with a cost.  When inserting a new
  item, if the total cost of all items in the cache will exceeds
  \a maxCost, the cache will start throwing out the older (recently least
  used)  items until there is room enough for the new item to be inserted.

  Setting \a size to a suitably large \link primes.html prime
  number\endlink (equal to or greater than the expected number of entries)
  makes the hash distribution better and hence the loopup faster.
*/

/*!
  \fn QIntCache::~QIntCache()

  Removes all items from the cache and destroys it.
  All iterators that access this cache will be reset.
*/

/*!
  \fn QIntCache<type>& QIntCache::operator=( const QIntCache<type> &c )

  \internal

  Do not use. A QIntCache cannot be copied. Calls qFatal() in debug version.
*/

/*!
  \fn int QIntCache::maxCost() const

  Returns the maximum allowed total cost of the cache.
  \sa setMaxCost() totalCost()
*/

/*!
  \fn int QIntCache::totalCost() const

  Returns the total cost of the items in the cache.  This is an
  integer in the range 0 to maxCost().

  \sa setMaxCost()
*/

/*!
  \fn void QIntCache::setMaxCost( int m )

  Sets the maximum allowed total cost of the cache to \a m.  If the
  current total cost is above \a m, some items are removed
  immediately.

  \sa maxCost() totalCost()
*/

/*!
  \fn uint QIntCache::count() const

  Returns the number of items in the cache.

  \sa totalCost()
*/

/*!
  \fn uint QIntCache::size() const

  Returns the size of the hash array used to implement the cache.
  This should be a bit bigger than count() is likely to be.
*/

/*!
  \fn bool QIntCache::isEmpty() const

  Returns TRUE if the cache is empty, or TRUE if there is at least one
  object in it.
*/

/*!
  \fn bool QIntCache::insert( long k, const type *d, int c, int p )

  Inserts the item \a d into the cache with key \a k and cost \a c
  (default 1).  Returns TRUE if it succeeds and FALSE if it fails.

  The cache's size is limited, and if the total cost is too high,
  QIntCache will remove old, least-used items until there is room for
  this new item.

  The parameter \a p is internal and should be left at the default
  value (0).

  \warning If this function returns FALSE, you must delete \a d
  yourself.  Additionally, be very careful about using \a d after
  calling this function, as any other insertions into the cache, from
  anywhere in the application, or within Qt itself, could cause the
  object to be discarded from the cache, and the pointer to become
  invalid.
*/

/*!
  \fn bool QIntCache::remove( long k )

  Removes the item associated with \e k, and returns TRUE if the item
  was present in the cache or FALSE if it was not.

  The item is deleted if auto-deletion has been enabled, i.e. you have
  called setAutoDelete(TRUE).

  If there are two or more items with equal keys, then the one that
  was inserted last is is removed.

  All iterators that refer to the removed item are set to point to the
  next item in the cache's traversal order.

  \sa take(), clear()
*/

/*!
  \fn type * QIntCache::take( long k )

  Takes the item associated with \e k out of the cache without
  deleting it, and returns a pointer to the item taken out, or null if
  the key does not exist in the cache.

  If there are two or more items with equal keys, then the one that
  was inserted last is taken.

  All iterators that refer to the taken item are set to point to the
  next item in the cache's traversal order.

  \sa remove(), clear()
*/

/*!
  \fn void QIntCache::clear()

  Removes all items from the cache, and deletes them if auto-deletion
  has been enabled.

  All cache iterators that operate this on cache are reset.

  \sa remove() take()
*/

/*!
  \fn type * QIntCache::find( long k, bool ref ) const

  Returns the item associated with \a k, or null if the key does not
  exist in the cache.  If \a ref is TRUE (the default), the item is
  moved to the front of the LRU list.

  If there are two or more items with equal keys, then the one that
  was inserted last is returned.
*/

/*!
  \fn type * QIntCache::operator[]( long k ) const

  Returns the item associated with \a k, or null if \a k does not
  exist in the cache, and moves the item to the front of the LRU list.

  If there are two or more items with equal keys, then the one that
  was inserted last is returned.

  This is the same as find( k, TRUE ).

  \sa find()
*/

/*!
  \fn void QIntCache::statistics() const

  A debug-only utility function. Prints out cache usage, hit/miss, and
  distribution information using qDebug(). This function does nothing
  in the release library.
*/

/*****************************************************************************
  QIntCacheIterator documentation
 *****************************************************************************/

/*!
  \class QIntCacheIterator qcache.h
  \brief The QIntCacheIterator class provides an iterator for QIntCache collections.

  \ingroup collection
  \ingroup tools

  Note that the traversal order is arbitrary, you are not guaranteed
  any particular order.  If new objects are inserted into the cache
  while the iterator is active, the iterator may or may not see them.

  Multiple iterators are completely independent, even when they
  operate on the same QIntCache. QIntCache updates all iterators that refer
  an item when that item is removed.

  QIntCacheIterator provides an operator++(), and an operator+=() to
  traverse the cache, current() and currentKey() to access the current
  cache item and its key, atFirst() atLast() which return TRUE if the
  iterator points to the first/last item in the cache, isEmpty() which
  returns TRUE if the cache is empty and finally count() which returns
  the number of items in the cache.

  Note that atFirst() and atLast() refer to the iterator's arbitrary
  ordering, not to the cache's internal LRU list.

  \sa QIntCache
*/

/*!
  \fn QIntCacheIterator::QIntCacheIterator( const QIntCache<type> &cache )

  Constructs an iterator for \e cache.  The current iterator item is
  set to point on the first item in the \e cache (or rather, the first
  item is defined to be the item at which this constructor sets the
  iterator to point).
*/

/*!
  \fn QIntCacheIterator::QIntCacheIterator (const QIntCacheIterator<type> & ci)

  Constructs an iterator for the same cache as \a ci.  The new
  iterator starts at the same item as ci.current(), but moves
  independently from there on.
*/

/*!
  \fn QIntCacheIterator::~QIntCacheIterator()

  Destroys the iterator.  Does not affect the cache itself.
*/

/*!
  \fn QIntCacheIterator<type>& QIntCacheIterator::operator=( const QIntCacheIterator<type> &ci )

  Makes this an iterator for the same cache as \a ci.  The new
  iterator starts at the same item as ci.current(), but moves
  independently thereafter.
*/

/*!
  \fn uint QIntCacheIterator::count() const

  Returns the number of items in the cache on which this iterator operates.

  \sa isEmpty()
*/

/*!
  \fn bool QIntCacheIterator::isEmpty() const

  Returns TRUE if the cache is empty, i.e. count() == 0, otherwise
  FALSE.  

  \sa count()
*/

/*!
  \fn bool QIntCacheIterator::atFirst() const

  Returns TRUE if the iterator points to the first item in the
  cache. Note that this refers to the iterator's arbitrary ordering,
  not to the cache's internal LRU list.

  \sa toFirst(), atLast()
*/

/*!
  \fn bool QIntCacheIterator::atLast() const

  Returns TRUE if the iterator points to the last item in the
  cache. Note that this refers to the iterator's arbitrary ordering,
  not to the cache's internal LRU list.

  \sa toLast(), atFirst()
*/

/*!
  \fn type *QIntCacheIterator::toFirst()

  Sets the iterator to point to the first item in the cache and
  returns a pointer to the item.

  Sets the iterator to null and returns null if if the cache is empty.

  \sa toLast() isEmpty()
*/

/*!
  \fn type *QIntCacheIterator::toLast()

  Sets the iterator to point to the last item in the cache and
  returns a pointer to the item.

  Sets the iterator to null and returns null if if the cache is empty.

  \sa toFirst() isEmpty()
*/

/*!
  \fn QIntCacheIterator::operator type *() const

  Cast operator. Returns a pointer to the current iterator item.
  Same as current().

*/

/*!
  \fn type *QIntCacheIterator::current() const

  Returns a pointer to the current iterator item.
*/

/*!
  \fn long QIntCacheIterator::currentKey() const

  Returns the key for the current iterator item.
*/

/*!
  \fn type *QIntCacheIterator::operator()()

  Makes the succeeding item current and returns the original current
  item.

  If the current iterator item was the last item in the cache or if it
  was null, null is returned.
*/

/*!
  \fn type *QIntCacheIterator::operator+=( uint jump )

  Returns the item \e jump positions after the current item, or null if
  it is beyond the last item.  Makes this the current item.
*/

/*!
  \fn type *QIntCacheIterator::operator-=( uint jump )

  Returns the item \e jump positions before the current item, or null if
  it is beyond the first item.  Makes this the current item.
*/

/*!
  \fn type *QIntCacheIterator::operator++()

  Prefix ++ makes the iterator point to the item just after \a
  current(), and makes that the new current item for the iterator.  If
  current() was the last item, operator--() returns 0.
*/

/*!
  \fn type *QIntCacheIterator::operator--()

  Prefix -- makes the iterator point to the item just before \a
  current(), and makes that the new current item for the iterator.  If
  current() was the first item, operator--() returns 0.
*/

