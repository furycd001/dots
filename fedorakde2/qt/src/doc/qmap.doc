/****************************************************************************
** $Id: qt/doc/qmap.doc   2.3.2   edited 2001-01-26 $
**
** QMap and QMapIterator class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/


/*****************************************************************************
  QMap documentation
 *****************************************************************************/

/*!
  \class QMap qmap.h
  \brief The QMap class is a value based template class that provides a dictionary

  \ingroup qtl
  \ingroup tools
  \ingroup shared

  Define a template instance QMap\<Key,Data\> to create a dictionary
  with keys of type Key and values of type Data. QMap does not store
  pointers to the members of the map. Instead, it holds a copy of
  every member. For that reason this kind of classes is called "value
  based" while QList and QDict are "reference based".

  Some classes can not be used within a QMap, for example everything
  derived from QObject and thus all classes that implement widgets.
  Only values can be used in a QMap. To qualify as a value, the class
  must provide
  <ul>
  <li>a copy constructor,
  <li>an assignment operator and
  <li> a default constructor, i.e. a constructor that does not take any arguments.
  </ul>

  Note that C++ defaults to field-by-field assignment operators and
  copy constructors if no explicit version is supplied. In many cases,
  this is sufficient.

  The class used for the key requires that the \c operator< is implemented
  and defines a total order on the keys.

  Example:
  \code
    #include <qmap.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
	Employee(): s(0) {}
	Employee( const QString& name, int salary )
	    : n(name), s(salary)
	{}

	QString     name()   const	 	{ return n; }
	int	    salary() const	 	{ return s; }
	void	    setSalary( int salary )	{ s = salary; }
    private:
	QString     n;
	int         s;
    };


    void main()
    {
	typedef QMap<QString,Employee> EmployeeMap;
	EmployeeMap map;		// map of Employee

	map.insert( "Gates", Employee("Bill", 50000) );
	map.insert( "Ballmer", Employee("Steve",80000) );
	map.insert( "Sommer,", Employee("Ron",  60000) );

	Employee joe( "Joe", 50000 );
	map.insert( "Doe", joe );
	joe.setSalary( 4000 );
	
	EmployeeMap::Iterator it;
	for( it = map.begin(); it != map.end(); ++it )
	    printf( "%s, %s earns %d\n", it.key().latin1(), it.data().name().latin1(), it.data().salary() );
    }
  \endcode

  Program output:
  \code
	Ballmer, Steve earns 80000
	Doe, Joe earns 50000
	Gates, Bill earns 50000
	Sommer, Ron earns 60000
  \endcode

  As you can see, the latest changes to Joe's salary did not affect the value
  in the list because the map created a copy of Joe's entry. In addition you
  should notice that the items are alphabetically sorted when iterating
  over the map.

  There are two ways to find values in the list. The first one is to use
  the find() function. It returns an iterator pointing to the desired
  item or the end() iterator it no such element exists.

  The second approach uses the operator[]. But be warned: If you don't know
  that the element you are searching for is really in the list, then you
  should not use operator[]. The following example illustrates that.

  \code
	QMap<QString,QString> map;
	map.insert( "Weis", "Torben" );
	str << map["Weis"] << map["Ettrich"] << endl;

	const QMap<QString,QString>& map2 = map;
	str << map2["Weis"] << map2["Reggie"] << endl;
	
  \endcode

  The code fragment will print out "Torben", "" and the second part will
  print "Torben", "". In addition the first fragment inserted an empty entry
  with key "Ettrich". The second one did not insert an empty entry with
  key "Reggie" because the const operator[] was used which can not do insertion.
  So if you are not sure whether a certain element is in the map you should
  use find() and iterators.

  If you just want to know whether a certain key is contained in the map,
  the the contains() function is what you are looking for. In addition count()
  tells you how many keys there are currently in the map.

  Another method for traversing a map is to use the functions begin()
  and end().  With a simple for loop as shown in the example you can
  iterate over the complete map.  It is safe to have multiple
  iterators at the same time. If some member of the map is removed
  then only iterators pointing to the removed member become
  invalid. Inserting in the map does not invalidate any iterator.

  Since QMap is value based there is no need to care about deleting
  elements in the list. The list holds its own copies and will free
  them if the corresponding member or the list itself is deleted. You
  can force the list to free all of its item with clear().

  QMap is implicitly shared. This means you can just make copies of
  the map in time O(1). If multiple QMap instances share the same data
  and one is modifying the map's data then this modifying instance
  makes a copy and modifies its private copy - thus it does not affect
  other instances.  From a developer's point of view you can think
  that a QMap and a copy of this map have nothing to do with each
  other.

  There are two ways of inserting new elements in a list. One uses the
  insert() method while the other one uses operator[] like this:

  \code
  	QMap<QString,QString> map;
	map["Weis"] = "Torben";
  \endcode;

  Items can be removed from the map in two ways. The first is to pass
  an iterator to the remove(). The other possibility is to pass a key
  value to remove() which will delete the entry with the requested
  key. In addition you can clear the entire map using the clear()
  method.

  \sa QMapIterator
*/


/*!
  \fn QMap::QMap()
  Constructs an empty map.
*/

/*!
  \fn QMap::QMap( const QMap<Key,T>& m )
  Constructs a copy of \a m.

  This operation costs O(1) time since QMap is implicit shared.  The
  first instance applying modifications to a shared list will create a
  copy which takes in turn O(n) time. However returning a QMap from a
  function is very fast.
*/

/*!
  \fn QMap::~QMap()

  Destroys the map. References to the values in the map and all
  iterators of this map become invalidated. Since QMap is highly tuned
  for performance you won't see warnings if you use invalid iterators,
  because it is impossible for an iterator to check whether it is
  valid or not.
*/

/*!
  \fn QMap<Key, T>& QMap::operator= (const QMap<Key, T>& m)
  Assigns \a m to this map and returns a reference to this map.

  All iterators of the current map become invalidated by this
  operation.  The cost of such an assignment is O(1) since QMap is
  implicitly shared.
*/

/*!
  \fn const T& QMap::operator[] ( const Key& k ) const
  Returns the value associated with the key \a k. If no such
  key is present then a reference to an empty item is returned.
*/

/*!
  \fn T& QMap::operator[] ( const Key& k )
  Returns the value associated with the key \a k. If no such
  key is present then an empty item is inserted with this key
  and a reference to the item is returned.

  You can use this operator in two directions: For reading and for
  writing:

  \code
  	QMap<QString,QString> map;
	map[ "Weis" ] = "Torben";
	stream << map[ "Weis" ];
  \endcode
*/

/*!
  \fn uint QMap::count() const
  Returns the number of items in the ap.

  \sa isEmpty()
*/

/*!
  \fn bool QMap::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0. Returns FALSE
   otherwise.
  \sa count()
*/

/*!
  \fn Iterator QMap::insert( const Key& key, const T& value )
  Inserts the \a value with key \a k.

  Returns an iterator pointing at the inserted value.

  \sa QMapIterator
*/

/*!
  \fn void QMap::remove( Iterator it )
  Removes the item at position \a it in the map.

  \sa clear() QMapIterator
*/

/*!
  \fn void QMap::remove( const Key& k )
  Removes the item with the key \a k.

  \sa clear()
*/

/*!
  \fn Iterator QMap::replace( const Key& k, const T& v )
  Replaces the value with key \a k from the map if possible and
  inserts the new value \a v with key \a k in the map.

  \sa insert() remove() QMapIterator
*/

/*!
  \fn void QMap::clear()
  Removes all items from the map.

  \sa remove()
*/

/*!
  \fn Iterator QMap::find( const Key& k )
  Finds the key \a k in the map.

  Returns end() if no key did match.

  \sa QMapIterator
*/

/*!
  \fn ConstIterator QMap::find( const Key& k ) const
  Finds the key \a k in the map.

  Returns end() if no key did match.

  \sa QMapConstIterator
*/

/*!
  \fn bool QMap::contains( const Key& k ) const
  Returns TRUE if the key \a k is contained in the map.
*/

/*!
  \fn Iterator QMap::begin()
  Returns an iterator pointing to the first element in the map. This
  iterator equals end() if the map is empty;

  \sa end() QMapIterator
*/

/*!
  \fn ConstIterator QMap::begin() const
  Returns an iterator pointing to the first element in the map. This
  iterator equals end() if the map is empty;

  \sa end() QMapConstIterator
*/

/*!
  \fn Iterator QMap::end()
  Returns an iterator pointing behind the last element in the map. This
  iterator equals begin() if the map is empty.

  \sa begin() QMapIterator
*/

/*!
  \fn ConstIterator QMap::end() const
  Returns an iterator pointing behind the last element in the map. This
  iterator equals begin() if the map is empty.

  \sa begin() QMapConstIterator
*/

/*!
  \fn void QMap::detach()
  If the map does not share its data with another QMap instance, then
  nothing happens, otherwise the function creates a new copy of this
  data and detaches from the shared one. This function is called
  whenever the map is modified.  The implicit sharing mechanism is
  implemented this way.
*/

/*!
  \fn QDataStream& operator>>( QDataStream& s, QMap<Key,T>& m )
  \relates QMap
  Reads a map from the stream. The types \a Key and \a T must implement
  the streaming operator, too.
*/

/*!
  \fn QDataStream& operator<<( QDataStream& s, const QMap<Key,T>& m )
  \relates QMap
  Writes a map to the stream. The types \a Key and \a T must implement
  the streaming operator, too.
*/

/*****************************************************************************
  QMapIterator documentation
 *****************************************************************************/

/*!
  \class QMapIterator qmap.h
  \brief The QMapIterator class provides an iterator for QMap.

  \ingroup qtl
  \ingroup tools

  You can not create an iterator by yourself. Instead you have to ask
  a map to give you one. An iterator has only the size of a pointer.
  On 32 bit machines that means 4 bytes otherwise 8 bytes. That makes
  them very fast. In fact they resemble the semantics of pointers as
  good as possible and they are almost as fast as usual pointers.

  Example:
  \code
    #include <qmap.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
	Employee(): s(0) {}
	Employee( const QString& name, int salary )
	    : n(name), s(salary)
	{}

	QString     name()   const	 	{ return n; }
	int	    salary() const	 	{ return s; }
	void	    setSalary( int salary )	{ s = salary; }
    private:
	QString     n;
	int         s;
    };


    void main()
    {
	typedef QMap<QString,Employee> EmployeeMap;
	EmployeeMap map;		// map of Employee

	map.insert( "Gates", Employee("Bill", 50000) );
	map.insert( "Ballmer", Employee("Steve",80000) );
	map.insert( "Sommer,", Employee("Ron",  60000) );

	Employee joe( "Joe", 50000 );
	map.insert( "Doe", joe );
	joe.setSalary( 4000 );
	
	EmployeeMap::Iterator it;
	for( it = map.begin(); it != map.end(); ++it )
	    printf( "%s, %s earns %d\n", it.key().latin1(), it.data().name().latin1(), it.data().salary() );
    }
  \endcode

  Program output:
  \code
	Ballmer, Steve earns 80000
	Doe, Joe earns 50000
	Gates, Bill earns 50000
	Sommer, Ron earns 60000
  \endcode

  The only way to traverse a map is to use iterators.  QMap is highly
  optimized for performance and memory usage.  On the other hand that
  means that you have to be a bit more careful by what you are
  doing. QMap does not know about all its iterators and the iterators
  don't even know to which map they belong. That makes things fast and
  slim but a bit dangerous because it is up to you to make sure that
  iterators you are using are still valid. QDictIterator will be able
  to give warnings while QMapIterator may end up in an undefined
  state.

  For every Iterator there is a ConstIterator. When accessing a QMap
  in a const environment or if the reference or pointer to the map is
  itself const, then you have to use the ConstIterator. Its semantics
  are the same, but it returns only const references to the item it
  points to.

  \sa QMap
*/

/*!
  \fn QMapIterator::QMapIterator()
  Creates an uninitialized iterator.
*/

/*!
  \fn QMapIterator::QMapIterator (QMapNode<K, T> * p) 
  Constructs an iterator starting at node \a p.
*/

/*!
  \fn QMapIterator::QMapIterator( const QMapIterator<K,T>& it )
  Constructs a copy of the iterator.
*/

/*!
  \fn QMapIterator::~QMapIterator()
  Destroys the iterator.
*/

/*!
  \fn QMapIterator<K,T>& QMapIterator::operator++()

  Prefix ++ makes the succeeding item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the end of the map. Incrementing the iterator as
  returned by end() causes undefined results.
*/

/*!
  \fn QMapIterator<K,T> QMapIterator::operator++(int)

  Postfix ++ makes the succeeding item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the end of the map. Incrementing the iterator as
  returned by end() causes undefined results.
*/

/*!
  \fn QMapIterator<K,T>& QMapIterator::operator--()

  Prefix -- makes the previous item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the beginning of the map. Decrementing the
  iterator as returned by begin() causes undefined results.
*/

/*!
  \fn QMapIterator<K,T> QMapIterator::operator--(int)

  Postfix -- makes the previous item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the beginning of the map. Decrementing the
  iterator as returned by begin() causes undefined results.
*/

/*!
  \fn T& QMapIterator::operator*()

  Asterix operator. Returns a reference to the current item. The same
  as data().
*/

/*!
  \fn const T& QMapIterator::operator*() const

  Asterix operator. Returns a const reference to the current item. The
  same as data().
*/

/*!
  \fn bool QMapIterator::operator==( const QMapIterator<K,T>& it ) const

  Compares both iterators and returns TRUE if they point to the same
  item.
*/

/*!
  \fn bool QMapIterator::operator!=( const QMapIterator<K,T>& it ) const

  Compares both iterators and returns TRUE if they point to different
  items.
*/

/*!
  \fn T& QMapIterator::data()

  Returns a reference to the current item.
*/

/*!
  \fn const T& QMapIterator::data() const

  Returns a const reference to the data of the current item.
*/

/*!
  \fn const K& QMapIterator::key() const

  Returns a const reference to the data of the current key.
*/

/*****************************************************************************
  QMapConstIterator documentation
 *****************************************************************************/

/*!
  \class QMapConstIterator qmap.h
  \brief The QMapConstIterator class provides an iterator for QMap.

  \ingroup qtl
  \ingroup tools

  In contrast to QMapIterator this class is used to iterate over a
  const map. It does not allow to modify the values of the map since
  this would break the const semantics.

  For more informations on QMap iterators see QMapIterator.

  \sa QMap QMapIterator
*/

/*!
  \fn QMapConstIterator::QMapConstIterator()
  Constructs an uninitialized iterator.
*/

/*!
  \fn QMapConstIterator::QMapConstIterator (QMapNode<K, T> * p) 
  Constructs an iterator starting at node \a p.
*/

/*!
  \fn QMapConstIterator::QMapConstIterator( const QMapConstIterator<K,T>& it )
  Constructs a copy of the iterator.
*/

/*!
  \fn QMapConstIterator::QMapConstIterator( const QMapIterator<K,T>& it )
  Constructs a copy of the iterator.
*/

/*!
  \fn QMapConstIterator::~QMapConstIterator()
  Destroys the iterator.
*/

/*!
  \fn QMapConstIterator<K,T>& QMapConstIterator::operator++()

  Prefix ++ makes the succeeding item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the end of the map. Incrementing the iterator as
  returned by end() causes undefined results.
*/

/*!
  \fn QMapConstIterator<K,T> QMapConstIterator::operator++(int)

  Postfix ++ makes the succeeding item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the end of the map. Incrementing the iterator as
  returned by end() causes undefined results.
*/

/*!
  \fn QMapConstIterator<K,T>& QMapConstIterator::operator--()

  Prefix -- makes the previous item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the beginning of the map. Decrementing the
  iterator as returned by begin() causes undefined results.
*/

/*!
  \fn QMapConstIterator<K,T> QMapConstIterator::operator--(int)

  Postfix -- makes the previous item current and returns an iterator
  pointing to the new current item.  The iterator can not check
  whether it reached the beginning of the map. Decrementing the
  iterator as returned by begin() causes undefined results.
*/

/*!
  \fn const T& QMapConstIterator::operator*() const

  Asterix operator. Returns a const reference to the current item. The
  same as data().
*/

/*!
  \fn bool QMapConstIterator::operator==( const QMapConstIterator<K,T>& it ) const

  Compares both iterators and returns TRUE if they point to the same
  item.
*/

/*!
  \fn bool QMapConstIterator::operator!=( const QMapConstIterator<K,T>& it ) const

  Compares both iterators and returns TRUE if they point to different
  items.
*/

/*!
  \fn const T& QMapConstIterator::data() const
  Returns a const reference to the data of the current item.
*/

/*!
  \fn const K& QMapConstIterator::key() const
  Returns a const reference to the current key.
*/
