/****************************************************************************
** $Id: qt/doc/qvaluestack.doc   2.3.2   edited 2001-01-26 $
**
** QValueStack class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/


/*****************************************************************************
  QValueStack documentation
 *****************************************************************************/

/*!
  \class QValueStack qvaluestack.h
  \brief The QValueStack class is a value based template class that provides a stack.

  \ingroup qtl
  \ingroup tools
  \ingroup shared

  Define a template instance QValueStack\<X\> to create a stack of values which all
  have the class X. Please notice that QValueStack does not store pointers to the
  members of the stack. It holds a copy of every member. That is the reason why this
  kind of classes are called "value based" while QStack, QList and QDict are "reference based".

  A stack is a Last In, First Out (LIFO) structure. Items are added to
  the top of the stack with push() and retrieved from the top with
  pop(). Furthermore, top() provides access to the topmost item
  without removing it.

  Example:
  \code
    #include <qvaluestack.h>
    #include <stdio.h>
	
    void main()
    {
	QValueStack<int> stack;
	stack.push( 1 );
	stack.push( 2 );
	stack.push( 3 );
	while ( !stack.isEmpty() )
		printf("pop item %d\n", stack.pop() );
  }
  \endcode

  Program output:
  \code
	pop item 3;
	pop item 2;
	pop item 1;
  \endcode

  Technically, QValueStack is a specialized QValueList provided for
  convenience. All of QValueList's functionality applies also to
  QStack, for example the facility to iterate over all elements using
  QValueStack<T>::Iterator. See QValueListIterator for further details.

  Some classes can not be used within a QValueStack, for example everything
  derived from QObject and thus all classes that implement widgets.
  Only values can be used in a QValueStack. To qualify as a value, the class
  must provide
  <ul>
  <li>a copy constructor,
  <li>an assignment operator and
  <li> a default constructor, i.e. a constructor that does not take any arguments.
  </ul>

  Note that C++ defaults to field-by-field assignment operators and
  copy constructors if no explicit version is supplied. In many cases,
  this is sufficient.



*/


/*!
  \fn QValueStack::QValueStack()
  Constructs an empty stack.
*/

/*!
  \fn QValueStack::~QValueStack()
  Destroys the stack. References to the values in the stack and all iterators
  of this stack become invalidated. Since QValueStack is highly tuned for performance
  you wont see warnings if you use invalid iterators,
  because it is impossible for an iterator to check wether it is valid or not.
*/


/*!
  \fn void  QValueStack::push( const T& d )

  Adds an element to the top of the stack.  Last in, first out.

  This function is equivalent to append()

  \sa pop(), top()
*/

/*!
  \fn T& QValueStack::top()
  Returns a reference to the top item of the stack or the item
  referenced by end() if no
  such item exists. Please note that you may not change
  the value the end() Iterator is pointing to.

  This function is equivalent to last().

  \sa pop(), push(), QValueList::fromLast()
*/


/*!
  \fn const T& QValueStack::top() const
  Returns a reference to the top item of the stack or the item
  referenced by end() if no such item exists.

  This function is equivalent to last().

  \sa pop(), push(), QValueList::fromLast()
*/

/*!
  \fn T QValueStack::pop()

  Removes the top item from the stack and returns it.

  \sa top() and push()
*/





