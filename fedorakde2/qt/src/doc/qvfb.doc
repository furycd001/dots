/****************************************************************************
** $Id: qt/doc/qvfb.doc   2.3.2   edited 2001-08-09 $
**
** Qt/Embedded Virtual Framebuffer
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/
 
/*! \page qvfb-qws.html

\title Qt/Embedded Virtual Framebuffer

The virtual framebuffer allows Qt/Embedded programs to be developed on your
desktop machine, without switching between consoles and X11.
<p>
The virtual framebuffer is located in $QTDIR/tools/qvfb

<h3>Using the virtual framebuffer</h3>
<ol> 
<li>Make sure QT_NO_QWS_VFB in $QTDIR/src/tools/qconfig.h is not defined
    and compile the Qt/Embedded library.
<li>Compile qvfb as a <i>normal Qt/X11 application</i> and run it - do not
    compile it as a Qt/Embedded application.
<li>Start a Qt/Embedded master application (i.e. construct QApplication with
    QApplication::GuiServer flag or use the -qws command line parameter).
    You will need to specify to the server that you wish to use the virtual
    framebuffer driver, e.g.:<p>
    <tt>widgets -qws -display QVFb:0</tt>
<li>You may prefer to set the QWS_DISPLAY environment variable to
    be <tt>QVFb:0</tt>.
</ol>

qvfb supports the following command line options:
 
<table>
<tr><td><tt>-width width</tt></td>
    <td>the width of the virtual framebuffer (default: 240).</td></tr>
<tr><td><tt>-height height</tt></td>
    <td>the height of the virtual framebuffer (default: 320).</td></tr>
<tr><td><tt>-depth depth</tt></td>
    <td>the depth of the virtual framebuffer (1, 4, 8 or 32, default: 8).</td></tr>
<tr><td><tt>-nocursor</tt></td>
    <td>do not display the X11 cursor in the framebuffer window.</td></tr>
<tr><td><tt>-qwsdisplay :id</tt></td>
    <td>the Qt/Embedded display id to provide (default :0).</td></tr>
</table>

<h3>Virtual Framebuffer Design</h3>

The virtual framebuffer emulates a framebuffer using a shared memory region
(the virtual frame buffer) and a utility to display the framebuffer in a
window (qvfb).  The regions of the display that have changed are updated
periodically, so you will see discrete snapshots of the framebuffer rather
than each individual drawing operation.  For this reason drawing problems
such as flickering may not be apparent until the program is run using a real
framebuffer.
<p>
The target refresh rate can be set via the View->Refresh Rate menu item.
This will cause qvfb to check for updated regions more quickly.  The rate
is a target only.  If little drawing is being done, the framebuffer will
not show any updates between drawing events.  If an application is displaying
an animation the updates will be frequent, and the application and
qvfb will compete for processor time.
<p>
Mouse and keyboard events are passed to the Qt/Embedded master process via
named pipes.
<p>
The virtual framebuffer is a development tool only.  No security issues have
been considered in the virtual framebuffer design.  It should not be used
in a production environment and QT_NO_QWS_VFB should always be defined
in production libraries.

*/
