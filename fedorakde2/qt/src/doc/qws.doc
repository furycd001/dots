/****************************************************************************
** $Id: qt/doc/qws.doc   2.3.2   edited 2001-10-24 $
**
** Qt/Embedded (Qt on QWS) documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/
/*! \page install-qws.html

\title Installing Qt/Embedded

<p>
This installation procedure is written for Linux. It may need
to be modified for other platforms.

<a href=qnx-framebuffer.html>QtE/Qnx6 installation instructions</a><br>

<h3>  Unpack the archive if you have not done so already:</h3>
<pre>
	cd &lt;anywhere&gt;
	gunzip qt-embedded-<i>version</i>-commercial.tar.gz    # uncompress the archive
	tar xf qt-embedded-<i>version</i>-commercial.tar       # unpack it
</pre>

  This document assumes that the archive is installed as <tt>~/qt-<i>version</i></tt>.
</p>


<h3> Compile the Qt/Embedded library and examples</h3>

<pre>
	cd ~/qt-<i>version</i>
	export QTDIR=~/qt-<i>version</i>
	./configure
	make
</pre>

<p>
The configuration system is designed to allow platform-specific options
to be added, but in general all Linux system which have framebuffer
support can use the "linux-generic-g++" platform.
The configuration system also supports cross-compilers:
to build <i>on</i> Linux/x86 <i>for</i> the Linux/MIPSEL target, you would use:
<pre>
	./configure -platform linux-x86-g++ -xplatform linux-mips-g++
</pre>
<p>
Only a small number of configurations are predefined, all much the same.
Configuration files are found in <tt>configs/</tt>.

<h3> Enable Linux framebuffer support</h3>

<p>
   For application development, we recommend that you use
   the
<a href="qvfb-qws.html">Qt/Embedded virtual framebuffer</a>.
   But to actually put Qt/Embedded
   on a device running Linux, you need to ensure that the Linux
   kernel has framebuffer support.

<p>
   You may need to recompile your kernel to enable the framebuffer.

<p>
   Handheld devices running Linux, such as the SL-5000D and the iPAQ,
   and most other embedded Linux systems that have a graphical display
   will already have a framebuffer.

<p>
   This document does not describe how to do this; the
   <a href=HOWTO-framebuffer.html>HOWTO-Framebuffer page</a>
   contains a short description. (You should see
   a penguin logo at boot time when the frame buffer is enabled.)

<p>
   For Matrox G100/G200/G400 use the matrox frame buffer driver.

<p>
   For NVidia TNT cards use the nvidia frame buffer driver.

<p>
   For Mach64 and most other cards, use the vesafb driver.

<p>
   For VGA-compatible cards that are not VESA 2.0 compliant,
    use the VGA16 driver.

<p>
   The frame buffer may also need a boot parameter to be enabled. See
   <tt>/usr/src/linux/Documentation/fb</tt> for details.

<p>
   The <tt>fbset</tt> program, which is included in most Linux/x86
   distributions,
   may be used to switch video modes without rebooting the system. The
   video mode active when the server is started will be used.
   Note: <tt>fbset</tt> does not work with the vesafb driver.
</p>


<h3> Change permissions</h3>

<p>
   To run Qt/Embedded, you need write access to the framebuffer device
   <tt>/dev/fb0</tt>. 

<p>
   You also need read access to the mouse device. (Note that
   <tt>/dev/mouse</tt> is normally a symbolic link; the actual mouse device
   must be readable.)
</p>



<h3> How to run the demonstration program</h3>

<p>
   Log into a virtual console, or run
<a href="qvfb-qws.html">Qt/Embedded virtual framebuffer</a>.
    and then run the commands:

<pre>
	cd ~/qt-<i>version</i>/examples/launcher
   	./start-demo
</pre>
  

<h3> Miscellaneous troubleshooting and known bugs</h3>

<p>
  To kill gpm, run the following command as root:
  
<pre>
	gpm -k
</pre>

<p>
  In some cases, if the server does not work, it will work when run as root.
  If this happens, there are permissions problems with your filesystem
  (eg. /dev/fb0 is not writeable by you).

<p>
  Show processes using the framebuffer:

<pre>
    fuser -v /dev/fb0
</pre>

<p>
  Kill such processes:
<pre>
    fuser -vk /dev/fb0
</pre>
  or harsher:
<pre>
    fuser -k -KILL /dev/fb0
</pre>


<p>
  Show existing semaphores:

<pre>
    ipcs            
</pre>
 
<p>
  Remove semaphores:

<pre>
    ipcrm
</pre>

<p>
  The communication between client and server is done through the
  named pipe <tt>/tmp/.QtEmbedded</tt>; sometimes it may need to be deleted
  (eg. if you run Qt/Embedded as root then later as an unprivileged user).
</p>


<h3> Customization  </h3>

<p>
   The Qt/Embedded library can be reduced in size by
    <a href=features.html>removing unneeded features</a>.

*/

/*! \page fonts-qws.html

\title Fonts in Qt/Embedded

<h2>Supported formats</h2>

<p>
Qt/Embedded supports four font formats:

<ul>
 <li><b>TrueType (TTF)</b> - the scalable font technology now standard
	    on MS-Windows and Apple Macintosh, and becoming popular on X11.
 <li><b>Postscript Type1 (PFA/PFB)</b> - scalable fonts often used by printers,
	    also popular on X11. These are similar in functionality to TTF
	    fonts and are not discussed further in this document.
 <li><b>Bitmap Distribution Format fonts (BDF)</b> - a standard format
	    for non-scalable fonts. A large number of BDF fonts are
	    supplied as part of standard X11 distributions - most of
	    these can be used with Qt/Embedded.
 <li><b>Qt Prerendered Font (QPF)</b> - a light-weight non-scalable font
	    format specific to Qt/Embedded.
</ul>

<p>
Support for each of these font formats,
except QPF which is always enabled,
can be enabled or disabled independently by using the
<a href=features.html>Qt/Embedded Features Definition</a>
There is support in
Qt/Embedded for writing a QPF font file from any font, thus you can
initially enable TTF and BDF formats, save QPF files for the fonts and
sizes you need, then remove TTF and BDF support.

<h2>Memory requirements</h2>

<p>
With TTF fonts, each character in the font at a given point size is
only rendered when first used in a drawing or metrics operation. With
BDF fonts all characters are rendered when the font is used.
With QPF fonts, the characters are stored in the same format as Qt uses
when drawing.

<p>
As an example, a 10-point Times font containing the ASCII characters uses
around 1300 bytes when stored in QPF format.

<p>
Taking advantage of the way the QPF format is structured, Qt/Embedded
memory-maps the data rather than reading and parsing it.
This reduces the RAM consumption even further.

<p>
The scalable fonts use a larger amount of memory per font, but
these fonts can give a memory saving if many different sizes of each
font are needed.

<h2>Smooth fonts</h2>

<p>
TTF, PFA, and QPF fonts can be rendered as <i>smooth</i> anti-aliased
fonts to give superior readability, especially on low-resolution devices.
The difference between smooth and non-smooth fonts is illustrated below
(you may need to change your display to low resolution to see the difference).

<center>
<table>
<tr align=center>
<td><img src=smooth.png>
<td width=10%>
<td><img src=unsmooth.png>
</table>
</center>

<p>
In Qt/Embedded 2.2.1, smooth fonts use 8 times as much memory as non-smooth
fonts. This multiplier will be reduced to a configurable
2 or 4 (ie. 4-level and 16-level shading rather than the current excessive
256-level shading).

<h2>Unicode</h2>

All fonts used by Qt/Embedded use the Unicode character encoding. Most fonts
available today do not actually contain all the Unicode characters, but they
do use the Unicode characters ordering. A single <i>complete</i> 16-point
Unicode font uses over 1Mb of memory.

<h2>The font definition file</h2>

When Qt/Embedded applications run, they look for a file called
<tt>$QTDIR/etc/fonts/fontdir</tt> or
<tt>/usr/local/qt-embedded/etc/fonts/fontdir</tt>. This file defines the
fonts available to the application. It has the following format:

<p>
<blockquote>
   <i>name</i> <i>file</i> <i>renderer</i> <i>italic</i> <i>weight</i> <i>size</i> <i>flags</i>
</blockquote>

<p>
where:

<blockquote>
<p>
<table>
<tr><td valign=top>      <i>name</i> <td> <b>Helvetica</b>, <b>Times</b>, etc.
<tr><td valign=top>      <i>file</i> <td> <b>helvR0810.bdf</b>, <b>verdana.ttf</b>, etc.
<tr><td valign=top>  <i>renderer</i> <td> <b>BDF</b> or <b>TTF</b>
<tr><td valign=top>    <i>italic</i> <td> <b>y</b> or <b>n</b>
<tr><td valign=top>    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
<tr><td valign=top>      <i>size</i> <td> <b>0</b> for scalable or 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign=top>     <i>flags</i> <td> Flag characters:<br>
			<b>s</b> = smooth (anti-aliased)<br>
			<b>u</b> = unicode range when saving (default is Latin 1)<br>
			<b>a</b> = ascii range when saving (default is Latin 1)<br>
</table>
</blockquote>

<p>
The font definition file does not specify QPF fonts - these are loaded 
directly from the directory containing the <tt>fontdir</tt> file, and must
be named <i>name</i>_<i>size</i>_<i>weight</i><i>italicflag</i>.qpf, where:

<blockquote>
<p>
<table>
<tr><td valign=top>      <i>name</i> <td> <b>helvetica</b>, <b>times</b>, etc. (lowercase)
<tr><td valign=top>      <i>size</i> <td> 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign=top>    <i>italicflag</i> <td> <b>i</b> for italic or nothing.
<tr><td valign=top>    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
</table>
</blockquote>

<p>
If an application is run with the <tt>-savefonts</tt> command-line option,
then whenever a font other than a QPF font is used, a corresponding QPF file
is saved. This allows you to easily find the font usage of your applications
and to generate QPF files so that you can eventually reduce the memory
usage of your applications by disabling TTF and BDF support from Qt/Embedded.
option, or by modifying the initialization of <tt>qws_savefonts</tt> in
<tt>kernel/qapplication_qws.cpp</tt> of the Qt/Embedded library source code.
In extreme cases of memory-saving, it is possible to save partially-rendered
fonts (eg. only the characters in "Product Name<sup>TM</sup>") if you are
certain that these are the only characters you will need from the font.
See QMemoryManager::savePrerenderedFont() for this functionality.

<h2>Notes</h2>

<p>
The font definition file, naming conventions for font files, and the format
of QPF files may change in versions of Qt/Embedded.

<p>
When enabled, Qt/Embedded uses the powerful FreeType2 library to implement
TrueType and Type1 support.

*/

/*! \page running-qws.html

\title Running Qt/Embedded applications

A Qt/Embedded application requires a master application to be running
or to be a master application itself.  The
master application is primarily responsible for managing top-level window
regions, pointer and keyboard input.
<p>
Any Qt/Embedded application can be a
master application by constructing the QApplication object with the
<i>QApplication::GuiServer</i> type, or running the application with the
<i>-qws</i> command line option.
<p>
This document assumes you have the Linux framebuffer configured correctly
and no master process is running.  If you do not have a working Linux
framebuffer you can use the
<a href="qvfb-qws.html">Qt/Embedded virtual framebuffer</a>.
<p>
Change to a Linux console and select an example to run, e.g. examples/widgets.
Make sure $QTDIR is set to the directory where you installed Qt/Embedded
and add the $QTDIR/lib directory to $LD_LIBRARY_PATH, e.g.:
<pre>
export QTDIR=$HOME/qt-<i>version</i>
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
</pre>
<p>
Run the application with the <i>-qws</i> option:
<p>
<pre>
cd $QTDIR/examples/widgets
./widgets -qws
</pre>
<p>
You should see the widgets example appear.  If your mouse doesn't work
correctly you need to specify the type of mouse to use.
You can exit the master application at any time using ctrl+alt+backspace.
<p>
If you wish to run additional applications you should run them as clients
i.e. without the <i>-qws</i> option.

<h2>Displays</h2>
Qt/Embedded allows multiple displays to be used simultaneously by running
multiple Qt/Embedded master processes.  This is achieved using the -display
command line parameter or the $QWS_DISPLAY environment variable.
<p>
The -display parameter's syntax is:
<p>
<tt>[gfx driver][:driver specific options][:display number]</tt>
<p>
for example if you want to use the mach64 driver on fb1 as display 2:
<p>
<tt>$ ./launcher -display Mach64:/dev/fb1:2</tt>
<p>
To try this functionality you can do the following:
<ol>
<li>Change to VC 1 and run the launcher:<br>
<tt>$ cd examples/launcher</tt><br>
<tt>$ ./launcher</tt>

<li>Switch to VC 2 and run another one:<br>
<tt>$ cd examples/launcher</tt><br>
<tt>$ ./launcher -display :1</tt><p>
Another launcher will be started.  Start an application in this launcher.

<li>Press ctrl+alt+F1 - back to display 0.  You can also start additional
applications on a particular display by specifying the display id. Change
to VC 3:<br>
<tt>$ cd examples/widgets</tt><br>
<tt>$ ./widgets -display :1</tt><br>
will display the widgets example on dislpay :1 (VC 2).
</ol>
<p>
Only the master process needs to specify the driver/device part explicitly.
The clients get the information they need from the master when they connect.
So once you have a master server running using a particular driver, you can
just use "client -display :n" to use display n.

<h2>Mouse Input</h2>
At the time of writing Qt/Embedded supports MouseMan (default), Microsoft,
IntelliMouse and some other devices specific to certain hardware (e.g. Vr
touch panel).  To specify the mouse to use set the $QWS_MOUSE_PROTO environment
variable, e.g.:<p>
<pre>
export QWS_MOUSE_PROTO=IntelliMouse
</pre>
<p>
See <a href="pointer-qws.html">Qt/Embedded Pointer Handling</a> for more
information.

*/

/*! \page porting-qws.html

\title Porting your applications to Qt/Embedded

Existing Qt applications should require no porting provided there is no
platform dependent code.  Platform dependent code includes system calls,
calls to the underlying window system (Windows or X11), and Qt platform
specific methods such as QApplication::x11EventFilter().
<p>
For cases where it is necessary to use platform dependent code there are
macros defined that can be used to enable/disable code for each platform
using #ifdef directives:

<table>
<tr><th>Platform</th><th>Macro</th></tr>
<tr><td>Qt/X11</td><td>Q_WS_X11</td></tr>
<tr><td>Qt/Windows</td><td>Q_WS_WIN</td></tr>
<tr><td>Qt/Embedded</td><td>Q_WS_QWS</td></tr>
</table>

*/


/*! \page pointer-qws.html
\title Qt/Embedded Pointer Handling

<p>
Pointer handling in Qt/Embedded works for any mouse-like device such as
a touchpanel, a trackball, or real mouse.

<p>
In a real device, only a small number of pointer devices (usually one)
would be supported, but for demonstration purposes, Qt/Embedded includes
a large number of supported devices.

<h2>Mouse Protocols</h2>

<p>
Qt/Embedded normally auto-detects the mouse type and device if it is one of
the supported types on <tt>/dev/psaux</tt> or one of the <tt>/dev/ttyS?</tt>
serial lines. If multiple mice are detected, all may be used simultaneously.

<p>
Alternatively, you may set the environment variable QWS_MOUSE_PROTO to
determine which mouse to use. This environment variable may be set to:
<blockquote>
    <i>&lt;protocol&gt;</i><tt>:</tt><i>&lt;device&gt;</i>
</blockquote>
where <i>&lt;protocol&gt;</i> is one of:
<ul>
 <li>MouseMan
 <li>IntelliMouse
 <li>Microsoft
</ul>
and <i>&lt;device&gt;</i> is the mouse device, often <tt>/dev/mouse</tt>.
If no such variable is specified, the built-in default
is <tt>Auto</tt> which enables auto-detection of the mouse protocol
and device.

<p>
To add another protocol, new subclasses of QAutoMouseSubHandler or
QMouseHandler can be written in <tt>kernel/qwsmouse_qws.cpp</tt>.

<h2>Touch Panels</h2>

Qt/Embedded ships with support for the NEC Vr41XX touchpanel
and the iPAQ touchpanel.
These are subclasses of QCalibratedMouseHandler which is in turn
a subclass of QMouseHandler in <tt>kernel/qwsmouse_qws.cpp</tt>.

Writing a custom touch panel handler for Qt/Embedded is not as
hard as the QVrTPanelHandlerPrivate class makes it look.
The Vr41XX touch panel handler is complex; it handles filtering of
noisy input data, and it generates mouse release events by using a
timer. 

Many touch panel devices have a much simpler interface, so a
port to  Qt/Embedded can be written in a few minutes, without expert
knowledge of Qt/Embedded.

The Qt/Embedded release contains an example touch panel handler in the
class QCustomTPanelHandlerPrivate, located in the file
<tt>$QTDIR/src/kernel/qwsmouse_qws.cpp</tt>. It is protected by<tt>#ifdef
QWS_CUSTOMTOUCHPANEL</tt>.

The example reads data from /dev/ts with the following format:
Each packet consists of 5 bytes. 
<ul>
<li>Byte 0 gives status information, in particular, bit 6 (0x40)
is 1 when the stylus is down, 0 if it is released.
<li> Bytes 1 and 2 give the x position;
<li> Bytes 3 and 4 give the y position;
</ul>

To enable this driver, uncomment the line <tt>#define QWS_CUSTOMTOUCHPANEL</tt>
in the file qwsmouse_qws.cpp.

Chances are, your touch panel device will not match exactly the
example device.  As an example, take a hypothetical device located at
/dev/touchpanel. This device uses 6-byte packets. Byte 0 and 1 give
status and pressure information. In particular, bit 5 (0x20) of byte 1
tells whether the stylus is down or up. Bytes 2 and 3 give x position and
bytes 4 and 5 give y position.

Pressure information is not necessary for basic Qt/Embedded operation,
so we will ignore that for now. The following shows the modified touch
panel handler for the hypothetical device, with  comments marked with
<tt>//***<tt> indicating the changes made. You can also see some printf
calls left over from the (hypothetical) debugging.

\code
//*** Modified Trolltech's example handler to handle the
//*** hypothetical touch panel.
QCustomTPanelHandlerPrivate::QCustomTPanelHandlerPrivate( MouseProtocol, QString )
{
    //*** changed device name to /dev/touchpanel

    if ((mouseFD = open( "/dev/touchpanel", O_RDONLY)) < 0) {
        qWarning( "Cannot open /dev/touchpanel (%s)", strerror(errno));
	return;
    } 
    //*** removed the delay since our device does not need it.
    //else {
    //    sleep(1);
    //}

    QSocketNotifier *mouseNotifier;
    mouseNotifier = new QSocketNotifier( mouseFD, QSocketNotifier::Read,
					 this );
    connect(mouseNotifier, SIGNAL(activated(int)),this, SLOT(readMouseData()));
}

QCustomTPanelHandlerPrivate::~QCustomTPanelHandlerPrivate()
{
    if (mouseFD >= 0)
	close(mouseFD);
}

struct CustomTPdata {

  unsigned char status;
  unsigned short xpos;
  unsigned short ypos;

};

void QCustomTPanelHandlerPrivate::readMouseData()
{
    if(!qt_screen)
	return;
    CustomTPdata data;

    //*** changed size to 6 bytes
    unsigned char data2[6];

    int ret;

    //*** read 6 bytes
    ret=read(mouseFD,data2,6);

    if(ret==6) { //*** change to 6
        //*** all the indexes changed:
	data.status=data2[1]; 
	data.xpos=(data2[2] << 8) | data2[3];
	data.ypos=(data2[4] << 8) | data2[5];
	QPoint q;
	q.setX(data.xpos);
	q.setY(data.ypos);
	mousePos=q;
	if(data.status & 0x20) { //*** Changed to 0x20 (bit 5)
          emit mouseChanged(mousePos,Qt::LeftButton);
          //printf( "Stylus press/move %d,%d\n", data.xpos, data.ypos );
	} else {
	  emit mouseChanged(mousePos,0);
          //printf( "Stylus release %d,%d\n", data.xpos, data.ypos );
	}
    }
    if(ret<0) { 
	qDebug("Error %s",strerror(errno));
    }
}
\endcode

Once you have your touch panel handler working, you may choose to keep
it like it is. However, if you want to switch between different
mouse/touch panel devices at run time, you will have to modify
QWSServer::newMouseHandler() (also in qwsmouse_qws.cpp) to instantiate
your new handler(s). You will also need to add to the enum
<tt>MouseProtocol</tt> and the table <tt>mouseConfig[]</tt>. Note that
the precise details on how mouse and touch panel drivers are instantiated
may have to be changed in future versions of Qt/Embedded.

*/


/*! \page performance-qws.html
\title Qt/Embedded Performance Tuning

When building embedded applications on low-powered devices, a number
of options are available that would not be considered in a desktop
application environment. These options reduce the memory and/or CPU
requirements at the cost of other factors.

<ul>
 <li><a href=features.html><b>Tuning the functionality of Qt</b></a>
 <li><a href=#general>General programming style</a>
 <li><a href=#static>Static vs. Dynamic linking</a>
 <li><a href=#alloc>Alternative memory allocation</a>
</ul>

<a name=general>
<h3>General programming style</h3>
</a>
<p>
The following guidelines will improve CPU performance:
<ul>
 <li>Create dialogs and widgets once, then QWidget::hide() and
	QWidget::show() them, rather than creating them and deleting
	them every time they are needed.
	This will use a little more memory, but will be much faster.
	Try to create them the first time "lazily" to avoid slow startup
	(only create the Find dialog the first time the user invokes it).
</ul>

<a name=static>
<h3>Static vs. Dynamic linking</h3>
</a>
<p>Much CPU and memory is used by the ELF linking process. You can make
significant savings by using a static build of your application suite.
This means that rather than having a dynamic library (<tt>libqte.so</tt>)
and a collection of executables which link dynamically to that library,
you build all the applications into a single executable and statically
link that with a static library (<tt>libqt.a</tt>). This improves start-up
time, and reduces memory usage, at the expense of flexibility (to add a new
application, you must recompile the single executable) and robustness (if
one application has a bug, it might harm other applications). If you need
to install end-user applications, this may not be an option, but if you are
building a single application suite for a device with limited CPU power
and memory, this option could be very beneficial.

To compile Qt as a static library, add the <tt>-static</tt> options when
you run configure.

To build your application suite as an all-in-one application, design each
application as a stand-alone widget or set of widgets, with only minimal
code in the <tt>main()</tt> function. Then, write an application that gives
some way to choose among the applications (eg. a QIconView). The
<a href=http://www.trolltech.com/products/qt/embedded/qpe.html>QPE</a>
is an example of this - it can be built either as a set of dynamically-linked
executables, or as a single static application.

Note that you should generally still link dynamically against the standard
C library and any other libraries which might be used by other applications
on your device.

<a name=alloc>
<h3>Alternative memory allocation</h3>
</a>
<p>We have found that the libraries shipped with some C++ compilers on
some platforms have poor performance in the built-in "new" and "delete"
operators. You might gain performance by re-implementing these
functions. For example, you can switch to the plain C allocators
by adding the following to your code:

\code
void* operator new[](size_t size)
{
    return malloc(size);
}

void* operator new(size_t size)
{
    return malloc(size);
}

void operator delete[](void* p)
{
    free(p);
}

void operator delete[](void* p, size_t size)
{
    free(p);
}

void operator delete(void* p)
{
    free(p);
}

void operator delete(void* p, size_t size)
{
    free(p);
}
\endcode
*/
