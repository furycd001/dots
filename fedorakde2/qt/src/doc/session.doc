/****************************************************************************
** $Id: qt/doc/session.doc   2.3.2   edited 2001-01-26 $
**
** Qt session management overview documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*!
\page session.html

\title Session Management

<h2> Definitions </h2>

A \e session is a group of applications running, each of which has a
particular state. The session is controlled by a service called the \e
session \e manager. The applications participating in the session are
called \e session \e clients.

The session manager issues commands to its clients on behalf of the
user. These commands may cause clients to commit unsaved changes (for
example by saving open files), to preserve their state for future
sessions or to terminate gracefully. The set of these operations is
called \e session \e management.

In the common case, a session consists of all applications that a
user runs on his desktop at a time. Under Unix/X11, however, a
session may as well run on different computers, span multiple displays
or just consists of a few applications.

<h2> Shutting a session down </h2>

A session is shut down by the session manager, usually on behalf of
the user when she wants to log out. A system might, however, also
perform an automatic shutdown in an emergency case, when for example
the power is about to be lost. Clearly there is one big difference
between both shutdowns. During the first, the user may want to
interact with the application, telling exactly which files should be
saved and which should be discarded. In the latter case, there's no
time for interaction. There may not even be a user sitting in front of
the machine!


<h2> Protocols and support on different platforms</h2>

On MS-Windows, there is nothing like complete session management for
applications yet, i.e. no restoring of previous sessions.  Windows does,
however, support graceful logouts where applications have the chance
to cancel the process after getting confirmation from the user. This
is the functionality that corresponds to the
\l QApplication::commitData() method.

X11 on the other hand supports complete session management since
X11R6. Within the life-time of Qt-2.0, virtually all popular Unix/X11
desktops will very likely support the XConsortium standard.

<h2> Getting session management to work with Qt </h2>

In any case you should reimplement \l QApplication::commitData() to
enable your application to take part in the graceful logout process. If
you target the MS-Windows platform only, this is all you can and have
to provide. Ideally, your application should provide a shutdown dialog
similar to the following one:

<center><img src="session.png" alt="A typical dialog on
shutdown"></center>

Example code to this dialog can be found in the documentation of \l
QSessionManager::allowsInteraction().

For complete session management yet only supported on X11R6, you also
have to take care of saving the state of the application and
potentially restore the state in the next life cycle of the session.
This saving is done by reimplementing \l
QApplication::saveState(). All state data you are saving in this
function, shall be marked with the session identifier \l
QApplication::sessionId(). This application specific identifier is
globally unique, so no clashes will happen.

Restauration is usually done in the application's main()
function. Check if \l QApplication::isSessionRestored() is \c TRUE. If
that's the case, use the session identifier \l
QApplication::sessionId() again to access your state date and restore
the state of the application.

<strong>Important:</strong> In order to allow the window manager to
restore window attributes such as stacking order or geometry
information, you have to identify your toplevel widgets with an
application-wide unique object name (see \l QObject::setName() ). When
restoring the application, you'll have to ensure that all restored
toplevel widgets end up with their prior object name again.

<h2> Testing and debugging session management </h2>

As mentioned earlier, session management support on Windows is fairly
limited due to the lack of this functionality in the Windows operating
system itself. Simply shut the session down and verify that your
application behaves as wanted. It may be a good idea to launch another
application, usually the integrated development environment, before
starting your application. This other application will get the
shutdown message afterwards, thus permitting you to cancel the
shutdown. Otherwise you would have to log in again after each test
run, which is not a problem per se but time consuming.

On Unix you can either use a desktop environment that supports
standard X11R6 session management or, the recommended method, use the
session manager reference implementation provided by the X Consortium.
This sample manager is dubbed \c xsm and is part of a standard X11R6
installation. As always with X11, a useful and informative manual page
is provided. Using \c xsm is straightforward (apart from the clumsy
Athena-based user interface). Here's a simple approach:

<ul>
<li> Run X11R6.
<li> Create a dot file \c .xsmstartup in your home directory which
contains the single line

\code
xterm
\endcode

This tells \c xsm that the default/failsafe session is just an xterm
and nothing else. Otherwise \c xsm would try to invoke lots of
clients including the windowmanager \c twm, which isn't very helpful.
<li> Now launch \c xsm from another terminal window. Both a session
manager window and the xterm will appear. The xterm has a nice
property that sets it apart from all the other shells you are
currently running: Within its shell, the \c SESSION_MANAGER
environment variable points to the session manager you just started.
<li> Launch your application from the new xterm window. It will
connect itself automatically to the session manager. You can check
with the \e ClientList push button whether the connect was successful.<br>
<strong>Note:</strong> Never keep the \e ClientList open when you
start or end session managed clients! Otherwise \c xsm is likely to
crash.
<li> Use the session manager's \e Checkpoint and \e Shutdown buttons
with different settings and see how your application behaves. The save
type \e local means that the clients should save their state. It
corresponds to the \l QApplication::saveState() function. The \e
global save type asks application to save their unsaved changes in the
permanent, globally accessible storage. It invokes \l
QApplication::commitData(), respectively.
<li> Whenever something crashes, blame \c xsm and not Qt. \c xsm is far
from being a usable session manager on a user's desktop. It is,
however, stable and useful enough to serve as testing environment.
 </ul>


*/
