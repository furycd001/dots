/****************************************************************************
** $Id: qt/doc/xml.doc   2.3.2   edited 2001-01-26 $
**
** Documentation on the xml module
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page xml.html

\title Qt XML Module

The XML module provides a well-formed XML parser using the SAX2 (Simple API for
XML) interface plus an implementation of the DOM Level 2 (Document Object
Model).

This document assumes that you are familiar with the essentials of XML. It
provides you with information on the XML module in Qt
and explains some often neglected XML features that 
will help you make the best use of the Qt XML classes. 

We will however not teach XML basics. If you wish to learn 
more about XML please refer to other sources,
e.g. <a href="http://www.w3.org/XML/">http://www.w3.org/XML/</a>.


<h2><a name="overview">Overview of the XML architecture in Qt</a></h2>

The Qt XML Module provides two interfaces for XML: SAX2 and DOM Level 2.

SAX is an event-based standard interface for XML parsers.
The Qt interface follows the design of the SAX2 Java implementation.
Its naming scheme was adapted to fit the Qt naming conventions.
Details on SAX2 can be found at
<a href="http://www.megginson.com/SAX/">http://www.megginson.com/SAX/</a>.

Support for SAX2 filters and the reader factory are under development.
Furthermore the Qt implementation does not include the SAX1 compatibility classes 
present in the Java interface. 

For an introduction to Qt's SAX2 classes see
"\link xml-sax.html The Qt SAX2 implementation \endlink". 
A code example is discussed in the "\link xml-sax-walkthrough.html tagreader
walkthrough \endlink".

DOM Level 2 is a W3C Recommendation for XML interfaces that maps the
constituents of an XML document to a tree structure. Details and the
specification of DOM Level 2 can be found at
<a href="http://www.w3.org/DOM/">http://www.w3.org/DOM/</a>.
More information about the DOM classes in Qt is provided in the
\link xml-dom.html Qt XML DOM overview \endlink.


 
<h2><a name="namespaces">An introduction to namespaces</a></h2>
 
Parts of the Qt XML module documentation assume that you are
familiar with XML namespaces. Here we present a brief introduction;
skip to \link #conventions "Qt XML
documentation conventions" \endlink if you know this material.
 
Namespaces are a concept introduced into XML to allow a more modular design.
With their help data processing software can easily
resolve naming conflicts in XML documents. 

Consider the following example:

\code
<document>
<book>
  <title>Practical XML</title>
  <author title="Ms" name="Eris Kallisti"/>
  <chapter>
    <title>A Namespace Called fnord</title>  
  </chapter> 
</book>
</document>
\endcode

Here we find three different uses of the name \e title. If you wish
to process this document you will encounter problems
because each of the \e titles should be displayed in a different manner --
even though they have the same name.

The solution would be to have some means of identifying the 
first occurence of \e title as the title of a book, i.e. 
to use the \e title element of a 
book namespace to distinguish it from for example the chapter title, e.g.:
\code
<book:title>Practical XML</book:title>
\endcode

\e book in this case is
a \e prefix denoting the namespace.

Before we can apply a
namespace to element or attribute names we must declare it.

Namespaces are URIs like \e http://trolltech.com/fnord/book/.
This does not mean that data must be available at this
address; the URI is simply used to provide a unique name.

We declare namespaces in the same way as 
attributes; strictly speaking they \e are attributes. 
To make for example \e http://trolltech.com/fnord/ the document's
default XML namespace \e xmlns we write

\code
xmlns="http://trolltech.com/fnord/"
\endcode

To distinguish the \e http://trolltech.com/fnord/book/ namespace
from the default, we have to supply it with a prefix:

\code
xmlns:book="http://trolltech.com/fnord/book/"
\endcode

A namespace that is declared like this can be applied
to element and attribute names by prepending the appropriate
prefix and a ":" delimiter. We have already seen this with
the \e book:title element.

Element names without a prefix belong to the default namespace.
This rule does not apply to attributes: an attribute 
without a prefix does not belong to any of the declared
XML namespaces at all.
Attributes always belong to the "traditional" namespace
of the element in which they appear. A "traditional" namespace
is not an XML namespace, it simply means that all attribute names
belonging to one element must be different. Later we will see how
to assign an XML namespace to an attribute.

Due to the fact that attributes without prefixes are not in any 
XML namespace there is 
no collision between the attribute \e title (that belongs to the 
\e author element) and for example the \e title element within a \e chapter.
 
Lets clarify matters with an example:
\code
<document xmlns:book = 'http://trolltech.com/fnord/book/'
          xmlns      = 'http://trolltech.com/fnord/' >
<book>
  <book:title>Practical XML</book:title>
  <book:author xmlns:fnord = 'http://trolltech.com/fnord/'
               title="Ms" 
               fnord:title="Goddess" 
               name="Eris Kallisti"/>
  <chapter>
    <title>A Namespace Called fnord</title>
  </chapter>
</book>
</document>
\endcode

Within the \e document element we have two namespaces declared.
The default namespace \e http://trolltech.com/fnord/ 
applies to the \e book element, the \e chapter element,
the appropriate \e title element and of course to \e document itself.

The \e book:author and \e book:title elements 
belong to the namespace with the
URI \e http://trolltech.com/fnord/book/.

The two \e book:author attributes \e title and \e name have no XML namespace
assigned. 
They are only members of the "traditional" namespace of the element
\e book:author, meaning that for example two \e title attributes 
in \e book:author are forbidden.

In the above example we circumvent the last rule by adding a \e title
attribute from the \e http://trolltech.com/fnord/ namespace to \e book:author: 
the \e fnord:title comes from the namespace with the prefix \e fnord
that is declared in the \e book:author element. 

Clearly the \e fnord namespace has the same namespace URI as the
default namespace. So why didn't we simply use the 
default namespace we'd already declared? The answer is quite complex:
<UL>
<LI>attributes without a prefix don't belong to any XML namespace at all,
even not to the default namespace;
<LI>additionaly omitting the prefix would lead to a \e title-title clash;
<LI>writing it as \e xmlns:title would declare a new namespace with
the prefix \e title instead of applying the default \e xmlns namespace. 
</UL>

With the Qt XML classes elements and attributes can be accessed in two ways: either 
by refering to their qualified names consisting of the namespace prefix
and the "real" name (or \e local name) or 
by the combination of local name and namespace URI.


More information on XML namespaces can be found at
<a href="http://www.w3.org/TR/REC-xml-names/">http://www.w3.org/TR/REC-xml-names/</a>.


<h2><a name="conventions">Conventions used in Qt XML documentation</a></h2>

The following terms are used to distinguish the parts of names within the context of
namespaces:
<ul>
<li>The <i>qualified name</i>
    is the name as it appears in the document. (In the above example \e
    book:title is a qualified name.)
<li>A <i>namespace prefix</i> in a qualified name
    is the part to the left of the ":".  (\e book is the namespace prefix in 
    \e book:title.)
<li>The <i>local part</i> of a name (also refered to as the <i>local name</i>) appears 
    to the right of the ":".
    (Thus \e title is the local part of \e book:title.)
<li>The <I>namespace URI</I> ("Uniform Resource Identifier") is a unique
    identifier for a namespace. It looks like a URL
    (e.g. \e http://trolltech.com/fnord/ ) but does not require 
    data to be accessible by the given protocol at the named address.
</ul>

Elements without a ":" (like \e chapter in the example) do not have a namespace
prefix. In this case the local part and the qualified name 
are identical (i.e. \e chapter).

*/
